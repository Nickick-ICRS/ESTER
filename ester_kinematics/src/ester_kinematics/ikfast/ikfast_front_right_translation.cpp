/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004a generated on 2023-08-17 03:08:41.439299
/// Generated using solver translation3d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include <dart/external/ikfast/ikfast.h>
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004a);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

const IkReal inf = std::numeric_limits<IkReal>::infinity();

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12;
x0=IKsin(j[1]);
x1=IKcos(j[1]);
x2=IKsin(j[2]);
x3=IKsin(j[0]);
x4=IKcos(j[2]);
x5=IKcos(j[0]);
x6=((0.08711556)*x1);
x7=((0.0742462120245875)*x3);
x8=((0.08711556)*x0);
x9=((0.0742462120245875)*x5);
x10=((0.0742462120245875)*x5);
x11=((0.0742462120245875)*x1);
x12=((0.0742462120245875)*x0);
eetrans[0]=((0.083972)+(((-1.0)*x8))+(((-1.0)*x6))+((x4*(((((-1.0)*x11))+(((-0.0742462120245875)*x0))))))+((x2*(((((-0.0742462120245875)*x1))+x12)))));
IkReal x13=((1.0)*x3);
eetrans[1]=((-0.0878)+(((-0.04565)*x5))+(((-1.0)*x13*x8))+((x4*((((x1*x7))+(((-1.0)*x12*x13))))))+((x3*x6))+((x2*(((((-1.0)*x0*x7))+(((-1.0)*x11*x13)))))));
eetrans[2]=((((-0.04565)*x3))+((x5*x8))+((x2*((((x1*x9))+((x0*x10))))))+((x4*((((x0*x9))+(((-1.0)*x1*x10))))))+(((-1.0)*x5*x6)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 3; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x33000003; }

class IKSolver_FR {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_px=((-1.0)*pz);
new_py=((0.0878)+py);
new_pz=((-0.083972)+px);
px = new_px; py = new_py; pz = new_pz;
pp=((px*px)+(py*py)+(pz*pz));
{
IkReal j0eval[2];
j0eval[0]=((px*px)+(py*py));
j0eval[1]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
j2eval[0]=0.00066936045404082;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((px*px)+(py*py));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
px=0;
py=0;
pp=pz*pz;
j1eval[0]=0.34846224;
j1eval[1]=pz;
if((pz*pz) < -0.00001)
continue;
j1eval[2]=((1.4142135623731)*(IKsqrt(pz*pz)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
px=0;
py=0;
pp=pz*pz;
j2eval[0]=0.00066936045404082;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
px=0;
py=0;
pp=pz*pz;
j2eval[0]=0.00066936045404082;
j2eval[1]=2.62417035451839e-141;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[1];
px=0;
py=0;
pp=0;
pz=0;
j2eval[0]=-2.0;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
px=0;
py=0;
pp=0;
pz=0;
j2eval[0]=-3.72733085368305;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
px=0;
py=0;
pp=0;
pz=0;
j2eval[0]=-3.35893805378354e-139;
j2eval[1]=-2.0;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
j2array[0]=4.71238898038469;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x14=IKsin(j2);
IkReal x15=IKcos(j2);
evalcond[0]=((-0.105)*x14);
evalcond[1]=((0.123200006445727)+(((0.105)*x15)));
evalcond[2]=((0.0282871640882272)+(((5.63536292589461e-132)*x14))+(((0.0258720013536027)*x15)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
px=0;
py=0;
pp=0;
pz=0;
IkReal x16=((0.0742462120245875)*sj2);
IkReal x17=((0.0742462120245875)*cj2);
j1eval[0]=((IKabs(((-0.08711556)+(((-1.0)*x17))+x16)))+(IKabs(((-0.08711556)+(((-1.0)*x16))+(((-1.0)*x17))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
px=0;
py=0;
pp=0;
pz=0;
IkReal x18=((0.0742462120245875)*cj2);
IkReal x19=((0.0742462120245875)*sj2);
j1eval[0]=((IKabs(((0.08711556)+(((-1.0)*x19))+x18)))+(IKabs(((-0.08711556)+(((-1.0)*x18))+(((-1.0)*x19))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x20=((0.0742462120245875)*cj2);
IkReal x21=((0.0742462120245875)*sj2);
CheckValue<IkReal> x23 = IKatan2WithCheck(IkReal(((0.08711556)+(((-1.0)*x21))+x20)),IkReal(((-0.08711556)+(((-1.0)*x20))+(((-1.0)*x21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x23.valid){
continue;
}
IkReal x22=x23.value;
j1array[0]=((-1.0)*x22);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x22)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x24=IKsin(j1);
IkReal x25=IKcos(j1);
IkReal x26=((0.0742462120245875)*cj2);
IkReal x27=((0.0742462120245875)*sj2);
evalcond[0]=((((-1.0)*x25*x26))+(((-1.0)*x25*x27))+(((-1.0)*x24*x26))+(((-0.08711556)*x25))+(((-0.08711556)*x24))+((x24*x27)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x28=((0.0742462120245875)*sj2);
IkReal x29=((0.0742462120245875)*cj2);
CheckValue<IkReal> x31 = IKatan2WithCheck(IkReal(((-0.08711556)+(((-1.0)*x29))+(((-1.0)*x28)))),IkReal(((-0.08711556)+(((-1.0)*x29))+x28)),IKFAST_ATAN2_MAGTHRESH);
if(!x31.valid){
continue;
}
IkReal x30=x31.value;
j1array[0]=((-1.0)*x30);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x30)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x32=IKcos(j1);
IkReal x33=IKsin(j1);
IkReal x34=((0.0742462120245875)*cj2);
IkReal x35=((0.0742462120245875)*sj2);
evalcond[0]=((((-1.0)*x32*x35))+(((-1.0)*x33*x34))+(((-1.0)*x33*x35))+(((0.08711556)*x32))+(((-0.08711556)*x33))+((x32*x34)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
j2array[0]=3.14159265358979;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x36=IKsin(j2);
IkReal x37=IKcos(j2);
evalcond[0]=((-0.105)*x36);
evalcond[1]=((0.123200006445727)+(((0.105)*x37)));
evalcond[2]=((0.0282871640882272)+(((5.63536292589461e-132)*x36))+(((0.0258720013536027)*x37)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
px=0;
py=0;
pp=0;
pz=0;
IkReal x38=((0.0742462120245875)*sj2);
IkReal x39=((0.0742462120245875)*cj2);
j1eval[0]=((IKabs(((-0.08711556)+(((-1.0)*x38))+(((-1.0)*x39)))))+(IKabs(((-0.08711556)+(((-1.0)*x39))+x38))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
px=0;
py=0;
pp=0;
pz=0;
IkReal x40=((0.0742462120245875)*cj2);
IkReal x41=((0.0742462120245875)*sj2);
j1eval[0]=((IKabs(((0.08711556)+(((-1.0)*x41))+x40)))+(IKabs(((-0.08711556)+(((-1.0)*x41))+(((-1.0)*x40))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x42=((0.0742462120245875)*cj2);
IkReal x43=((0.0742462120245875)*sj2);
CheckValue<IkReal> x45 = IKatan2WithCheck(IkReal(((0.08711556)+(((-1.0)*x43))+x42)),IkReal(((-0.08711556)+(((-1.0)*x42))+(((-1.0)*x43)))),IKFAST_ATAN2_MAGTHRESH);
if(!x45.valid){
continue;
}
IkReal x44=x45.value;
j1array[0]=((-1.0)*x44);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x44)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x46=IKsin(j1);
IkReal x47=IKcos(j1);
IkReal x48=((0.0742462120245875)*cj2);
IkReal x49=((0.0742462120245875)*sj2);
evalcond[0]=(((x46*x49))+(((-0.08711556)*x47))+(((-0.08711556)*x46))+(((-1.0)*x47*x48))+(((-1.0)*x47*x49))+(((-1.0)*x46*x48)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x50=((0.0742462120245875)*sj2);
IkReal x51=((0.0742462120245875)*cj2);
CheckValue<IkReal> x53 = IKatan2WithCheck(IkReal(((-0.08711556)+(((-1.0)*x51))+(((-1.0)*x50)))),IkReal(((-0.08711556)+x50+(((-1.0)*x51)))),IKFAST_ATAN2_MAGTHRESH);
if(!x53.valid){
continue;
}
IkReal x52=x53.value;
j1array[0]=((-1.0)*x52);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x52)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x54=IKcos(j1);
IkReal x55=IKsin(j1);
IkReal x56=((0.0742462120245875)*cj2);
IkReal x57=((0.0742462120245875)*sj2);
evalcond[0]=((((-1.0)*x55*x56))+(((-1.0)*x55*x57))+(((-1.0)*x54*x57))+(((-0.08711556)*x55))+(((0.08711556)*x54))+((x54*x56)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
j2array[0]=3.14159265358979;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x58=IKsin(j2);
IkReal x59=IKcos(j2);
evalcond[0]=((-0.105)*x58);
evalcond[1]=((0.123200006445727)+(((0.105)*x59)));
evalcond[2]=((0.0282871640882272)+(((5.63536292589461e-132)*x58))+(((0.0258720013536027)*x59)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
px=0;
py=0;
pp=0;
pz=0;
IkReal x60=((0.0742462120245875)*sj2);
IkReal x61=((0.0742462120245875)*cj2);
j1eval[0]=((IKabs(((-0.08711556)+x60+(((-1.0)*x61)))))+(IKabs(((-0.08711556)+(((-1.0)*x61))+(((-1.0)*x60))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
px=0;
py=0;
pp=0;
pz=0;
IkReal x62=((0.0742462120245875)*cj2);
IkReal x63=((0.0742462120245875)*sj2);
j1eval[0]=((IKabs(((0.08711556)+x62+(((-1.0)*x63)))))+(IKabs(((-0.08711556)+(((-1.0)*x63))+(((-1.0)*x62))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x64=((0.0742462120245875)*cj2);
IkReal x65=((0.0742462120245875)*sj2);
CheckValue<IkReal> x67 = IKatan2WithCheck(IkReal(((0.08711556)+x64+(((-1.0)*x65)))),IkReal(((-0.08711556)+(((-1.0)*x65))+(((-1.0)*x64)))),IKFAST_ATAN2_MAGTHRESH);
if(!x67.valid){
continue;
}
IkReal x66=x67.value;
j1array[0]=((-1.0)*x66);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x66)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x68=IKsin(j1);
IkReal x69=IKcos(j1);
IkReal x70=((0.0742462120245875)*cj2);
IkReal x71=((0.0742462120245875)*sj2);
evalcond[0]=(((x68*x71))+(((-1.0)*x69*x70))+(((-1.0)*x69*x71))+(((-1.0)*x68*x70))+(((-0.08711556)*x69))+(((-0.08711556)*x68)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x72=((0.0742462120245875)*sj2);
IkReal x73=((0.0742462120245875)*cj2);
CheckValue<IkReal> x75 = IKatan2WithCheck(IkReal(((-0.08711556)+(((-1.0)*x72))+(((-1.0)*x73)))),IkReal(((-0.08711556)+(((-1.0)*x73))+x72)),IKFAST_ATAN2_MAGTHRESH);
if(!x75.valid){
continue;
}
IkReal x74=x75.value;
j1array[0]=((-1.0)*x74);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x74)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x76=IKcos(j1);
IkReal x77=IKsin(j1);
IkReal x78=((0.0742462120245875)*cj2);
IkReal x79=((0.0742462120245875)*sj2);
evalcond[0]=((((0.08711556)*x76))+((x76*x78))+(((-0.08711556)*x77))+(((-1.0)*x76*x79))+(((-1.0)*x77*x79))+(((-1.0)*x77*x78)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
if( (((1.09335044095026)+(((-38.6518223438771)*(pz*pz))))) < -1-IKFAST_SINCOS_THRESH || (((1.09335044095026)+(((-38.6518223438771)*(pz*pz))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x80=IKasin(((1.09335044095026)+(((-38.6518223438771)*(pz*pz)))));
j2array[0]=((-1.5707963267949)+(((-1.0)*x80)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((1.5707963267949)+x80);
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
j1eval[0]=((2.0)*pz);
j1eval[1]=IKsign(pz);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
j1eval[0]=((-2.22044604925031e-16)*pz);
j1eval[1]=0;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
IkReal x81=(pz*sj2);
j1eval[0]=((((-2.0)*x81))+(((2.22044604925031e-16)*cj2*pz)));
j1eval[1]=((-1.0)*(IKsign(x81)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
sj2=0;
cj2=1.0;
j2=0;
j1eval[0]=((2.0)*pz);
j1eval[1]=IKsign(pz);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
sj2=0;
cj2=1.0;
j2=0;
j1eval[0]=((1.11022302462516e-16)*pz);
j1eval[1]=((2.22044604925031e-16)*pz);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
sj2=0;
cj2=1.0;
j2=0;
j1eval[0]=2.01280303870185;
j1eval[1]=4.0256060774037;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((-3.09862734975303)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-3.09862734975303)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.09862734975303)*pz))+IKsqr(((-3.09862734975303)*pz))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-3.09862734975303)*pz), ((-3.09862734975303)*pz));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x82=IKcos(j1);
IkReal x83=IKsin(j1);
IkReal x84=((0.161361772024587)*x82);
IkReal x85=((0.161361772024587)*x83);
IkReal x86=(pz*x82);
IkReal x87=(pz*x83);
IkReal x88=((0.707106781186548)*x86);
IkReal x89=((0.707106781186548)*x87);
evalcond[0]=((-0.0020693190882272)+(((-0.17423112)*x87))+(((-0.17423112)*x86))+(((-1.0)*(pz*pz))));
evalcond[1]=(x84+(((-1.0)*x85)));
evalcond[2]=((((-1.0)*pz))+(((-1.0)*x84))+(((-1.0)*x85)));
evalcond[3]=(x89+(((-1.0)*x88)));
evalcond[4]=((0.228200006445727)+x88+x89);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x90=pz*pz;
CheckValue<IkReal> x91=IKPowWithIntegerCheck(pz,-1);
if(!x91.valid){
continue;
}
if( IKabs(((2048.0)*(x91.value)*(((104346560925.201)+(((-4021671242316.41)*x90)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-inf)+(((+inf)*x90)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2048.0)*(x91.value)*(((104346560925.201)+(((-4021671242316.41)*x90))))))+IKsqr(((-inf)+(((+inf)*x90))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((2048.0)*(x91.value)*(((104346560925.201)+(((-4021671242316.41)*x90))))), ((-inf)+(((+inf)*x90))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x92=IKcos(j1);
IkReal x93=IKsin(j1);
IkReal x94=((0.161361772024587)*x92);
IkReal x95=((0.161361772024587)*x93);
IkReal x96=(pz*x92);
IkReal x97=(pz*x93);
IkReal x98=((0.707106781186548)*x96);
IkReal x99=((0.707106781186548)*x97);
evalcond[0]=((-0.0020693190882272)+(((-0.17423112)*x96))+(((-0.17423112)*x97))+(((-1.0)*(pz*pz))));
evalcond[1]=(x94+(((-1.0)*x95)));
evalcond[2]=((((-1.0)*pz))+(((-1.0)*x94))+(((-1.0)*x95)));
evalcond[3]=(x99+(((-1.0)*x98)));
evalcond[4]=((0.228200006445727)+x99+x98);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x100=((-36580.7389931054)+(((-17677669.5296637)*(pz*pz))));
CheckValue<IkReal> x101 = IKatan2WithCheck(IkReal(x100),IkReal(x100),IKFAST_ATAN2_MAGTHRESH);
if(!x101.valid){
continue;
}
CheckValue<IkReal> x102=IKPowWithIntegerCheck(IKsign(pz),-1);
if(!x102.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x101.value)+(((1.5707963267949)*(x102.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x103=IKcos(j1);
IkReal x104=IKsin(j1);
IkReal x105=((0.161361772024587)*x103);
IkReal x106=((0.161361772024587)*x104);
IkReal x107=(pz*x103);
IkReal x108=(pz*x104);
IkReal x109=((0.707106781186548)*x107);
IkReal x110=((0.707106781186548)*x108);
evalcond[0]=((-0.0020693190882272)+(((-0.17423112)*x108))+(((-0.17423112)*x107))+(((-1.0)*(pz*pz))));
evalcond[1]=((((-1.0)*x106))+x105);
evalcond[2]=((((-1.0)*x106))+(((-1.0)*x105))+(((-1.0)*pz)));
evalcond[3]=((((-1.0)*x109))+x110);
evalcond[4]=((0.228200006445727)+x110+x109);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j1eval[0]=((2.0)*pz);
j1eval[1]=IKsign(pz);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j1eval[0]=((1.11022302462516e-16)*pz);
j1eval[1]=((2.22044604925031e-16)*pz);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j1eval[0]=0.0128030387018507;
j1eval[1]=0.0256060774037013;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((-38.8520071844567)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-38.8520071844567)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-38.8520071844567)*pz))+IKsqr(((-38.8520071844567)*pz))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-38.8520071844567)*pz), ((-38.8520071844567)*pz));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x111=IKcos(j1);
IkReal x112=IKsin(j1);
IkReal x113=((0.0128693479754125)*x111);
IkReal x114=((0.0128693479754125)*x112);
IkReal x115=(pz*x111);
IkReal x116=(pz*x112);
IkReal x117=((0.707106781186548)*x115);
IkReal x118=((0.707106781186548)*x116);
evalcond[0]=((-0.0020693190882272)+(((-0.17423112)*x115))+(((-0.17423112)*x116))+(((-1.0)*(pz*pz))));
evalcond[1]=((((-1.0)*x114))+x113);
evalcond[2]=((((-1.0)*x113))+(((-1.0)*x114))+(((-1.0)*pz)));
evalcond[3]=((((-1.0)*x117))+x118);
evalcond[4]=((0.0182000064457271)+x117+x118);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x119=pz*pz;
CheckValue<IkReal> x120=IKPowWithIntegerCheck(pz,-1);
if(!x120.valid){
continue;
}
if( IKabs(((2048.0)*(x120.value)*(((-8322121068.29974)+(((50425553757683.6)*x119)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((+inf)+(((-inf)*x119)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2048.0)*(x120.value)*(((-8322121068.29974)+(((50425553757683.6)*x119))))))+IKsqr(((+inf)+(((-inf)*x119))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((2048.0)*(x120.value)*(((-8322121068.29974)+(((50425553757683.6)*x119))))), ((+inf)+(((-inf)*x119))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x121=IKcos(j1);
IkReal x122=IKsin(j1);
IkReal x123=((0.0128693479754125)*x121);
IkReal x124=((0.0128693479754125)*x122);
IkReal x125=(pz*x121);
IkReal x126=(pz*x122);
IkReal x127=((0.707106781186548)*x125);
IkReal x128=((0.707106781186548)*x126);
evalcond[0]=((-0.0020693190882272)+(((-0.17423112)*x126))+(((-0.17423112)*x125))+(((-1.0)*(pz*pz))));
evalcond[1]=((((-1.0)*x124))+x123);
evalcond[2]=((((-1.0)*x123))+(((-1.0)*x124))+(((-1.0)*pz)));
evalcond[3]=((((-1.0)*x127))+x128);
evalcond[4]=((0.0182000064457271)+x127+x128);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x129=((-36580.7389931054)+(((-17677669.5296637)*(pz*pz))));
CheckValue<IkReal> x130 = IKatan2WithCheck(IkReal(x129),IkReal(x129),IKFAST_ATAN2_MAGTHRESH);
if(!x130.valid){
continue;
}
CheckValue<IkReal> x131=IKPowWithIntegerCheck(IKsign(pz),-1);
if(!x131.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x130.value)+(((1.5707963267949)*(x131.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x132=IKcos(j1);
IkReal x133=IKsin(j1);
IkReal x134=((0.0128693479754125)*x132);
IkReal x135=((0.0128693479754125)*x133);
IkReal x136=(pz*x132);
IkReal x137=(pz*x133);
IkReal x138=((0.707106781186548)*x136);
IkReal x139=((0.707106781186548)*x137);
evalcond[0]=((-0.0020693190882272)+(((-0.17423112)*x136))+(((-0.17423112)*x137))+(((-1.0)*(pz*pz))));
evalcond[1]=(x134+(((-1.0)*x135)));
evalcond[2]=((((-1.0)*pz))+(((-1.0)*x134))+(((-1.0)*x135)));
evalcond[3]=(x139+(((-1.0)*x138)));
evalcond[4]=((0.0182000064457271)+x139+x138);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x140=pz*pz;
IkReal x141=((1088944.5)*x140);
IkReal x142=((928077.650307344)*x140);
IkReal x143=(sj2*x142);
IkReal x144=(cj2*x142);
CheckValue<IkReal> x145=IKPowWithIntegerCheck(IKsign((pz*sj2)),-1);
if(!x145.valid){
continue;
}
CheckValue<IkReal> x146 = IKatan2WithCheck(IkReal(((2253.37363987002)+(((-1.0)*x141))+(((1920.48879713803)*cj2))+(((1920.48879713803)*sj2))+x143+x144)),IkReal(((-2253.37363987002)+(((-1.0)*x144))+(((-1920.48879713803)*cj2))+(((1920.48879713803)*sj2))+x141+x143)),IKFAST_ATAN2_MAGTHRESH);
if(!x146.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((-1.5707963267949)*(x145.value)))+(x146.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x147=IKsin(j1);
IkReal x148=IKcos(j1);
IkReal x149=((0.0742462120245875)*cj2);
IkReal x150=((0.0742462120245875)*sj2);
IkReal x151=((0.08711556)*x147);
IkReal x152=((0.08711556)*x148);
IkReal x153=(pz*x148);
IkReal x154=(pz*x147);
IkReal x155=((0.707106781186548)*x153);
IkReal x156=((0.707106781186548)*x154);
IkReal x157=(x147*x150);
IkReal x158=(x148*x149);
IkReal x159=(x147*x149);
IkReal x160=(x148*x150);
IkReal x161=(x152+x158);
IkReal x162=(x160+x151+x159);
evalcond[0]=((-0.0020693190882272)+(((-0.17423112)*x153))+(((-0.17423112)*x154))+(((-1.0)*(pz*pz))));
evalcond[1]=((((-1.0)*x155))+x156+(((-0.105)*sj2)));
evalcond[2]=((0.123200006445727)+(((0.105)*cj2))+x156+x155);
evalcond[3]=((((-1.0)*x157))+(((-1.0)*x162))+x161);
evalcond[4]=((((-1.0)*x162))+(((-1.0)*x161))+x157+(((-1.0)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x163=((457356.69)*cj2);
IkReal x164=((17677669.5296637)*(pz*pz));
CheckValue<IkReal> x165 = IKatan2WithCheck(IkReal(((500051.138683051)+(((-1.0)*x164))+x163)),IkReal(((-500051.138683051)+(((-1.0)*x163))+x164)),IKFAST_ATAN2_MAGTHRESH);
if(!x165.valid){
continue;
}
j1array[0]=((+inf)+(x165.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x166=IKsin(j1);
IkReal x167=IKcos(j1);
IkReal x168=((0.0742462120245875)*cj2);
IkReal x169=((0.0742462120245875)*sj2);
IkReal x170=((0.08711556)*x166);
IkReal x171=((0.08711556)*x167);
IkReal x172=(pz*x167);
IkReal x173=(pz*x166);
IkReal x174=((0.707106781186548)*x172);
IkReal x175=((0.707106781186548)*x173);
IkReal x176=(x166*x169);
IkReal x177=(x167*x168);
IkReal x178=(x166*x168);
IkReal x179=(x167*x169);
IkReal x180=(x171+x177);
IkReal x181=(x179+x178+x170);
evalcond[0]=((-0.0020693190882272)+(((-0.17423112)*x172))+(((-0.17423112)*x173))+(((-1.0)*(pz*pz))));
evalcond[1]=((((-1.0)*x174))+x175+(((-0.105)*sj2)));
evalcond[2]=((0.123200006445727)+(((0.105)*cj2))+x175+x174);
evalcond[3]=((((-1.0)*x176))+(((-1.0)*x181))+x180);
evalcond[4]=((((-1.0)*x180))+(((-1.0)*x181))+x176+(((-1.0)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x182=((457356.69)*sj2);
IkReal x183=((17677669.5296637)*(pz*pz));
CheckValue<IkReal> x184 = IKatan2WithCheck(IkReal(((-36580.7389931054)+(((-1.0)*x183))+x182)),IkReal(((-36580.7389931054)+(((-1.0)*x183))+(((-1.0)*x182)))),IKFAST_ATAN2_MAGTHRESH);
if(!x184.valid){
continue;
}
CheckValue<IkReal> x185=IKPowWithIntegerCheck(IKsign(pz),-1);
if(!x185.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x184.value)+(((1.5707963267949)*(x185.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x186=IKsin(j1);
IkReal x187=IKcos(j1);
IkReal x188=((0.0742462120245875)*cj2);
IkReal x189=((0.0742462120245875)*sj2);
IkReal x190=((0.08711556)*x186);
IkReal x191=((0.08711556)*x187);
IkReal x192=(pz*x187);
IkReal x193=(pz*x186);
IkReal x194=((0.707106781186548)*x192);
IkReal x195=((0.707106781186548)*x193);
IkReal x196=(x186*x189);
IkReal x197=(x187*x188);
IkReal x198=(x186*x188);
IkReal x199=(x187*x189);
IkReal x200=(x191+x197);
IkReal x201=(x199+x198+x190);
evalcond[0]=((-0.0020693190882272)+(((-0.17423112)*x192))+(((-0.17423112)*x193))+(((-1.0)*(pz*pz))));
evalcond[1]=((((-1.0)*x194))+x195+(((-0.105)*sj2)));
evalcond[2]=((0.123200006445727)+(((0.105)*cj2))+x195+x194);
evalcond[3]=((((-1.0)*x196))+(((-1.0)*x201))+x200);
evalcond[4]=(x196+(((-1.0)*x200))+(((-1.0)*x201))+(((-1.0)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
if( (((1.09335044095026)+(((-38.6518223438771)*(pz*pz))))) < -1-IKFAST_SINCOS_THRESH || (((1.09335044095026)+(((-38.6518223438771)*(pz*pz))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x202=IKasin(((1.09335044095026)+(((-38.6518223438771)*(pz*pz)))));
j2array[0]=((-1.5707963267949)+(((-1.0)*x202)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((1.5707963267949)+x202);
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
j1eval[0]=((2.0)*pz);
j1eval[1]=IKsign(pz);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
j1eval[0]=((-2.22044604925031e-16)*pz);
j1eval[1]=0;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
IkReal x203=(pz*sj2);
j1eval[0]=((((-2.0)*x203))+(((2.22044604925031e-16)*cj2*pz)));
j1eval[1]=((-1.0)*(IKsign(x203)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
sj2=0;
cj2=1.0;
j2=0;
j1eval[0]=((2.0)*pz);
j1eval[1]=IKsign(pz);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
sj2=0;
cj2=1.0;
j2=0;
j1eval[0]=((1.11022302462516e-16)*pz);
j1eval[1]=((2.22044604925031e-16)*pz);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
sj2=0;
cj2=1.0;
j2=0;
j1eval[0]=2.01280303870185;
j1eval[1]=4.0256060774037;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((-3.09862734975303)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-3.09862734975303)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.09862734975303)*pz))+IKsqr(((-3.09862734975303)*pz))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-3.09862734975303)*pz), ((-3.09862734975303)*pz));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x204=IKcos(j1);
IkReal x205=IKsin(j1);
IkReal x206=((0.161361772024587)*x204);
IkReal x207=((0.161361772024587)*x205);
IkReal x208=(pz*x204);
IkReal x209=(pz*x205);
IkReal x210=((0.707106781186548)*x208);
IkReal x211=((0.707106781186548)*x209);
evalcond[0]=((-0.0020693190882272)+(((-1.0)*(pz*pz)))+(((-0.17423112)*x208))+(((-0.17423112)*x209)));
evalcond[1]=((((-1.0)*x207))+x206);
evalcond[2]=((((-1.0)*x206))+(((-1.0)*x207))+(((-1.0)*pz)));
evalcond[3]=(x211+(((-1.0)*x210)));
evalcond[4]=((0.228200006445727)+x210+x211);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x212=pz*pz;
CheckValue<IkReal> x213=IKPowWithIntegerCheck(pz,-1);
if(!x213.valid){
continue;
}
if( IKabs(((2048.0)*(x213.value)*(((104346560925.201)+(((-4021671242316.41)*x212)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-inf)+(((+inf)*x212)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2048.0)*(x213.value)*(((104346560925.201)+(((-4021671242316.41)*x212))))))+IKsqr(((-inf)+(((+inf)*x212))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((2048.0)*(x213.value)*(((104346560925.201)+(((-4021671242316.41)*x212))))), ((-inf)+(((+inf)*x212))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x214=IKcos(j1);
IkReal x215=IKsin(j1);
IkReal x216=((0.161361772024587)*x214);
IkReal x217=((0.161361772024587)*x215);
IkReal x218=(pz*x214);
IkReal x219=(pz*x215);
IkReal x220=((0.707106781186548)*x218);
IkReal x221=((0.707106781186548)*x219);
evalcond[0]=((-0.0020693190882272)+(((-0.17423112)*x219))+(((-0.17423112)*x218))+(((-1.0)*(pz*pz))));
evalcond[1]=(x216+(((-1.0)*x217)));
evalcond[2]=((((-1.0)*pz))+(((-1.0)*x217))+(((-1.0)*x216)));
evalcond[3]=(x221+(((-1.0)*x220)));
evalcond[4]=((0.228200006445727)+x221+x220);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x222=((-36580.7389931054)+(((-17677669.5296637)*(pz*pz))));
CheckValue<IkReal> x223 = IKatan2WithCheck(IkReal(x222),IkReal(x222),IKFAST_ATAN2_MAGTHRESH);
if(!x223.valid){
continue;
}
CheckValue<IkReal> x224=IKPowWithIntegerCheck(IKsign(pz),-1);
if(!x224.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x223.value)+(((1.5707963267949)*(x224.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x225=IKcos(j1);
IkReal x226=IKsin(j1);
IkReal x227=((0.161361772024587)*x225);
IkReal x228=((0.161361772024587)*x226);
IkReal x229=(pz*x225);
IkReal x230=(pz*x226);
IkReal x231=((0.707106781186548)*x229);
IkReal x232=((0.707106781186548)*x230);
evalcond[0]=((-0.0020693190882272)+(((-0.17423112)*x230))+(((-1.0)*(pz*pz)))+(((-0.17423112)*x229)));
evalcond[1]=(x227+(((-1.0)*x228)));
evalcond[2]=((((-1.0)*pz))+(((-1.0)*x228))+(((-1.0)*x227)));
evalcond[3]=((((-1.0)*x231))+x232);
evalcond[4]=((0.228200006445727)+x232+x231);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j1eval[0]=((2.0)*pz);
j1eval[1]=IKsign(pz);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j1eval[0]=((1.11022302462516e-16)*pz);
j1eval[1]=((2.22044604925031e-16)*pz);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j1eval[0]=0.0128030387018507;
j1eval[1]=0.0256060774037013;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((-38.8520071844567)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-38.8520071844567)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-38.8520071844567)*pz))+IKsqr(((-38.8520071844567)*pz))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-38.8520071844567)*pz), ((-38.8520071844567)*pz));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x233=IKcos(j1);
IkReal x234=IKsin(j1);
IkReal x235=((0.0128693479754125)*x233);
IkReal x236=((0.0128693479754125)*x234);
IkReal x237=(pz*x233);
IkReal x238=(pz*x234);
IkReal x239=((0.707106781186548)*x237);
IkReal x240=((0.707106781186548)*x238);
evalcond[0]=((-0.0020693190882272)+(((-0.17423112)*x238))+(((-0.17423112)*x237))+(((-1.0)*(pz*pz))));
evalcond[1]=((((-1.0)*x236))+x235);
evalcond[2]=((((-1.0)*pz))+(((-1.0)*x235))+(((-1.0)*x236)));
evalcond[3]=((((-1.0)*x239))+x240);
evalcond[4]=((0.0182000064457271)+x239+x240);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x241=pz*pz;
CheckValue<IkReal> x242=IKPowWithIntegerCheck(pz,-1);
if(!x242.valid){
continue;
}
if( IKabs(((2048.0)*(x242.value)*(((-8322121068.29974)+(((50425553757683.6)*x241)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((+inf)+(((-inf)*x241)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2048.0)*(x242.value)*(((-8322121068.29974)+(((50425553757683.6)*x241))))))+IKsqr(((+inf)+(((-inf)*x241))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((2048.0)*(x242.value)*(((-8322121068.29974)+(((50425553757683.6)*x241))))), ((+inf)+(((-inf)*x241))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x243=IKcos(j1);
IkReal x244=IKsin(j1);
IkReal x245=((0.0128693479754125)*x243);
IkReal x246=((0.0128693479754125)*x244);
IkReal x247=(pz*x243);
IkReal x248=(pz*x244);
IkReal x249=((0.707106781186548)*x247);
IkReal x250=((0.707106781186548)*x248);
evalcond[0]=((-0.0020693190882272)+(((-1.0)*(pz*pz)))+(((-0.17423112)*x247))+(((-0.17423112)*x248)));
evalcond[1]=(x245+(((-1.0)*x246)));
evalcond[2]=((((-1.0)*pz))+(((-1.0)*x245))+(((-1.0)*x246)));
evalcond[3]=(x250+(((-1.0)*x249)));
evalcond[4]=((0.0182000064457271)+x250+x249);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x251=((-36580.7389931054)+(((-17677669.5296637)*(pz*pz))));
CheckValue<IkReal> x252 = IKatan2WithCheck(IkReal(x251),IkReal(x251),IKFAST_ATAN2_MAGTHRESH);
if(!x252.valid){
continue;
}
CheckValue<IkReal> x253=IKPowWithIntegerCheck(IKsign(pz),-1);
if(!x253.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x252.value)+(((1.5707963267949)*(x253.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x254=IKcos(j1);
IkReal x255=IKsin(j1);
IkReal x256=((0.0128693479754125)*x254);
IkReal x257=((0.0128693479754125)*x255);
IkReal x258=(pz*x254);
IkReal x259=(pz*x255);
IkReal x260=((0.707106781186548)*x258);
IkReal x261=((0.707106781186548)*x259);
evalcond[0]=((-0.0020693190882272)+(((-1.0)*(pz*pz)))+(((-0.17423112)*x259))+(((-0.17423112)*x258)));
evalcond[1]=(x256+(((-1.0)*x257)));
evalcond[2]=((((-1.0)*pz))+(((-1.0)*x257))+(((-1.0)*x256)));
evalcond[3]=(x261+(((-1.0)*x260)));
evalcond[4]=((0.0182000064457271)+x261+x260);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x262=pz*pz;
IkReal x263=((1088944.5)*x262);
IkReal x264=((928077.650307344)*x262);
IkReal x265=(sj2*x264);
IkReal x266=(cj2*x264);
CheckValue<IkReal> x267=IKPowWithIntegerCheck(IKsign((pz*sj2)),-1);
if(!x267.valid){
continue;
}
CheckValue<IkReal> x268 = IKatan2WithCheck(IkReal(((2253.37363987002)+(((1920.48879713803)*cj2))+(((1920.48879713803)*sj2))+x265+x266+(((-1.0)*x263)))),IkReal(((-2253.37363987002)+(((-1920.48879713803)*cj2))+(((1920.48879713803)*sj2))+x265+x263+(((-1.0)*x266)))),IKFAST_ATAN2_MAGTHRESH);
if(!x268.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((-1.5707963267949)*(x267.value)))+(x268.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x269=IKsin(j1);
IkReal x270=IKcos(j1);
IkReal x271=((0.0742462120245875)*cj2);
IkReal x272=((0.0742462120245875)*sj2);
IkReal x273=((0.08711556)*x269);
IkReal x274=((0.08711556)*x270);
IkReal x275=(pz*x270);
IkReal x276=(pz*x269);
IkReal x277=((0.707106781186548)*x275);
IkReal x278=((0.707106781186548)*x276);
IkReal x279=(x269*x272);
IkReal x280=(x270*x271);
IkReal x281=(x269*x271);
IkReal x282=(x270*x272);
IkReal x283=(x274+x280);
IkReal x284=(x273+x282+x281);
evalcond[0]=((-0.0020693190882272)+(((-1.0)*(pz*pz)))+(((-0.17423112)*x275))+(((-0.17423112)*x276)));
evalcond[1]=(x278+(((-1.0)*x277))+(((-0.105)*sj2)));
evalcond[2]=((0.123200006445727)+(((0.105)*cj2))+x277+x278);
evalcond[3]=(x283+(((-1.0)*x279))+(((-1.0)*x284)));
evalcond[4]=((((-1.0)*pz))+x279+(((-1.0)*x283))+(((-1.0)*x284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x285=((457356.69)*cj2);
IkReal x286=((17677669.5296637)*(pz*pz));
CheckValue<IkReal> x287 = IKatan2WithCheck(IkReal(((500051.138683051)+x285+(((-1.0)*x286)))),IkReal(((-500051.138683051)+x286+(((-1.0)*x285)))),IKFAST_ATAN2_MAGTHRESH);
if(!x287.valid){
continue;
}
j1array[0]=((+inf)+(x287.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x288=IKsin(j1);
IkReal x289=IKcos(j1);
IkReal x290=((0.0742462120245875)*cj2);
IkReal x291=((0.0742462120245875)*sj2);
IkReal x292=((0.08711556)*x288);
IkReal x293=((0.08711556)*x289);
IkReal x294=(pz*x289);
IkReal x295=(pz*x288);
IkReal x296=((0.707106781186548)*x294);
IkReal x297=((0.707106781186548)*x295);
IkReal x298=(x288*x291);
IkReal x299=(x289*x290);
IkReal x300=(x288*x290);
IkReal x301=(x289*x291);
IkReal x302=(x299+x293);
IkReal x303=(x300+x301+x292);
evalcond[0]=((-0.0020693190882272)+(((-1.0)*(pz*pz)))+(((-0.17423112)*x295))+(((-0.17423112)*x294)));
evalcond[1]=((((-1.0)*x296))+x297+(((-0.105)*sj2)));
evalcond[2]=((0.123200006445727)+(((0.105)*cj2))+x296+x297);
evalcond[3]=((((-1.0)*x298))+x302+(((-1.0)*x303)));
evalcond[4]=((((-1.0)*pz))+x298+(((-1.0)*x303))+(((-1.0)*x302)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x304=((457356.69)*sj2);
IkReal x305=((17677669.5296637)*(pz*pz));
CheckValue<IkReal> x306=IKPowWithIntegerCheck(IKsign(pz),-1);
if(!x306.valid){
continue;
}
CheckValue<IkReal> x307 = IKatan2WithCheck(IkReal(((-36580.7389931054)+x304+(((-1.0)*x305)))),IkReal(((-36580.7389931054)+(((-1.0)*x305))+(((-1.0)*x304)))),IKFAST_ATAN2_MAGTHRESH);
if(!x307.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x306.value)))+(x307.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x308=IKsin(j1);
IkReal x309=IKcos(j1);
IkReal x310=((0.0742462120245875)*cj2);
IkReal x311=((0.0742462120245875)*sj2);
IkReal x312=((0.08711556)*x308);
IkReal x313=((0.08711556)*x309);
IkReal x314=(pz*x309);
IkReal x315=(pz*x308);
IkReal x316=((0.707106781186548)*x314);
IkReal x317=((0.707106781186548)*x315);
IkReal x318=(x308*x311);
IkReal x319=(x309*x310);
IkReal x320=(x308*x310);
IkReal x321=(x309*x311);
IkReal x322=(x319+x313);
IkReal x323=(x320+x321+x312);
evalcond[0]=((-0.0020693190882272)+(((-1.0)*(pz*pz)))+(((-0.17423112)*x315))+(((-0.17423112)*x314)));
evalcond[1]=(x317+(((-1.0)*x316))+(((-0.105)*sj2)));
evalcond[2]=((0.123200006445727)+(((0.105)*cj2))+x317+x316);
evalcond[3]=((((-1.0)*x323))+x322+(((-1.0)*x318)));
evalcond[4]=((((-1.0)*x323))+(((-1.0)*x322))+x318+(((-1.0)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x324=pz*pz;
IkReal x325=((-0.17423112)*pz);
CheckValue<IkReal> x328 = IKatan2WithCheck(IkReal(x325),IkReal(x325),IKFAST_ATAN2_MAGTHRESH);
if(!x328.valid){
continue;
}
IkReal x326=((1.0)*(x328.value));
if((x324) < -0.00001)
continue;
CheckValue<IkReal> x329=IKPowWithIntegerCheck(IKabs(((1.4142135623731)*(IKsqrt(x324)))),-1);
if(!x329.valid){
continue;
}
if( (((-5.73950279376038)*(x329.value)*(((-0.0020693190882272)+(((-1.0)*x324)))))) < -1-IKFAST_SINCOS_THRESH || (((-5.73950279376038)*(x329.value)*(((-0.0020693190882272)+(((-1.0)*x324)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x327=((-1.0)*(IKasin(((-5.73950279376038)*(x329.value)*(((-0.0020693190882272)+(((-1.0)*x324))))))));
j1array[0]=((((-1.0)*x327))+(((-1.0)*x326)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x326))+(((1.0)*x327)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x330=((6.73435029701474)*pz);
IkReal x331=((6.73435029701474)*pz);
if( IKabs(((((-1.0)*cj1*x330))+((sj1*x331)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.17333339472121)+(((-1.0)*cj1*x331))+(((-1.0)*sj1*x330)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*x330))+((sj1*x331))))+IKsqr(((-1.17333339472121)+(((-1.0)*cj1*x331))+(((-1.0)*sj1*x330))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj1*x330))+((sj1*x331))), ((-1.17333339472121)+(((-1.0)*cj1*x331))+(((-1.0)*sj1*x330))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x332=IKcos(j2);
IkReal x333=IKsin(j2);
IkReal x334=((0.08711556)*cj1);
IkReal x335=((0.08711556)*sj1);
IkReal x336=((0.707106781186548)*pz);
IkReal x337=(sj1*x336);
IkReal x338=(cj1*x336);
IkReal x339=((0.0742462120245875)*x333);
IkReal x340=((0.0742462120245875)*x332);
IkReal x341=(sj1*x339);
IkReal x342=(sj1*x340);
IkReal x343=(cj1*x340);
IkReal x344=(cj1*x339);
IkReal x345=(x334+x343);
IkReal x346=(x335+x342+x344);
evalcond[0]=((((-0.105)*x333))+x337+(((-1.0)*x338)));
evalcond[1]=((0.123200006445727)+x338+x337+(((0.105)*x332)));
evalcond[2]=((0.0282871640882272)+(((0.0258720013536027)*x332))+(((-1.0)*(pz*pz))));
evalcond[3]=(x345+(((-1.0)*x346))+(((-1.0)*x341)));
evalcond[4]=(x341+(((-1.0)*pz))+(((-1.0)*x345))+(((-1.0)*x346)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
px=0;
py=0;
pp=pz*pz;
j1eval[0]=0.34846224;
j1eval[1]=pz;
if((pz*pz) < -0.00001)
continue;
j1eval[2]=((1.4142135623731)*(IKsqrt(pz*pz)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
px=0;
py=0;
pp=pz*pz;
j2eval[0]=0.00066936045404082;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
px=0;
py=0;
pp=pz*pz;
j2eval[0]=0.00066936045404082;
j2eval[1]=2.62417035451839e-141;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[1];
px=0;
py=0;
pp=0;
pz=0;
j2eval[0]=-2.0;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
px=0;
py=0;
pp=0;
pz=0;
j2eval[0]=-3.72733085368305;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
px=0;
py=0;
pp=0;
pz=0;
j2eval[0]=-3.35893805378354e-139;
j2eval[1]=-2.0;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1, j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
j2array[0]=4.71238898038469;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x347=IKsin(j2);
IkReal x348=IKcos(j2);
evalcond[0]=((-0.105)*x347);
evalcond[1]=((0.123200006445727)+(((0.105)*x348)));
evalcond[2]=((0.0282871640882272)+(((0.0258720013536027)*x348))+(((5.63536292589461e-132)*x347)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
px=0;
py=0;
pp=0;
pz=0;
IkReal x349=((0.0742462120245875)*sj2);
IkReal x350=((0.0742462120245875)*cj2);
j1eval[0]=((IKabs(((-0.08711556)+(((-1.0)*x350))+(((-1.0)*x349)))))+(IKabs(((-0.08711556)+(((-1.0)*x350))+x349))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
px=0;
py=0;
pp=0;
pz=0;
IkReal x351=((0.0742462120245875)*cj2);
IkReal x352=((0.0742462120245875)*sj2);
j1eval[0]=((IKabs(((-0.08711556)+(((-1.0)*x351))+(((-1.0)*x352)))))+(IKabs(((0.08711556)+(((-1.0)*x352))+x351))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x353=((0.0742462120245875)*cj2);
IkReal x354=((0.0742462120245875)*sj2);
CheckValue<IkReal> x356 = IKatan2WithCheck(IkReal(((0.08711556)+(((-1.0)*x354))+x353)),IkReal(((-0.08711556)+(((-1.0)*x354))+(((-1.0)*x353)))),IKFAST_ATAN2_MAGTHRESH);
if(!x356.valid){
continue;
}
IkReal x355=x356.value;
j1array[0]=((-1.0)*x355);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x355)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x357=IKsin(j1);
IkReal x358=IKcos(j1);
IkReal x359=((0.0742462120245875)*cj2);
IkReal x360=((0.0742462120245875)*sj2);
evalcond[0]=((((-1.0)*x357*x359))+(((-1.0)*x358*x360))+(((-1.0)*x358*x359))+((x357*x360))+(((-0.08711556)*x358))+(((-0.08711556)*x357)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x361=((0.0742462120245875)*sj2);
IkReal x362=((0.0742462120245875)*cj2);
CheckValue<IkReal> x364 = IKatan2WithCheck(IkReal(((-0.08711556)+(((-1.0)*x362))+(((-1.0)*x361)))),IkReal(((-0.08711556)+(((-1.0)*x362))+x361)),IKFAST_ATAN2_MAGTHRESH);
if(!x364.valid){
continue;
}
IkReal x363=x364.value;
j1array[0]=((-1.0)*x363);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x363)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x365=IKcos(j1);
IkReal x366=IKsin(j1);
IkReal x367=((0.0742462120245875)*cj2);
IkReal x368=((0.0742462120245875)*sj2);
evalcond[0]=(((x365*x367))+(((-1.0)*x366*x368))+(((-1.0)*x366*x367))+(((0.08711556)*x365))+(((-1.0)*x365*x368))+(((-0.08711556)*x366)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
j2array[0]=3.14159265358979;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x369=IKsin(j2);
IkReal x370=IKcos(j2);
evalcond[0]=((-0.105)*x369);
evalcond[1]=((0.123200006445727)+(((0.105)*x370)));
evalcond[2]=((0.0282871640882272)+(((0.0258720013536027)*x370))+(((5.63536292589461e-132)*x369)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
px=0;
py=0;
pp=0;
pz=0;
IkReal x371=((0.0742462120245875)*sj2);
IkReal x372=((0.0742462120245875)*cj2);
j1eval[0]=((IKabs(((-0.08711556)+(((-1.0)*x372))+(((-1.0)*x371)))))+(IKabs(((-0.08711556)+(((-1.0)*x372))+x371))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
px=0;
py=0;
pp=0;
pz=0;
IkReal x373=((0.0742462120245875)*cj2);
IkReal x374=((0.0742462120245875)*sj2);
j1eval[0]=((IKabs(((-0.08711556)+(((-1.0)*x373))+(((-1.0)*x374)))))+(IKabs(((0.08711556)+(((-1.0)*x374))+x373))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x375=((0.0742462120245875)*cj2);
IkReal x376=((0.0742462120245875)*sj2);
CheckValue<IkReal> x378 = IKatan2WithCheck(IkReal(((0.08711556)+(((-1.0)*x376))+x375)),IkReal(((-0.08711556)+(((-1.0)*x375))+(((-1.0)*x376)))),IKFAST_ATAN2_MAGTHRESH);
if(!x378.valid){
continue;
}
IkReal x377=x378.value;
j1array[0]=((-1.0)*x377);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x377)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x379=IKsin(j1);
IkReal x380=IKcos(j1);
IkReal x381=((0.0742462120245875)*cj2);
IkReal x382=((0.0742462120245875)*sj2);
evalcond[0]=((((-0.08711556)*x379))+(((-1.0)*x380*x382))+(((-1.0)*x380*x381))+(((-1.0)*x379*x381))+((x379*x382))+(((-0.08711556)*x380)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x383=((0.0742462120245875)*sj2);
IkReal x384=((0.0742462120245875)*cj2);
CheckValue<IkReal> x386 = IKatan2WithCheck(IkReal(((-0.08711556)+(((-1.0)*x383))+(((-1.0)*x384)))),IkReal(((-0.08711556)+x383+(((-1.0)*x384)))),IKFAST_ATAN2_MAGTHRESH);
if(!x386.valid){
continue;
}
IkReal x385=x386.value;
j1array[0]=((-1.0)*x385);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x385)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x387=IKcos(j1);
IkReal x388=IKsin(j1);
IkReal x389=((0.0742462120245875)*cj2);
IkReal x390=((0.0742462120245875)*sj2);
evalcond[0]=((((-1.0)*x387*x390))+(((0.08711556)*x387))+((x387*x389))+(((-1.0)*x388*x390))+(((-0.08711556)*x388))+(((-1.0)*x388*x389)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
j2array[0]=3.14159265358979;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x391=IKsin(j2);
IkReal x392=IKcos(j2);
evalcond[0]=((-0.105)*x391);
evalcond[1]=((0.123200006445727)+(((0.105)*x392)));
evalcond[2]=((0.0282871640882272)+(((0.0258720013536027)*x392))+(((5.63536292589461e-132)*x391)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
px=0;
py=0;
pp=0;
pz=0;
IkReal x393=((0.0742462120245875)*sj2);
IkReal x394=((0.0742462120245875)*cj2);
j1eval[0]=((IKabs(((-0.08711556)+(((-1.0)*x394))+x393)))+(IKabs(((-0.08711556)+(((-1.0)*x394))+(((-1.0)*x393))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
px=0;
py=0;
pp=0;
pz=0;
IkReal x395=((0.0742462120245875)*cj2);
IkReal x396=((0.0742462120245875)*sj2);
j1eval[0]=((IKabs(((-0.08711556)+(((-1.0)*x395))+(((-1.0)*x396)))))+(IKabs(((0.08711556)+(((-1.0)*x396))+x395))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x397=((0.0742462120245875)*cj2);
IkReal x398=((0.0742462120245875)*sj2);
CheckValue<IkReal> x400 = IKatan2WithCheck(IkReal(((0.08711556)+(((-1.0)*x398))+x397)),IkReal(((-0.08711556)+(((-1.0)*x397))+(((-1.0)*x398)))),IKFAST_ATAN2_MAGTHRESH);
if(!x400.valid){
continue;
}
IkReal x399=x400.value;
j1array[0]=((-1.0)*x399);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x399)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x401=IKsin(j1);
IkReal x402=IKcos(j1);
IkReal x403=((0.0742462120245875)*cj2);
IkReal x404=((0.0742462120245875)*sj2);
evalcond[0]=((((-1.0)*x402*x404))+(((-1.0)*x402*x403))+(((-1.0)*x401*x403))+(((-0.08711556)*x402))+(((-0.08711556)*x401))+((x401*x404)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x405=((0.0742462120245875)*sj2);
IkReal x406=((0.0742462120245875)*cj2);
CheckValue<IkReal> x408 = IKatan2WithCheck(IkReal(((-0.08711556)+(((-1.0)*x405))+(((-1.0)*x406)))),IkReal(((-0.08711556)+x405+(((-1.0)*x406)))),IKFAST_ATAN2_MAGTHRESH);
if(!x408.valid){
continue;
}
IkReal x407=x408.value;
j1array[0]=((-1.0)*x407);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x407)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x409=IKcos(j1);
IkReal x410=IKsin(j1);
IkReal x411=((0.0742462120245875)*cj2);
IkReal x412=((0.0742462120245875)*sj2);
evalcond[0]=((((0.08711556)*x409))+((x409*x411))+(((-0.08711556)*x410))+(((-1.0)*x410*x411))+(((-1.0)*x410*x412))+(((-1.0)*x409*x412)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
if( (((1.09335044095026)+(((-38.6518223438771)*(pz*pz))))) < -1-IKFAST_SINCOS_THRESH || (((1.09335044095026)+(((-38.6518223438771)*(pz*pz))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x413=IKasin(((1.09335044095026)+(((-38.6518223438771)*(pz*pz)))));
j2array[0]=((-1.5707963267949)+(((-1.0)*x413)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((1.5707963267949)+x413);
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
j1eval[0]=((2.0)*pz);
j1eval[1]=IKsign(pz);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
j1eval[0]=((-2.22044604925031e-16)*pz);
j1eval[1]=0;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
IkReal x414=(pz*sj2);
j1eval[0]=((((-2.0)*x414))+(((2.22044604925031e-16)*cj2*pz)));
j1eval[1]=((-1.0)*(IKsign(x414)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
sj2=0;
cj2=1.0;
j2=0;
j1eval[0]=((2.0)*pz);
j1eval[1]=IKsign(pz);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
sj2=0;
cj2=1.0;
j2=0;
j1eval[0]=((1.11022302462516e-16)*pz);
j1eval[1]=((2.22044604925031e-16)*pz);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
sj2=0;
cj2=1.0;
j2=0;
j1eval[0]=2.01280303870185;
j1eval[1]=4.0256060774037;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
j1array[0]=2.35619449019234;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=5.49778714378214;
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
evalcond[0]=((((0.161361772024587)*(IKcos(j1))))+(((-0.161361772024587)*(IKsin(j1)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((-3.09862734975303)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-3.09862734975303)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.09862734975303)*pz))+IKsqr(((-3.09862734975303)*pz))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-3.09862734975303)*pz), ((-3.09862734975303)*pz));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x415=IKcos(j1);
IkReal x416=IKsin(j1);
IkReal x417=((0.161361772024587)*x415);
IkReal x418=((0.161361772024587)*x416);
IkReal x419=(pz*x415);
IkReal x420=(pz*x416);
IkReal x421=((0.707106781186548)*x419);
IkReal x422=((0.707106781186548)*x420);
evalcond[0]=((-0.0020693190882272)+(((-0.17423112)*x419))+(((-0.17423112)*x420))+(((-1.0)*(pz*pz))));
evalcond[1]=(x417+(((-1.0)*x418)));
evalcond[2]=((((-1.0)*pz))+(((-1.0)*x418))+(((-1.0)*x417)));
evalcond[3]=((((-1.0)*x421))+x422);
evalcond[4]=((0.228200006445727)+x422+x421);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x423=pz*pz;
CheckValue<IkReal> x424=IKPowWithIntegerCheck(pz,-1);
if(!x424.valid){
continue;
}
if( IKabs(((2048.0)*(x424.value)*(((104346560925.201)+(((-4021671242316.41)*x423)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-inf)+(((+inf)*x423)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2048.0)*(x424.value)*(((104346560925.201)+(((-4021671242316.41)*x423))))))+IKsqr(((-inf)+(((+inf)*x423))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((2048.0)*(x424.value)*(((104346560925.201)+(((-4021671242316.41)*x423))))), ((-inf)+(((+inf)*x423))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x425=IKcos(j1);
IkReal x426=IKsin(j1);
IkReal x427=((0.161361772024587)*x425);
IkReal x428=((0.161361772024587)*x426);
IkReal x429=(pz*x425);
IkReal x430=(pz*x426);
IkReal x431=((0.707106781186548)*x429);
IkReal x432=((0.707106781186548)*x430);
evalcond[0]=((-0.0020693190882272)+(((-0.17423112)*x429))+(((-1.0)*(pz*pz)))+(((-0.17423112)*x430)));
evalcond[1]=((((-1.0)*x428))+x427);
evalcond[2]=((((-1.0)*x428))+(((-1.0)*x427))+(((-1.0)*pz)));
evalcond[3]=((((-1.0)*x431))+x432);
evalcond[4]=((0.228200006445727)+x431+x432);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x433=((-36580.7389931054)+(((-17677669.5296637)*(pz*pz))));
CheckValue<IkReal> x434 = IKatan2WithCheck(IkReal(x433),IkReal(x433),IKFAST_ATAN2_MAGTHRESH);
if(!x434.valid){
continue;
}
CheckValue<IkReal> x435=IKPowWithIntegerCheck(IKsign(pz),-1);
if(!x435.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x434.value)+(((1.5707963267949)*(x435.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x436=IKcos(j1);
IkReal x437=IKsin(j1);
IkReal x438=((0.161361772024587)*x436);
IkReal x439=((0.161361772024587)*x437);
IkReal x440=(pz*x436);
IkReal x441=(pz*x437);
IkReal x442=((0.707106781186548)*x440);
IkReal x443=((0.707106781186548)*x441);
evalcond[0]=((-0.0020693190882272)+(((-1.0)*(pz*pz)))+(((-0.17423112)*x440))+(((-0.17423112)*x441)));
evalcond[1]=((((-1.0)*x439))+x438);
evalcond[2]=((((-1.0)*x439))+(((-1.0)*x438))+(((-1.0)*pz)));
evalcond[3]=((((-1.0)*x442))+x443);
evalcond[4]=((0.228200006445727)+x443+x442);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j1eval[0]=((2.0)*pz);
j1eval[1]=IKsign(pz);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j1eval[0]=((1.11022302462516e-16)*pz);
j1eval[1]=((2.22044604925031e-16)*pz);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j1eval[0]=0.0128030387018507;
j1eval[1]=0.0256060774037013;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
j1array[0]=2.35619449019234;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=5.49778714378214;
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
evalcond[0]=((((-0.0128693479754125)*(IKsin(j1))))+(((0.0128693479754125)*(IKcos(j1)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((-38.8520071844567)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-38.8520071844567)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-38.8520071844567)*pz))+IKsqr(((-38.8520071844567)*pz))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-38.8520071844567)*pz), ((-38.8520071844567)*pz));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x444=IKcos(j1);
IkReal x445=IKsin(j1);
IkReal x446=((0.0128693479754125)*x444);
IkReal x447=((0.0128693479754125)*x445);
IkReal x448=(pz*x444);
IkReal x449=(pz*x445);
IkReal x450=((0.707106781186548)*x448);
IkReal x451=((0.707106781186548)*x449);
evalcond[0]=((-0.0020693190882272)+(((-1.0)*(pz*pz)))+(((-0.17423112)*x448))+(((-0.17423112)*x449)));
evalcond[1]=((((-1.0)*x447))+x446);
evalcond[2]=((((-1.0)*x446))+(((-1.0)*x447))+(((-1.0)*pz)));
evalcond[3]=((((-1.0)*x450))+x451);
evalcond[4]=((0.0182000064457271)+x450+x451);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x452=pz*pz;
CheckValue<IkReal> x453=IKPowWithIntegerCheck(pz,-1);
if(!x453.valid){
continue;
}
if( IKabs(((2048.0)*(x453.value)*(((-8322121068.29974)+(((50425553757683.6)*x452)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((+inf)+(((-inf)*x452)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2048.0)*(x453.value)*(((-8322121068.29974)+(((50425553757683.6)*x452))))))+IKsqr(((+inf)+(((-inf)*x452))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((2048.0)*(x453.value)*(((-8322121068.29974)+(((50425553757683.6)*x452))))), ((+inf)+(((-inf)*x452))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x454=IKcos(j1);
IkReal x455=IKsin(j1);
IkReal x456=((0.0128693479754125)*x454);
IkReal x457=((0.0128693479754125)*x455);
IkReal x458=(pz*x454);
IkReal x459=(pz*x455);
IkReal x460=((0.707106781186548)*x458);
IkReal x461=((0.707106781186548)*x459);
evalcond[0]=((-0.0020693190882272)+(((-1.0)*(pz*pz)))+(((-0.17423112)*x459))+(((-0.17423112)*x458)));
evalcond[1]=((((-1.0)*x457))+x456);
evalcond[2]=((((-1.0)*x457))+(((-1.0)*x456))+(((-1.0)*pz)));
evalcond[3]=((((-1.0)*x460))+x461);
evalcond[4]=((0.0182000064457271)+x461+x460);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x462=((-36580.7389931054)+(((-17677669.5296637)*(pz*pz))));
CheckValue<IkReal> x463 = IKatan2WithCheck(IkReal(x462),IkReal(x462),IKFAST_ATAN2_MAGTHRESH);
if(!x463.valid){
continue;
}
CheckValue<IkReal> x464=IKPowWithIntegerCheck(IKsign(pz),-1);
if(!x464.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x463.value)+(((1.5707963267949)*(x464.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x465=IKcos(j1);
IkReal x466=IKsin(j1);
IkReal x467=((0.0128693479754125)*x465);
IkReal x468=((0.0128693479754125)*x466);
IkReal x469=(pz*x465);
IkReal x470=(pz*x466);
IkReal x471=((0.707106781186548)*x469);
IkReal x472=((0.707106781186548)*x470);
evalcond[0]=((-0.0020693190882272)+(((-1.0)*(pz*pz)))+(((-0.17423112)*x469))+(((-0.17423112)*x470)));
evalcond[1]=((((-1.0)*x468))+x467);
evalcond[2]=((((-1.0)*x468))+(((-1.0)*x467))+(((-1.0)*pz)));
evalcond[3]=((((-1.0)*x471))+x472);
evalcond[4]=((0.0182000064457271)+x471+x472);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x475 = ((4.0)*(pz*pz));
if(IKabs(x475)==0){
continue;
}
IkReal x473=pow(x475,-0.5);
IkReal x474=(pz*x473);
CheckValue<IkReal> x476 = IKatan2WithCheck(IkReal(((2.22044604925031e-16)*pz)),IkReal(((-2.0)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x476.valid){
continue;
}
IkReal gconst18=((-1.0)*(x476.value));
IkReal gconst19=((1.67134765854379e-125)*x474);
IkReal gconst20=((-2.0)*x474);
CheckValue<IkReal> x477 = IKatan2WithCheck(IkReal(((2.22044604925031e-16)*pz)),IkReal(((-2.0)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x477.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x477.value)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
IkReal x478=pz*pz;
IkReal x479=x473;
IkReal x480=(pz*x479);
px=0;
py=0;
pp=x478;
sj2=gconst19;
cj2=gconst20;
CheckValue<IkReal> x481 = IKatan2WithCheck(IkReal(((7.5881722561605e-9)*pz)),IkReal(((-2.00000000758817)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x481.valid){
continue;
}
j2=((-1.0)*(x481.value));
CheckValue<IkReal> x482 = IKatan2WithCheck(IkReal(((2.22044604925031e-16)*pz)),IkReal(((-2.0)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x482.valid){
continue;
}
IkReal gconst18=((-1.0)*(x482.value));
IkReal gconst19=((1.67134765854379e-125)*x480);
IkReal gconst20=((-2.0)*x480);
j1eval[0]=((2.0)*pz);
j1eval[1]=IKsign(pz);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x483=pz*pz;
IkReal x484=x473;
IkReal x485=(pz*x484);
px=0;
py=0;
pp=x483;
sj2=gconst19;
cj2=gconst20;
CheckValue<IkReal> x486 = IKatan2WithCheck(IkReal(((7.5881722561605e-9)*pz)),IkReal(((-2.00000000758817)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x486.valid){
continue;
}
j2=((-1.0)*(x486.value));
CheckValue<IkReal> x487 = IKatan2WithCheck(IkReal(((2.22044604925031e-16)*pz)),IkReal(((-2.0)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x487.valid){
continue;
}
IkReal gconst18=((-1.0)*(x487.value));
IkReal gconst19=((1.67134765854379e-125)*x485);
IkReal gconst20=((-2.0)*x485);
j1eval[0]=((-2.22044604925031e-16)*pz);
j1eval[1]=0;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x488=pz*pz;
IkReal x489=((1088944.5)*x488);
IkReal x490=((928077.650307344)*x488);
IkReal x491=(gconst19*x490);
IkReal x492=(gconst20*x490);
CheckValue<IkReal> x493=IKPowWithIntegerCheck(IKsign((gconst19*pz)),-1);
if(!x493.valid){
continue;
}
CheckValue<IkReal> x494 = IKatan2WithCheck(IkReal(((2253.37363987002)+(((-1.0)*x489))+(((1920.48879713803)*gconst19))+(((1920.48879713803)*gconst20))+x492+x491)),IkReal(((-2253.37363987002)+(((-1.0)*x492))+(((1920.48879713803)*gconst19))+x489+x491+(((-1920.48879713803)*gconst20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x494.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((-1.5707963267949)*(x493.value)))+(x494.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x495=IKsin(j1);
IkReal x496=IKcos(j1);
IkReal x497=((0.0742462120245875)*gconst19);
IkReal x498=((0.0742462120245875)*gconst20);
IkReal x499=((0.08711556)*x495);
IkReal x500=((0.08711556)*x496);
IkReal x501=(pz*x496);
IkReal x502=(pz*x495);
IkReal x503=((0.707106781186548)*x501);
IkReal x504=((0.707106781186548)*x502);
IkReal x505=(x495*x497);
IkReal x506=(x496*x498);
IkReal x507=(x496*x497);
IkReal x508=(x495*x498);
IkReal x509=(x500+x506);
IkReal x510=(x499+x508+x507);
evalcond[0]=((-0.0020693190882272)+(((-1.0)*(pz*pz)))+(((-0.17423112)*x502))+(((-0.17423112)*x501)));
evalcond[1]=((((-1.0)*x503))+x504+(((-0.105)*gconst19)));
evalcond[2]=((0.123200006445727)+(((0.105)*gconst20))+x503+x504);
evalcond[3]=((((-1.0)*x505))+x509+(((-1.0)*x510)));
evalcond[4]=((((-1.0)*x509))+(((-1.0)*pz))+x505+(((-1.0)*x510)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x511=((457356.69)*gconst20);
IkReal x512=((17677669.5296637)*(pz*pz));
CheckValue<IkReal> x513 = IKatan2WithCheck(IkReal(((500051.138683051)+x511+(((-1.0)*x512)))),IkReal(((-500051.138683051)+x512+(((-1.0)*x511)))),IKFAST_ATAN2_MAGTHRESH);
if(!x513.valid){
continue;
}
j1array[0]=((+inf)+(x513.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x514=IKsin(j1);
IkReal x515=IKcos(j1);
IkReal x516=((0.0742462120245875)*gconst19);
IkReal x517=((0.0742462120245875)*gconst20);
IkReal x518=((0.08711556)*x514);
IkReal x519=((0.08711556)*x515);
IkReal x520=(pz*x515);
IkReal x521=(pz*x514);
IkReal x522=((0.707106781186548)*x520);
IkReal x523=((0.707106781186548)*x521);
IkReal x524=(x514*x516);
IkReal x525=(x515*x517);
IkReal x526=(x515*x516);
IkReal x527=(x514*x517);
IkReal x528=(x525+x519);
IkReal x529=(x526+x527+x518);
evalcond[0]=((-0.0020693190882272)+(((-0.17423112)*x521))+(((-0.17423112)*x520))+(((-1.0)*(pz*pz))));
evalcond[1]=((((-1.0)*x522))+x523+(((-0.105)*gconst19)));
evalcond[2]=((0.123200006445727)+(((0.105)*gconst20))+x522+x523);
evalcond[3]=((((-1.0)*x529))+(((-1.0)*x524))+x528);
evalcond[4]=((((-1.0)*x529))+(((-1.0)*x528))+(((-1.0)*pz))+x524);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x530=((457356.69)*gconst19);
IkReal x531=((17677669.5296637)*(pz*pz));
CheckValue<IkReal> x532 = IKatan2WithCheck(IkReal(((-36580.7389931054)+(((-1.0)*x531))+x530)),IkReal(((-36580.7389931054)+(((-1.0)*x530))+(((-1.0)*x531)))),IKFAST_ATAN2_MAGTHRESH);
if(!x532.valid){
continue;
}
CheckValue<IkReal> x533=IKPowWithIntegerCheck(IKsign(pz),-1);
if(!x533.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x532.value)+(((1.5707963267949)*(x533.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x534=IKsin(j1);
IkReal x535=IKcos(j1);
IkReal x536=((0.0742462120245875)*gconst19);
IkReal x537=((0.0742462120245875)*gconst20);
IkReal x538=((0.08711556)*x534);
IkReal x539=((0.08711556)*x535);
IkReal x540=(pz*x535);
IkReal x541=(pz*x534);
IkReal x542=((0.707106781186548)*x540);
IkReal x543=((0.707106781186548)*x541);
IkReal x544=(x534*x536);
IkReal x545=(x535*x537);
IkReal x546=(x535*x536);
IkReal x547=(x534*x537);
IkReal x548=(x545+x539);
IkReal x549=(x546+x547+x538);
evalcond[0]=((-0.0020693190882272)+(((-0.17423112)*x541))+(((-0.17423112)*x540))+(((-1.0)*(pz*pz))));
evalcond[1]=((((-1.0)*x542))+x543+(((-0.105)*gconst19)));
evalcond[2]=((0.123200006445727)+(((0.105)*gconst20))+x542+x543);
evalcond[3]=((((-1.0)*x544))+(((-1.0)*x549))+x548);
evalcond[4]=((((-1.0)*x549))+(((-1.0)*x548))+(((-1.0)*pz))+x544);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x552 = ((4.0)*(pz*pz));
if(IKabs(x552)==0){
continue;
}
IkReal x550=pow(x552,-0.5);
IkReal x551=(pz*x550);
CheckValue<IkReal> x553 = IKatan2WithCheck(IkReal(((2.22044604925031e-16)*pz)),IkReal(((-2.0)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x553.valid){
continue;
}
IkReal gconst21=((3.14159265358979)+(((-1.0)*(x553.value))));
IkReal gconst22=((-1.67134765854379e-125)*x551);
IkReal gconst23=((2.0)*x551);
CheckValue<IkReal> x554 = IKatan2WithCheck(IkReal(((2.22044604925031e-16)*pz)),IkReal(((-2.0)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x554.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x554.value)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
IkReal x555=pz*pz;
IkReal x556=x550;
IkReal x557=(pz*x556);
px=0;
py=0;
pp=x555;
sj2=gconst22;
cj2=gconst23;
CheckValue<IkReal> x558 = IKatan2WithCheck(IkReal(((7.5881722561605e-9)*pz)),IkReal(((-2.00000000758817)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x558.valid){
continue;
}
j2=((3.14159265)+(((-1.0)*(x558.value))));
CheckValue<IkReal> x559 = IKatan2WithCheck(IkReal(((2.22044604925031e-16)*pz)),IkReal(((-2.0)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x559.valid){
continue;
}
IkReal gconst21=((3.14159265358979)+(((-1.0)*(x559.value))));
IkReal gconst22=((-1.67134765854379e-125)*x557);
IkReal gconst23=((2.0)*x557);
j1eval[0]=((2.0)*pz);
j1eval[1]=IKsign(pz);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x560=pz*pz;
IkReal x561=x550;
IkReal x562=(pz*x561);
px=0;
py=0;
pp=x560;
sj2=gconst22;
cj2=gconst23;
CheckValue<IkReal> x563 = IKatan2WithCheck(IkReal(((7.5881722561605e-9)*pz)),IkReal(((-2.00000000758817)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x563.valid){
continue;
}
j2=((3.14159265)+(((-1.0)*(x563.value))));
CheckValue<IkReal> x564 = IKatan2WithCheck(IkReal(((2.22044604925031e-16)*pz)),IkReal(((-2.0)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x564.valid){
continue;
}
IkReal gconst21=((3.14159265358979)+(((-1.0)*(x564.value))));
IkReal gconst22=((-1.67134765854379e-125)*x562);
IkReal gconst23=((2.0)*x562);
j1eval[0]=((-2.22044604925031e-16)*pz);
j1eval[1]=0;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x565=pz*pz;
IkReal x566=((1088944.5)*x565);
IkReal x567=((928077.650307344)*x565);
IkReal x568=(gconst22*x567);
IkReal x569=(gconst23*x567);
CheckValue<IkReal> x570=IKPowWithIntegerCheck(IKsign((gconst22*pz)),-1);
if(!x570.valid){
continue;
}
CheckValue<IkReal> x571 = IKatan2WithCheck(IkReal(((2253.37363987002)+(((1920.48879713803)*gconst22))+(((1920.48879713803)*gconst23))+x568+x569+(((-1.0)*x566)))),IkReal(((-2253.37363987002)+(((1920.48879713803)*gconst22))+x568+x566+(((-1920.48879713803)*gconst23))+(((-1.0)*x569)))),IKFAST_ATAN2_MAGTHRESH);
if(!x571.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((-1.5707963267949)*(x570.value)))+(x571.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x572=IKsin(j1);
IkReal x573=IKcos(j1);
IkReal x574=((0.08711556)*x572);
IkReal x575=((0.08711556)*x573);
IkReal x576=(pz*x573);
IkReal x577=((0.0742462120245875)*x572);
IkReal x578=(pz*x572);
IkReal x579=((0.0742462120245875)*x573);
IkReal x580=((0.707106781186548)*x576);
IkReal x581=((0.707106781186548)*x578);
IkReal x582=(gconst22*x577);
IkReal x583=(gconst23*x577);
IkReal x584=(gconst23*x579);
IkReal x585=(gconst22*x579);
IkReal x586=(x575+x584);
IkReal x587=(x574+x583+x585);
evalcond[0]=((-0.0020693190882272)+(((-0.17423112)*x578))+(((-0.17423112)*x576))+(((-1.0)*(pz*pz))));
evalcond[1]=(x581+(((-1.0)*x580))+(((-0.105)*gconst22)));
evalcond[2]=((0.123200006445727)+(((0.105)*gconst23))+x580+x581);
evalcond[3]=(x586+(((-1.0)*x587))+(((-1.0)*x582)));
evalcond[4]=((((-1.0)*pz))+x582+(((-1.0)*x587))+(((-1.0)*x586)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x588=((457356.69)*gconst23);
IkReal x589=((17677669.5296637)*(pz*pz));
CheckValue<IkReal> x590 = IKatan2WithCheck(IkReal(((500051.138683051)+x588+(((-1.0)*x589)))),IkReal(((-500051.138683051)+x589+(((-1.0)*x588)))),IKFAST_ATAN2_MAGTHRESH);
if(!x590.valid){
continue;
}
j1array[0]=((+inf)+(x590.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x591=IKsin(j1);
IkReal x592=IKcos(j1);
IkReal x593=((0.08711556)*x591);
IkReal x594=((0.08711556)*x592);
IkReal x595=(pz*x592);
IkReal x596=((0.0742462120245875)*x591);
IkReal x597=(pz*x591);
IkReal x598=((0.0742462120245875)*x592);
IkReal x599=((0.707106781186548)*x595);
IkReal x600=((0.707106781186548)*x597);
IkReal x601=(gconst22*x596);
IkReal x602=(gconst23*x596);
IkReal x603=(gconst23*x598);
IkReal x604=(gconst22*x598);
IkReal x605=(x594+x603);
IkReal x606=(x593+x602+x604);
evalcond[0]=((-0.0020693190882272)+(((-1.0)*(pz*pz)))+(((-0.17423112)*x597))+(((-0.17423112)*x595)));
evalcond[1]=((((-1.0)*x599))+x600+(((-0.105)*gconst22)));
evalcond[2]=((0.123200006445727)+(((0.105)*gconst23))+x599+x600);
evalcond[3]=(x605+(((-1.0)*x606))+(((-1.0)*x601)));
evalcond[4]=((((-1.0)*pz))+x601+(((-1.0)*x606))+(((-1.0)*x605)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x607=((457356.69)*gconst22);
IkReal x608=((17677669.5296637)*(pz*pz));
CheckValue<IkReal> x609 = IKatan2WithCheck(IkReal(((-36580.7389931054)+x607+(((-1.0)*x608)))),IkReal(((-36580.7389931054)+(((-1.0)*x607))+(((-1.0)*x608)))),IKFAST_ATAN2_MAGTHRESH);
if(!x609.valid){
continue;
}
CheckValue<IkReal> x610=IKPowWithIntegerCheck(IKsign(pz),-1);
if(!x610.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x609.value)+(((1.5707963267949)*(x610.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x611=IKsin(j1);
IkReal x612=IKcos(j1);
IkReal x613=((0.08711556)*x611);
IkReal x614=((0.08711556)*x612);
IkReal x615=(pz*x612);
IkReal x616=((0.0742462120245875)*x611);
IkReal x617=(pz*x611);
IkReal x618=((0.0742462120245875)*x612);
IkReal x619=((0.707106781186548)*x615);
IkReal x620=((0.707106781186548)*x617);
IkReal x621=(gconst22*x616);
IkReal x622=(gconst23*x616);
IkReal x623=(gconst23*x618);
IkReal x624=(gconst22*x618);
IkReal x625=(x614+x623);
IkReal x626=(x613+x624+x622);
evalcond[0]=((-0.0020693190882272)+(((-1.0)*(pz*pz)))+(((-0.17423112)*x617))+(((-0.17423112)*x615)));
evalcond[1]=((((-1.0)*x619))+x620+(((-0.105)*gconst22)));
evalcond[2]=((0.123200006445727)+(((0.105)*gconst23))+x619+x620);
evalcond[3]=((((-1.0)*x626))+(((-1.0)*x621))+x625);
evalcond[4]=((((-1.0)*x626))+(((-1.0)*x625))+(((-1.0)*pz))+x621);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x627=pz*pz;
IkReal x628=((1088944.5)*x627);
IkReal x629=((928077.650307344)*x627);
IkReal x630=(sj2*x629);
IkReal x631=(cj2*x629);
CheckValue<IkReal> x632=IKPowWithIntegerCheck(IKsign((pz*sj2)),-1);
if(!x632.valid){
continue;
}
CheckValue<IkReal> x633 = IKatan2WithCheck(IkReal(((2253.37363987002)+(((1920.48879713803)*cj2))+(((-1.0)*x628))+(((1920.48879713803)*sj2))+x630+x631)),IkReal(((-2253.37363987002)+(((-1920.48879713803)*cj2))+(((1920.48879713803)*sj2))+(((-1.0)*x631))+x628+x630)),IKFAST_ATAN2_MAGTHRESH);
if(!x633.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((-1.5707963267949)*(x632.value)))+(x633.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x634=IKsin(j1);
IkReal x635=IKcos(j1);
IkReal x636=((0.0742462120245875)*cj2);
IkReal x637=((0.0742462120245875)*sj2);
IkReal x638=((0.08711556)*x634);
IkReal x639=((0.08711556)*x635);
IkReal x640=(pz*x635);
IkReal x641=(pz*x634);
IkReal x642=((0.707106781186548)*x640);
IkReal x643=((0.707106781186548)*x641);
IkReal x644=(x634*x637);
IkReal x645=(x635*x636);
IkReal x646=(x634*x636);
IkReal x647=(x635*x637);
IkReal x648=(x645+x639);
IkReal x649=(x647+x646+x638);
evalcond[0]=((-0.0020693190882272)+(((-0.17423112)*x640))+(((-0.17423112)*x641))+(((-1.0)*(pz*pz))));
evalcond[1]=((((-1.0)*x642))+x643+(((-0.105)*sj2)));
evalcond[2]=((0.123200006445727)+(((0.105)*cj2))+x643+x642);
evalcond[3]=((((-1.0)*x644))+(((-1.0)*x649))+x648);
evalcond[4]=((((-1.0)*pz))+(((-1.0)*x648))+(((-1.0)*x649))+x644);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x650=((457356.69)*cj2);
IkReal x651=((17677669.5296637)*(pz*pz));
CheckValue<IkReal> x652 = IKatan2WithCheck(IkReal(((500051.138683051)+(((-1.0)*x651))+x650)),IkReal(((-500051.138683051)+(((-1.0)*x650))+x651)),IKFAST_ATAN2_MAGTHRESH);
if(!x652.valid){
continue;
}
j1array[0]=((+inf)+(x652.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x653=IKsin(j1);
IkReal x654=IKcos(j1);
IkReal x655=((0.0742462120245875)*cj2);
IkReal x656=((0.0742462120245875)*sj2);
IkReal x657=((0.08711556)*x653);
IkReal x658=((0.08711556)*x654);
IkReal x659=(pz*x654);
IkReal x660=(pz*x653);
IkReal x661=((0.707106781186548)*x659);
IkReal x662=((0.707106781186548)*x660);
IkReal x663=(x653*x656);
IkReal x664=(x654*x655);
IkReal x665=(x653*x655);
IkReal x666=(x654*x656);
IkReal x667=(x658+x664);
IkReal x668=(x657+x665+x666);
evalcond[0]=((-0.0020693190882272)+(((-0.17423112)*x660))+(((-1.0)*(pz*pz)))+(((-0.17423112)*x659)));
evalcond[1]=((((-1.0)*x661))+x662+(((-0.105)*sj2)));
evalcond[2]=((0.123200006445727)+(((0.105)*cj2))+x661+x662);
evalcond[3]=((((-1.0)*x663))+(((-1.0)*x668))+x667);
evalcond[4]=((((-1.0)*pz))+(((-1.0)*x667))+(((-1.0)*x668))+x663);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x669=((457356.69)*sj2);
IkReal x670=((17677669.5296637)*(pz*pz));
CheckValue<IkReal> x671 = IKatan2WithCheck(IkReal(((-36580.7389931054)+x669+(((-1.0)*x670)))),IkReal(((-36580.7389931054)+(((-1.0)*x669))+(((-1.0)*x670)))),IKFAST_ATAN2_MAGTHRESH);
if(!x671.valid){
continue;
}
CheckValue<IkReal> x672=IKPowWithIntegerCheck(IKsign(pz),-1);
if(!x672.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x671.value)+(((1.5707963267949)*(x672.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x673=IKsin(j1);
IkReal x674=IKcos(j1);
IkReal x675=((0.0742462120245875)*cj2);
IkReal x676=((0.0742462120245875)*sj2);
IkReal x677=((0.08711556)*x673);
IkReal x678=((0.08711556)*x674);
IkReal x679=(pz*x674);
IkReal x680=(pz*x673);
IkReal x681=((0.707106781186548)*x679);
IkReal x682=((0.707106781186548)*x680);
IkReal x683=(x673*x676);
IkReal x684=(x674*x675);
IkReal x685=(x673*x675);
IkReal x686=(x674*x676);
IkReal x687=(x678+x684);
IkReal x688=(x677+x686+x685);
evalcond[0]=((-0.0020693190882272)+(((-0.17423112)*x679))+(((-0.17423112)*x680))+(((-1.0)*(pz*pz))));
evalcond[1]=((((-1.0)*x681))+x682+(((-0.105)*sj2)));
evalcond[2]=((0.123200006445727)+(((0.105)*cj2))+x682+x681);
evalcond[3]=((((-1.0)*x688))+(((-1.0)*x683))+x687);
evalcond[4]=((((-1.0)*x688))+(((-1.0)*x687))+(((-1.0)*pz))+x683);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
if( (((1.09335044095026)+(((-38.6518223438771)*(pz*pz))))) < -1-IKFAST_SINCOS_THRESH || (((1.09335044095026)+(((-38.6518223438771)*(pz*pz))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x689=IKasin(((1.09335044095026)+(((-38.6518223438771)*(pz*pz)))));
j2array[0]=((-1.5707963267949)+(((-1.0)*x689)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((1.5707963267949)+x689);
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
j1eval[0]=((2.0)*pz);
j1eval[1]=IKsign(pz);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
j1eval[0]=((-2.22044604925031e-16)*pz);
j1eval[1]=0;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
IkReal x690=(pz*sj2);
j1eval[0]=((((-2.0)*x690))+(((2.22044604925031e-16)*cj2*pz)));
j1eval[1]=((-1.0)*(IKsign(x690)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
sj2=0;
cj2=1.0;
j2=0;
j1eval[0]=((2.0)*pz);
j1eval[1]=IKsign(pz);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
sj2=0;
cj2=1.0;
j2=0;
j1eval[0]=((1.11022302462516e-16)*pz);
j1eval[1]=((2.22044604925031e-16)*pz);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
sj2=0;
cj2=1.0;
j2=0;
j1eval[0]=2.01280303870185;
j1eval[1]=4.0256060774037;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
j1array[0]=2.35619449019234;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=5.49778714378214;
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
evalcond[0]=((((0.161361772024587)*(IKcos(j1))))+(((-0.161361772024587)*(IKsin(j1)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((-3.09862734975303)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-3.09862734975303)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.09862734975303)*pz))+IKsqr(((-3.09862734975303)*pz))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-3.09862734975303)*pz), ((-3.09862734975303)*pz));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x691=IKcos(j1);
IkReal x692=IKsin(j1);
IkReal x693=((0.161361772024587)*x691);
IkReal x694=((0.161361772024587)*x692);
IkReal x695=(pz*x691);
IkReal x696=(pz*x692);
IkReal x697=((0.707106781186548)*x695);
IkReal x698=((0.707106781186548)*x696);
evalcond[0]=((-0.0020693190882272)+(((-0.17423112)*x696))+(((-0.17423112)*x695))+(((-1.0)*(pz*pz))));
evalcond[1]=(x693+(((-1.0)*x694)));
evalcond[2]=((((-1.0)*pz))+(((-1.0)*x694))+(((-1.0)*x693)));
evalcond[3]=(x698+(((-1.0)*x697)));
evalcond[4]=((0.228200006445727)+x697+x698);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x699=pz*pz;
CheckValue<IkReal> x700=IKPowWithIntegerCheck(pz,-1);
if(!x700.valid){
continue;
}
if( IKabs(((2048.0)*(x700.value)*(((104346560925.201)+(((-4021671242316.41)*x699)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-inf)+(((+inf)*x699)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2048.0)*(x700.value)*(((104346560925.201)+(((-4021671242316.41)*x699))))))+IKsqr(((-inf)+(((+inf)*x699))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((2048.0)*(x700.value)*(((104346560925.201)+(((-4021671242316.41)*x699))))), ((-inf)+(((+inf)*x699))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x701=IKcos(j1);
IkReal x702=IKsin(j1);
IkReal x703=((0.161361772024587)*x701);
IkReal x704=((0.161361772024587)*x702);
IkReal x705=(pz*x701);
IkReal x706=(pz*x702);
IkReal x707=((0.707106781186548)*x705);
IkReal x708=((0.707106781186548)*x706);
evalcond[0]=((-0.0020693190882272)+(((-0.17423112)*x706))+(((-0.17423112)*x705))+(((-1.0)*(pz*pz))));
evalcond[1]=((((-1.0)*x704))+x703);
evalcond[2]=((((-1.0)*pz))+(((-1.0)*x703))+(((-1.0)*x704)));
evalcond[3]=((((-1.0)*x707))+x708);
evalcond[4]=((0.228200006445727)+x708+x707);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x709=((-36580.7389931054)+(((-17677669.5296637)*(pz*pz))));
CheckValue<IkReal> x710 = IKatan2WithCheck(IkReal(x709),IkReal(x709),IKFAST_ATAN2_MAGTHRESH);
if(!x710.valid){
continue;
}
CheckValue<IkReal> x711=IKPowWithIntegerCheck(IKsign(pz),-1);
if(!x711.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x710.value)+(((1.5707963267949)*(x711.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x712=IKcos(j1);
IkReal x713=IKsin(j1);
IkReal x714=((0.161361772024587)*x712);
IkReal x715=((0.161361772024587)*x713);
IkReal x716=(pz*x712);
IkReal x717=(pz*x713);
IkReal x718=((0.707106781186548)*x716);
IkReal x719=((0.707106781186548)*x717);
evalcond[0]=((-0.0020693190882272)+(((-0.17423112)*x716))+(((-0.17423112)*x717))+(((-1.0)*(pz*pz))));
evalcond[1]=((((-1.0)*x715))+x714);
evalcond[2]=((((-1.0)*pz))+(((-1.0)*x714))+(((-1.0)*x715)));
evalcond[3]=((((-1.0)*x718))+x719);
evalcond[4]=((0.228200006445727)+x719+x718);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j1eval[0]=((2.0)*pz);
j1eval[1]=IKsign(pz);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j1eval[0]=((1.11022302462516e-16)*pz);
j1eval[1]=((2.22044604925031e-16)*pz);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j1eval[0]=0.0128030387018507;
j1eval[1]=0.0256060774037013;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
j1array[0]=2.35619449019234;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=5.49778714378214;
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
evalcond[0]=((((-0.0128693479754125)*(IKsin(j1))))+(((0.0128693479754125)*(IKcos(j1)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((-38.8520071844567)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-38.8520071844567)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-38.8520071844567)*pz))+IKsqr(((-38.8520071844567)*pz))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-38.8520071844567)*pz), ((-38.8520071844567)*pz));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x720=IKcos(j1);
IkReal x721=IKsin(j1);
IkReal x722=((0.0128693479754125)*x720);
IkReal x723=((0.0128693479754125)*x721);
IkReal x724=(pz*x720);
IkReal x725=(pz*x721);
IkReal x726=((0.707106781186548)*x724);
IkReal x727=((0.707106781186548)*x725);
evalcond[0]=((-0.0020693190882272)+(((-1.0)*(pz*pz)))+(((-0.17423112)*x725))+(((-0.17423112)*x724)));
evalcond[1]=((((-1.0)*x723))+x722);
evalcond[2]=((((-1.0)*x723))+(((-1.0)*x722))+(((-1.0)*pz)));
evalcond[3]=((((-1.0)*x726))+x727);
evalcond[4]=((0.0182000064457271)+x726+x727);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x728=pz*pz;
CheckValue<IkReal> x729=IKPowWithIntegerCheck(pz,-1);
if(!x729.valid){
continue;
}
if( IKabs(((2048.0)*(x729.value)*(((-8322121068.29974)+(((50425553757683.6)*x728)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((+inf)+(((-inf)*x728)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2048.0)*(x729.value)*(((-8322121068.29974)+(((50425553757683.6)*x728))))))+IKsqr(((+inf)+(((-inf)*x728))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((2048.0)*(x729.value)*(((-8322121068.29974)+(((50425553757683.6)*x728))))), ((+inf)+(((-inf)*x728))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x730=IKcos(j1);
IkReal x731=IKsin(j1);
IkReal x732=((0.0128693479754125)*x730);
IkReal x733=((0.0128693479754125)*x731);
IkReal x734=(pz*x730);
IkReal x735=(pz*x731);
IkReal x736=((0.707106781186548)*x734);
IkReal x737=((0.707106781186548)*x735);
evalcond[0]=((-0.0020693190882272)+(((-0.17423112)*x734))+(((-0.17423112)*x735))+(((-1.0)*(pz*pz))));
evalcond[1]=((((-1.0)*x733))+x732);
evalcond[2]=((((-1.0)*pz))+(((-1.0)*x733))+(((-1.0)*x732)));
evalcond[3]=((((-1.0)*x736))+x737);
evalcond[4]=((0.0182000064457271)+x737+x736);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x738=((-36580.7389931054)+(((-17677669.5296637)*(pz*pz))));
CheckValue<IkReal> x739 = IKatan2WithCheck(IkReal(x738),IkReal(x738),IKFAST_ATAN2_MAGTHRESH);
if(!x739.valid){
continue;
}
CheckValue<IkReal> x740=IKPowWithIntegerCheck(IKsign(pz),-1);
if(!x740.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x739.value)+(((1.5707963267949)*(x740.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x741=IKcos(j1);
IkReal x742=IKsin(j1);
IkReal x743=((0.0128693479754125)*x741);
IkReal x744=((0.0128693479754125)*x742);
IkReal x745=(pz*x741);
IkReal x746=(pz*x742);
IkReal x747=((0.707106781186548)*x745);
IkReal x748=((0.707106781186548)*x746);
evalcond[0]=((-0.0020693190882272)+(((-1.0)*(pz*pz)))+(((-0.17423112)*x745))+(((-0.17423112)*x746)));
evalcond[1]=(x743+(((-1.0)*x744)));
evalcond[2]=((((-1.0)*pz))+(((-1.0)*x743))+(((-1.0)*x744)));
evalcond[3]=(x748+(((-1.0)*x747)));
evalcond[4]=((0.0182000064457271)+x747+x748);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x751 = ((4.0)*(pz*pz));
if(IKabs(x751)==0){
continue;
}
IkReal x749=pow(x751,-0.5);
IkReal x750=(pz*x749);
CheckValue<IkReal> x752 = IKatan2WithCheck(IkReal(((2.22044604925031e-16)*pz)),IkReal(((-2.0)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x752.valid){
continue;
}
IkReal gconst18=((-1.0)*(x752.value));
IkReal gconst19=((1.67134765854379e-125)*x750);
IkReal gconst20=((-2.0)*x750);
CheckValue<IkReal> x753 = IKatan2WithCheck(IkReal(((2.22044604925031e-16)*pz)),IkReal(((-2.0)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x753.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x753.value)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
IkReal x754=pz*pz;
IkReal x755=x749;
IkReal x756=(pz*x755);
px=0;
py=0;
pp=x754;
sj2=gconst19;
cj2=gconst20;
CheckValue<IkReal> x757 = IKatan2WithCheck(IkReal(((7.5881722561605e-9)*pz)),IkReal(((-2.00000000758817)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x757.valid){
continue;
}
j2=((-1.0)*(x757.value));
CheckValue<IkReal> x758 = IKatan2WithCheck(IkReal(((2.22044604925031e-16)*pz)),IkReal(((-2.0)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x758.valid){
continue;
}
IkReal gconst18=((-1.0)*(x758.value));
IkReal gconst19=((1.67134765854379e-125)*x756);
IkReal gconst20=((-2.0)*x756);
j1eval[0]=((2.0)*pz);
j1eval[1]=IKsign(pz);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x759=pz*pz;
IkReal x760=x749;
IkReal x761=(pz*x760);
px=0;
py=0;
pp=x759;
sj2=gconst19;
cj2=gconst20;
CheckValue<IkReal> x762 = IKatan2WithCheck(IkReal(((7.5881722561605e-9)*pz)),IkReal(((-2.00000000758817)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x762.valid){
continue;
}
j2=((-1.0)*(x762.value));
CheckValue<IkReal> x763 = IKatan2WithCheck(IkReal(((2.22044604925031e-16)*pz)),IkReal(((-2.0)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x763.valid){
continue;
}
IkReal gconst18=((-1.0)*(x763.value));
IkReal gconst19=((1.67134765854379e-125)*x761);
IkReal gconst20=((-2.0)*x761);
j1eval[0]=((-2.22044604925031e-16)*pz);
j1eval[1]=0;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x764=pz*pz;
IkReal x765=((1088944.5)*x764);
IkReal x766=((928077.650307344)*x764);
IkReal x767=(gconst19*x766);
IkReal x768=(gconst20*x766);
CheckValue<IkReal> x769=IKPowWithIntegerCheck(IKsign((gconst19*pz)),-1);
if(!x769.valid){
continue;
}
CheckValue<IkReal> x770 = IKatan2WithCheck(IkReal(((2253.37363987002)+(((1920.48879713803)*gconst19))+(((1920.48879713803)*gconst20))+(((-1.0)*x765))+x768+x767)),IkReal(((-2253.37363987002)+(((-1.0)*x768))+(((1920.48879713803)*gconst19))+x765+x767+(((-1920.48879713803)*gconst20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x770.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((-1.5707963267949)*(x769.value)))+(x770.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x771=IKsin(j1);
IkReal x772=IKcos(j1);
IkReal x773=((0.0742462120245875)*gconst19);
IkReal x774=((0.0742462120245875)*gconst20);
IkReal x775=((0.08711556)*x771);
IkReal x776=((0.08711556)*x772);
IkReal x777=(pz*x772);
IkReal x778=(pz*x771);
IkReal x779=((0.707106781186548)*x777);
IkReal x780=((0.707106781186548)*x778);
IkReal x781=(x771*x773);
IkReal x782=(x772*x774);
IkReal x783=(x772*x773);
IkReal x784=(x771*x774);
IkReal x785=(x776+x782);
IkReal x786=(x775+x783+x784);
evalcond[0]=((-0.0020693190882272)+(((-1.0)*(pz*pz)))+(((-0.17423112)*x778))+(((-0.17423112)*x777)));
evalcond[1]=(x780+(((-1.0)*x779))+(((-0.105)*gconst19)));
evalcond[2]=((0.123200006445727)+(((0.105)*gconst20))+x779+x780);
evalcond[3]=((((-1.0)*x786))+(((-1.0)*x781))+x785);
evalcond[4]=((((-1.0)*x786))+(((-1.0)*x785))+(((-1.0)*pz))+x781);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x787=((457356.69)*gconst20);
IkReal x788=((17677669.5296637)*(pz*pz));
CheckValue<IkReal> x789 = IKatan2WithCheck(IkReal(((500051.138683051)+(((-1.0)*x788))+x787)),IkReal(((-500051.138683051)+(((-1.0)*x787))+x788)),IKFAST_ATAN2_MAGTHRESH);
if(!x789.valid){
continue;
}
j1array[0]=((+inf)+(x789.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x790=IKsin(j1);
IkReal x791=IKcos(j1);
IkReal x792=((0.0742462120245875)*gconst19);
IkReal x793=((0.0742462120245875)*gconst20);
IkReal x794=((0.08711556)*x790);
IkReal x795=((0.08711556)*x791);
IkReal x796=(pz*x791);
IkReal x797=(pz*x790);
IkReal x798=((0.707106781186548)*x796);
IkReal x799=((0.707106781186548)*x797);
IkReal x800=(x790*x792);
IkReal x801=(x791*x793);
IkReal x802=(x791*x792);
IkReal x803=(x790*x793);
IkReal x804=(x795+x801);
IkReal x805=(x794+x803+x802);
evalcond[0]=((-0.0020693190882272)+(((-1.0)*(pz*pz)))+(((-0.17423112)*x796))+(((-0.17423112)*x797)));
evalcond[1]=((((-1.0)*x798))+x799+(((-0.105)*gconst19)));
evalcond[2]=((0.123200006445727)+(((0.105)*gconst20))+x799+x798);
evalcond[3]=(x804+(((-1.0)*x800))+(((-1.0)*x805)));
evalcond[4]=((((-1.0)*pz))+x800+(((-1.0)*x804))+(((-1.0)*x805)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x806=((457356.69)*gconst19);
IkReal x807=((17677669.5296637)*(pz*pz));
CheckValue<IkReal> x808 = IKatan2WithCheck(IkReal(((-36580.7389931054)+x806+(((-1.0)*x807)))),IkReal(((-36580.7389931054)+(((-1.0)*x806))+(((-1.0)*x807)))),IKFAST_ATAN2_MAGTHRESH);
if(!x808.valid){
continue;
}
CheckValue<IkReal> x809=IKPowWithIntegerCheck(IKsign(pz),-1);
if(!x809.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x808.value)+(((1.5707963267949)*(x809.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x810=IKsin(j1);
IkReal x811=IKcos(j1);
IkReal x812=((0.0742462120245875)*gconst19);
IkReal x813=((0.0742462120245875)*gconst20);
IkReal x814=((0.08711556)*x810);
IkReal x815=((0.08711556)*x811);
IkReal x816=(pz*x811);
IkReal x817=(pz*x810);
IkReal x818=((0.707106781186548)*x816);
IkReal x819=((0.707106781186548)*x817);
IkReal x820=(x810*x812);
IkReal x821=(x811*x813);
IkReal x822=(x811*x812);
IkReal x823=(x810*x813);
IkReal x824=(x815+x821);
IkReal x825=(x814+x823+x822);
evalcond[0]=((-0.0020693190882272)+(((-1.0)*(pz*pz)))+(((-0.17423112)*x816))+(((-0.17423112)*x817)));
evalcond[1]=((((-1.0)*x818))+x819+(((-0.105)*gconst19)));
evalcond[2]=((0.123200006445727)+(((0.105)*gconst20))+x818+x819);
evalcond[3]=((((-1.0)*x820))+(((-1.0)*x825))+x824);
evalcond[4]=((((-1.0)*x824))+(((-1.0)*x825))+(((-1.0)*pz))+x820);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x828 = ((4.0)*(pz*pz));
if(IKabs(x828)==0){
continue;
}
IkReal x826=pow(x828,-0.5);
IkReal x827=(pz*x826);
CheckValue<IkReal> x829 = IKatan2WithCheck(IkReal(((2.22044604925031e-16)*pz)),IkReal(((-2.0)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x829.valid){
continue;
}
IkReal gconst21=((3.14159265358979)+(((-1.0)*(x829.value))));
IkReal gconst22=((-1.67134765854379e-125)*x827);
IkReal gconst23=((2.0)*x827);
CheckValue<IkReal> x830 = IKatan2WithCheck(IkReal(((2.22044604925031e-16)*pz)),IkReal(((-2.0)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x830.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x830.value)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
IkReal x831=pz*pz;
IkReal x832=x826;
IkReal x833=(pz*x832);
px=0;
py=0;
pp=x831;
sj2=gconst22;
cj2=gconst23;
CheckValue<IkReal> x834 = IKatan2WithCheck(IkReal(((7.5881722561605e-9)*pz)),IkReal(((-2.00000000758817)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x834.valid){
continue;
}
j2=((3.14159265)+(((-1.0)*(x834.value))));
CheckValue<IkReal> x835 = IKatan2WithCheck(IkReal(((2.22044604925031e-16)*pz)),IkReal(((-2.0)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x835.valid){
continue;
}
IkReal gconst21=((3.14159265358979)+(((-1.0)*(x835.value))));
IkReal gconst22=((-1.67134765854379e-125)*x833);
IkReal gconst23=((2.0)*x833);
j1eval[0]=((2.0)*pz);
j1eval[1]=IKsign(pz);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x836=pz*pz;
IkReal x837=x826;
IkReal x838=(pz*x837);
px=0;
py=0;
pp=x836;
sj2=gconst22;
cj2=gconst23;
CheckValue<IkReal> x839 = IKatan2WithCheck(IkReal(((7.5881722561605e-9)*pz)),IkReal(((-2.00000000758817)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x839.valid){
continue;
}
j2=((3.14159265)+(((-1.0)*(x839.value))));
CheckValue<IkReal> x840 = IKatan2WithCheck(IkReal(((2.22044604925031e-16)*pz)),IkReal(((-2.0)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x840.valid){
continue;
}
IkReal gconst21=((3.14159265358979)+(((-1.0)*(x840.value))));
IkReal gconst22=((-1.67134765854379e-125)*x838);
IkReal gconst23=((2.0)*x838);
j1eval[0]=((-2.22044604925031e-16)*pz);
j1eval[1]=0;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x841=pz*pz;
IkReal x842=((1088944.5)*x841);
IkReal x843=((928077.650307344)*x841);
IkReal x844=(gconst22*x843);
IkReal x845=(gconst23*x843);
CheckValue<IkReal> x846=IKPowWithIntegerCheck(IKsign((gconst22*pz)),-1);
if(!x846.valid){
continue;
}
CheckValue<IkReal> x847 = IKatan2WithCheck(IkReal(((2253.37363987002)+(((1920.48879713803)*gconst22))+(((1920.48879713803)*gconst23))+(((-1.0)*x842))+x845+x844)),IkReal(((-2253.37363987002)+(((1920.48879713803)*gconst22))+(((-1.0)*x845))+x842+x844+(((-1920.48879713803)*gconst23)))),IKFAST_ATAN2_MAGTHRESH);
if(!x847.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((-1.5707963267949)*(x846.value)))+(x847.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x848=IKsin(j1);
IkReal x849=IKcos(j1);
IkReal x850=((0.08711556)*x848);
IkReal x851=((0.08711556)*x849);
IkReal x852=(pz*x849);
IkReal x853=((0.0742462120245875)*x848);
IkReal x854=(pz*x848);
IkReal x855=((0.0742462120245875)*x849);
IkReal x856=((0.707106781186548)*x852);
IkReal x857=((0.707106781186548)*x854);
IkReal x858=(gconst22*x853);
IkReal x859=(gconst23*x853);
IkReal x860=(gconst23*x855);
IkReal x861=(gconst22*x855);
IkReal x862=(x851+x860);
IkReal x863=(x850+x859+x861);
evalcond[0]=((-0.0020693190882272)+(((-0.17423112)*x854))+(((-0.17423112)*x852))+(((-1.0)*(pz*pz))));
evalcond[1]=((((-1.0)*x856))+x857+(((-0.105)*gconst22)));
evalcond[2]=((0.123200006445727)+(((0.105)*gconst23))+x856+x857);
evalcond[3]=((((-1.0)*x863))+(((-1.0)*x858))+x862);
evalcond[4]=((((-1.0)*x862))+(((-1.0)*x863))+(((-1.0)*pz))+x858);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x864=((457356.69)*gconst23);
IkReal x865=((17677669.5296637)*(pz*pz));
CheckValue<IkReal> x866 = IKatan2WithCheck(IkReal(((500051.138683051)+(((-1.0)*x865))+x864)),IkReal(((-500051.138683051)+(((-1.0)*x864))+x865)),IKFAST_ATAN2_MAGTHRESH);
if(!x866.valid){
continue;
}
j1array[0]=((+inf)+(x866.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x867=IKsin(j1);
IkReal x868=IKcos(j1);
IkReal x869=((0.08711556)*x867);
IkReal x870=((0.08711556)*x868);
IkReal x871=(pz*x868);
IkReal x872=((0.0742462120245875)*x867);
IkReal x873=(pz*x867);
IkReal x874=((0.0742462120245875)*x868);
IkReal x875=((0.707106781186548)*x871);
IkReal x876=((0.707106781186548)*x873);
IkReal x877=(gconst22*x872);
IkReal x878=(gconst23*x872);
IkReal x879=(gconst23*x874);
IkReal x880=(gconst22*x874);
IkReal x881=(x879+x870);
IkReal x882=(x869+x878+x880);
evalcond[0]=((-0.0020693190882272)+(((-1.0)*(pz*pz)))+(((-0.17423112)*x873))+(((-0.17423112)*x871)));
evalcond[1]=(x876+(((-0.105)*gconst22))+(((-1.0)*x875)));
evalcond[2]=((0.123200006445727)+(((0.105)*gconst23))+x875+x876);
evalcond[3]=((((-1.0)*x882))+x881+(((-1.0)*x877)));
evalcond[4]=((((-1.0)*x882))+(((-1.0)*x881))+(((-1.0)*pz))+x877);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x883=((457356.69)*gconst22);
IkReal x884=((17677669.5296637)*(pz*pz));
CheckValue<IkReal> x885=IKPowWithIntegerCheck(IKsign(pz),-1);
if(!x885.valid){
continue;
}
CheckValue<IkReal> x886 = IKatan2WithCheck(IkReal(((-36580.7389931054)+(((-1.0)*x884))+x883)),IkReal(((-36580.7389931054)+(((-1.0)*x883))+(((-1.0)*x884)))),IKFAST_ATAN2_MAGTHRESH);
if(!x886.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x885.value)))+(x886.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x887=IKsin(j1);
IkReal x888=IKcos(j1);
IkReal x889=((0.08711556)*x887);
IkReal x890=((0.08711556)*x888);
IkReal x891=(pz*x888);
IkReal x892=((0.0742462120245875)*x887);
IkReal x893=(pz*x887);
IkReal x894=((0.0742462120245875)*x888);
IkReal x895=((0.707106781186548)*x891);
IkReal x896=((0.707106781186548)*x893);
IkReal x897=(gconst22*x892);
IkReal x898=(gconst23*x892);
IkReal x899=(gconst23*x894);
IkReal x900=(gconst22*x894);
IkReal x901=(x890+x899);
IkReal x902=(x889+x898+x900);
evalcond[0]=((-0.0020693190882272)+(((-1.0)*(pz*pz)))+(((-0.17423112)*x891))+(((-0.17423112)*x893)));
evalcond[1]=((((-1.0)*x895))+x896+(((-0.105)*gconst22)));
evalcond[2]=((0.123200006445727)+(((0.105)*gconst23))+x896+x895);
evalcond[3]=((((-1.0)*x902))+(((-1.0)*x897))+x901);
evalcond[4]=((((-1.0)*x902))+(((-1.0)*x901))+(((-1.0)*pz))+x897);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x903=pz*pz;
IkReal x904=((1088944.5)*x903);
IkReal x905=((928077.650307344)*x903);
IkReal x906=(sj2*x905);
IkReal x907=(cj2*x905);
CheckValue<IkReal> x908=IKPowWithIntegerCheck(IKsign((pz*sj2)),-1);
if(!x908.valid){
continue;
}
CheckValue<IkReal> x909 = IKatan2WithCheck(IkReal(((2253.37363987002)+(((1920.48879713803)*cj2))+(((-1.0)*x904))+(((1920.48879713803)*sj2))+x906+x907)),IkReal(((-2253.37363987002)+(((-1920.48879713803)*cj2))+(((1920.48879713803)*sj2))+(((-1.0)*x907))+x904+x906)),IKFAST_ATAN2_MAGTHRESH);
if(!x909.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((-1.5707963267949)*(x908.value)))+(x909.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x910=IKsin(j1);
IkReal x911=IKcos(j1);
IkReal x912=((0.0742462120245875)*cj2);
IkReal x913=((0.0742462120245875)*sj2);
IkReal x914=((0.08711556)*x910);
IkReal x915=((0.08711556)*x911);
IkReal x916=(pz*x911);
IkReal x917=(pz*x910);
IkReal x918=((0.707106781186548)*x916);
IkReal x919=((0.707106781186548)*x917);
IkReal x920=(x910*x913);
IkReal x921=(x911*x912);
IkReal x922=(x910*x912);
IkReal x923=(x911*x913);
IkReal x924=(x921+x915);
IkReal x925=(x922+x923+x914);
evalcond[0]=((-0.0020693190882272)+(((-0.17423112)*x916))+(((-0.17423112)*x917))+(((-1.0)*(pz*pz))));
evalcond[1]=((((-1.0)*x918))+(((-0.105)*sj2))+x919);
evalcond[2]=((0.123200006445727)+(((0.105)*cj2))+x919+x918);
evalcond[3]=((((-1.0)*x920))+(((-1.0)*x925))+x924);
evalcond[4]=((((-1.0)*x924))+(((-1.0)*x925))+(((-1.0)*pz))+x920);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x926=((457356.69)*cj2);
IkReal x927=((17677669.5296637)*(pz*pz));
CheckValue<IkReal> x928 = IKatan2WithCheck(IkReal(((500051.138683051)+(((-1.0)*x927))+x926)),IkReal(((-500051.138683051)+(((-1.0)*x926))+x927)),IKFAST_ATAN2_MAGTHRESH);
if(!x928.valid){
continue;
}
j1array[0]=((+inf)+(x928.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x929=IKsin(j1);
IkReal x930=IKcos(j1);
IkReal x931=((0.0742462120245875)*cj2);
IkReal x932=((0.0742462120245875)*sj2);
IkReal x933=((0.08711556)*x929);
IkReal x934=((0.08711556)*x930);
IkReal x935=(pz*x930);
IkReal x936=(pz*x929);
IkReal x937=((0.707106781186548)*x935);
IkReal x938=((0.707106781186548)*x936);
IkReal x939=(x929*x932);
IkReal x940=(x930*x931);
IkReal x941=(x929*x931);
IkReal x942=(x930*x932);
IkReal x943=(x934+x940);
IkReal x944=(x933+x941+x942);
evalcond[0]=((-0.0020693190882272)+(((-0.17423112)*x935))+(((-0.17423112)*x936))+(((-1.0)*(pz*pz))));
evalcond[1]=((((-0.105)*sj2))+x938+(((-1.0)*x937)));
evalcond[2]=((0.123200006445727)+(((0.105)*cj2))+x938+x937);
evalcond[3]=((((-1.0)*x944))+x943+(((-1.0)*x939)));
evalcond[4]=((((-1.0)*x944))+(((-1.0)*x943))+(((-1.0)*pz))+x939);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x945=((457356.69)*sj2);
IkReal x946=((17677669.5296637)*(pz*pz));
CheckValue<IkReal> x947 = IKatan2WithCheck(IkReal(((-36580.7389931054)+(((-1.0)*x946))+x945)),IkReal(((-36580.7389931054)+(((-1.0)*x946))+(((-1.0)*x945)))),IKFAST_ATAN2_MAGTHRESH);
if(!x947.valid){
continue;
}
CheckValue<IkReal> x948=IKPowWithIntegerCheck(IKsign(pz),-1);
if(!x948.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x947.value)+(((1.5707963267949)*(x948.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x949=IKsin(j1);
IkReal x950=IKcos(j1);
IkReal x951=((0.0742462120245875)*cj2);
IkReal x952=((0.0742462120245875)*sj2);
IkReal x953=((0.08711556)*x949);
IkReal x954=((0.08711556)*x950);
IkReal x955=(pz*x950);
IkReal x956=(pz*x949);
IkReal x957=((0.707106781186548)*x955);
IkReal x958=((0.707106781186548)*x956);
IkReal x959=(x949*x952);
IkReal x960=(x950*x951);
IkReal x961=(x949*x951);
IkReal x962=(x950*x952);
IkReal x963=(x960+x954);
IkReal x964=(x962+x961+x953);
evalcond[0]=((-0.0020693190882272)+(((-0.17423112)*x956))+(((-0.17423112)*x955))+(((-1.0)*(pz*pz))));
evalcond[1]=((((-0.105)*sj2))+(((-1.0)*x957))+x958);
evalcond[2]=((0.123200006445727)+(((0.105)*cj2))+x958+x957);
evalcond[3]=((((-1.0)*x959))+x963+(((-1.0)*x964)));
evalcond[4]=((((-1.0)*pz))+x959+(((-1.0)*x964))+(((-1.0)*x963)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x965=pz*pz;
IkReal x966=((-0.17423112)*pz);
CheckValue<IkReal> x969 = IKatan2WithCheck(IkReal(x966),IkReal(x966),IKFAST_ATAN2_MAGTHRESH);
if(!x969.valid){
continue;
}
IkReal x967=((1.0)*(x969.value));
if((x965) < -0.00001)
continue;
CheckValue<IkReal> x970=IKPowWithIntegerCheck(IKabs(((1.4142135623731)*(IKsqrt(x965)))),-1);
if(!x970.valid){
continue;
}
if( (((-5.73950279376038)*(x970.value)*(((-0.0020693190882272)+(((-1.0)*x965)))))) < -1-IKFAST_SINCOS_THRESH || (((-5.73950279376038)*(x970.value)*(((-0.0020693190882272)+(((-1.0)*x965)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x968=((-1.0)*(IKasin(((-5.73950279376038)*(x970.value)*(((-0.0020693190882272)+(((-1.0)*x965))))))));
j1array[0]=((((-1.0)*x967))+(((-1.0)*x968)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((1.0)*x968))+(((-1.0)*x967)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x971=((6.73435029701474)*pz);
IkReal x972=((6.73435029701474)*pz);
if( IKabs(((((-1.0)*cj1*x971))+((sj1*x972)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.17333339472121)+(((-1.0)*cj1*x972))+(((-1.0)*sj1*x971)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*x971))+((sj1*x972))))+IKsqr(((-1.17333339472121)+(((-1.0)*cj1*x972))+(((-1.0)*sj1*x971))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj1*x971))+((sj1*x972))), ((-1.17333339472121)+(((-1.0)*cj1*x972))+(((-1.0)*sj1*x971))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x973=IKcos(j2);
IkReal x974=IKsin(j2);
IkReal x975=((0.08711556)*cj1);
IkReal x976=((0.08711556)*sj1);
IkReal x977=((0.707106781186548)*pz);
IkReal x978=(sj1*x977);
IkReal x979=(cj1*x977);
IkReal x980=((0.0742462120245875)*x974);
IkReal x981=((0.0742462120245875)*x973);
IkReal x982=(sj1*x980);
IkReal x983=(sj1*x981);
IkReal x984=(cj1*x981);
IkReal x985=(cj1*x980);
IkReal x986=(x984+x975);
IkReal x987=(x985+x983+x976);
evalcond[0]=((((-0.105)*x974))+x978+(((-1.0)*x979)));
evalcond[1]=((0.123200006445727)+(((0.105)*x973))+x979+x978);
evalcond[2]=((0.0282871640882272)+(((0.0258720013536027)*x973))+(((-1.0)*(pz*pz))));
evalcond[3]=((((-1.0)*x982))+(((-1.0)*x987))+x986);
evalcond[4]=((((-1.0)*x986))+(((-1.0)*x987))+(((-1.0)*pz))+x982);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
if( (((-1.09335044095026)+(((38.6518223438771)*(pz*pz)))+(((38.6518223438771)*(py*py)))+(((38.6518223438771)*(px*px))))) < -1-IKFAST_SINCOS_THRESH || (((-1.09335044095026)+(((38.6518223438771)*(pz*pz)))+(((38.6518223438771)*(py*py)))+(((38.6518223438771)*(px*px))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x988=IKasin(((-1.09335044095026)+(((38.6518223438771)*(pz*pz)))+(((38.6518223438771)*(py*py)))+(((38.6518223438771)*(px*px)))));
j2array[0]=((-1.5707963267949)+(((1.0)*x988)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((1.5707963267949)+(((-1.0)*x988)));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal j0eval[2];
j0eval[0]=((px*px)+(py*py));
j0eval[1]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x989=((0.0742462120245875)*sj2);
IkReal x990=((0.0742462120245875)*cj2);
j1eval[0]=((1.376711255168)+(sj2*sj2)+(cj2*cj2)+(((2.22044604925031e-16)*sj2))+(((2.34666678944242)*cj2)));
j1eval[1]=((IKabs(((-0.08711556)+(((-1.0)*x990))+x989)))+(IKabs(((-0.08711556)+(((-1.0)*x989))+(((-1.0)*x990))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((px*px)+(py*py));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
j1eval[0]=((2.0)*pz);
j1eval[1]=IKsign(pz);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
j1eval[0]=((-2.22044604925031e-16)*pz);
j1eval[1]=0;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
IkReal x991=(pz*sj2);
j1eval[0]=((((-2.0)*x991))+(((2.22044604925031e-16)*cj2*pz)));
j1eval[1]=((-1.0)*(IKsign(x991)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
sj2=0;
cj2=1.0;
j2=0;
j1eval[0]=((2.0)*pz);
j1eval[1]=IKsign(pz);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
sj2=0;
cj2=1.0;
j2=0;
j1eval[0]=((1.11022302462516e-16)*pz);
j1eval[1]=((2.22044604925031e-16)*pz);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
sj2=0;
cj2=1.0;
j2=0;
j1eval[0]=2.01280303870185;
j1eval[1]=4.0256060774037;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((-3.09862734975303)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-3.09862734975303)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.09862734975303)*pz))+IKsqr(((-3.09862734975303)*pz))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-3.09862734975303)*pz), ((-3.09862734975303)*pz));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x992=IKcos(j1);
IkReal x993=IKsin(j1);
IkReal x994=((0.161361772024587)*x992);
IkReal x995=((0.161361772024587)*x993);
IkReal x996=(pz*x992);
IkReal x997=(pz*x993);
IkReal x998=((0.707106781186548)*x996);
IkReal x999=((0.707106781186548)*x997);
evalcond[0]=((-0.0020693190882272)+(((-0.17423112)*x996))+(((-0.17423112)*x997))+(((-1.0)*(pz*pz))));
evalcond[1]=((((-1.0)*x995))+x994);
evalcond[2]=((((-1.0)*pz))+(((-1.0)*x994))+(((-1.0)*x995)));
evalcond[3]=((((-1.0)*x998))+x999);
evalcond[4]=((0.228200006445727)+x999+x998);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1000=pz*pz;
CheckValue<IkReal> x1001=IKPowWithIntegerCheck(pz,-1);
if(!x1001.valid){
continue;
}
if( IKabs(((2048.0)*(x1001.value)*(((104346560925.201)+(((-4021671242316.41)*x1000)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-inf)+(((+inf)*x1000)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2048.0)*(x1001.value)*(((104346560925.201)+(((-4021671242316.41)*x1000))))))+IKsqr(((-inf)+(((+inf)*x1000))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((2048.0)*(x1001.value)*(((104346560925.201)+(((-4021671242316.41)*x1000))))), ((-inf)+(((+inf)*x1000))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1002=IKcos(j1);
IkReal x1003=IKsin(j1);
IkReal x1004=((0.161361772024587)*x1002);
IkReal x1005=((0.161361772024587)*x1003);
IkReal x1006=(pz*x1002);
IkReal x1007=(pz*x1003);
IkReal x1008=((0.707106781186548)*x1006);
IkReal x1009=((0.707106781186548)*x1007);
evalcond[0]=((-0.0020693190882272)+(((-0.17423112)*x1006))+(((-0.17423112)*x1007))+(((-1.0)*(pz*pz))));
evalcond[1]=(x1004+(((-1.0)*x1005)));
evalcond[2]=((((-1.0)*x1004))+(((-1.0)*x1005))+(((-1.0)*pz)));
evalcond[3]=(x1009+(((-1.0)*x1008)));
evalcond[4]=((0.228200006445727)+x1009+x1008);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1010=((-36580.7389931054)+(((-17677669.5296637)*(pz*pz))));
CheckValue<IkReal> x1011 = IKatan2WithCheck(IkReal(x1010),IkReal(x1010),IKFAST_ATAN2_MAGTHRESH);
if(!x1011.valid){
continue;
}
CheckValue<IkReal> x1012=IKPowWithIntegerCheck(IKsign(pz),-1);
if(!x1012.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1011.value)+(((1.5707963267949)*(x1012.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1013=IKcos(j1);
IkReal x1014=IKsin(j1);
IkReal x1015=((0.161361772024587)*x1013);
IkReal x1016=((0.161361772024587)*x1014);
IkReal x1017=(pz*x1013);
IkReal x1018=(pz*x1014);
IkReal x1019=((0.707106781186548)*x1017);
IkReal x1020=((0.707106781186548)*x1018);
evalcond[0]=((-0.0020693190882272)+(((-0.17423112)*x1017))+(((-0.17423112)*x1018))+(((-1.0)*(pz*pz))));
evalcond[1]=(x1015+(((-1.0)*x1016)));
evalcond[2]=((((-1.0)*x1016))+(((-1.0)*x1015))+(((-1.0)*pz)));
evalcond[3]=(x1020+(((-1.0)*x1019)));
evalcond[4]=((0.228200006445727)+x1019+x1020);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j1eval[0]=((2.0)*pz);
j1eval[1]=IKsign(pz);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j1eval[0]=((1.11022302462516e-16)*pz);
j1eval[1]=((2.22044604925031e-16)*pz);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j1eval[0]=0.0128030387018507;
j1eval[1]=0.0256060774037013;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((-38.8520071844567)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-38.8520071844567)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-38.8520071844567)*pz))+IKsqr(((-38.8520071844567)*pz))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-38.8520071844567)*pz), ((-38.8520071844567)*pz));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1021=IKcos(j1);
IkReal x1022=IKsin(j1);
IkReal x1023=((0.0128693479754125)*x1021);
IkReal x1024=((0.0128693479754125)*x1022);
IkReal x1025=(pz*x1021);
IkReal x1026=(pz*x1022);
IkReal x1027=((0.707106781186548)*x1025);
IkReal x1028=((0.707106781186548)*x1026);
evalcond[0]=((-0.0020693190882272)+(((-0.17423112)*x1025))+(((-0.17423112)*x1026))+(((-1.0)*(pz*pz))));
evalcond[1]=(x1023+(((-1.0)*x1024)));
evalcond[2]=((((-1.0)*x1024))+(((-1.0)*x1023))+(((-1.0)*pz)));
evalcond[3]=(x1028+(((-1.0)*x1027)));
evalcond[4]=((0.0182000064457271)+x1027+x1028);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1029=pz*pz;
CheckValue<IkReal> x1030=IKPowWithIntegerCheck(pz,-1);
if(!x1030.valid){
continue;
}
if( IKabs(((2048.0)*(x1030.value)*(((-8322121068.29974)+(((50425553757683.6)*x1029)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((+inf)+(((-inf)*x1029)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2048.0)*(x1030.value)*(((-8322121068.29974)+(((50425553757683.6)*x1029))))))+IKsqr(((+inf)+(((-inf)*x1029))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((2048.0)*(x1030.value)*(((-8322121068.29974)+(((50425553757683.6)*x1029))))), ((+inf)+(((-inf)*x1029))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1031=IKcos(j1);
IkReal x1032=IKsin(j1);
IkReal x1033=((0.0128693479754125)*x1031);
IkReal x1034=((0.0128693479754125)*x1032);
IkReal x1035=(pz*x1031);
IkReal x1036=(pz*x1032);
IkReal x1037=((0.707106781186548)*x1035);
IkReal x1038=((0.707106781186548)*x1036);
evalcond[0]=((-0.0020693190882272)+(((-0.17423112)*x1036))+(((-0.17423112)*x1035))+(((-1.0)*(pz*pz))));
evalcond[1]=((((-1.0)*x1034))+x1033);
evalcond[2]=((((-1.0)*x1033))+(((-1.0)*x1034))+(((-1.0)*pz)));
evalcond[3]=((((-1.0)*x1037))+x1038);
evalcond[4]=((0.0182000064457271)+x1038+x1037);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1039=((-36580.7389931054)+(((-17677669.5296637)*(pz*pz))));
CheckValue<IkReal> x1040 = IKatan2WithCheck(IkReal(x1039),IkReal(x1039),IKFAST_ATAN2_MAGTHRESH);
if(!x1040.valid){
continue;
}
CheckValue<IkReal> x1041=IKPowWithIntegerCheck(IKsign(pz),-1);
if(!x1041.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1040.value)+(((1.5707963267949)*(x1041.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1042=IKcos(j1);
IkReal x1043=IKsin(j1);
IkReal x1044=((0.0128693479754125)*x1042);
IkReal x1045=((0.0128693479754125)*x1043);
IkReal x1046=(pz*x1042);
IkReal x1047=(pz*x1043);
IkReal x1048=((0.707106781186548)*x1046);
IkReal x1049=((0.707106781186548)*x1047);
evalcond[0]=((-0.0020693190882272)+(((-0.17423112)*x1046))+(((-0.17423112)*x1047))+(((-1.0)*(pz*pz))));
evalcond[1]=(x1044+(((-1.0)*x1045)));
evalcond[2]=((((-1.0)*pz))+(((-1.0)*x1044))+(((-1.0)*x1045)));
evalcond[3]=(x1049+(((-1.0)*x1048)));
evalcond[4]=((0.0182000064457271)+x1049+x1048);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1050=pz*pz;
IkReal x1051=((1088944.5)*x1050);
IkReal x1052=((928077.650307344)*x1050);
IkReal x1053=(sj2*x1052);
IkReal x1054=(cj2*x1052);
CheckValue<IkReal> x1055=IKPowWithIntegerCheck(IKsign((pz*sj2)),-1);
if(!x1055.valid){
continue;
}
CheckValue<IkReal> x1056 = IKatan2WithCheck(IkReal(((2253.37363987002)+(((-1.0)*x1051))+x1053+x1054+(((1920.48879713803)*cj2))+(((1920.48879713803)*sj2)))),IkReal(((-2253.37363987002)+(((-1.0)*x1054))+x1051+x1053+(((-1920.48879713803)*cj2))+(((1920.48879713803)*sj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1056.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((-1.5707963267949)*(x1055.value)))+(x1056.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1057=IKsin(j1);
IkReal x1058=IKcos(j1);
IkReal x1059=((0.0742462120245875)*cj2);
IkReal x1060=((0.0742462120245875)*sj2);
IkReal x1061=((0.08711556)*x1057);
IkReal x1062=((0.08711556)*x1058);
IkReal x1063=(pz*x1058);
IkReal x1064=(pz*x1057);
IkReal x1065=((0.707106781186548)*x1063);
IkReal x1066=((0.707106781186548)*x1064);
IkReal x1067=(x1057*x1060);
IkReal x1068=(x1058*x1059);
IkReal x1069=(x1057*x1059);
IkReal x1070=(x1058*x1060);
IkReal x1071=(x1068+x1062);
IkReal x1072=(x1070+x1069+x1061);
evalcond[0]=((-0.0020693190882272)+(((-0.17423112)*x1063))+(((-0.17423112)*x1064))+(((-1.0)*(pz*pz))));
evalcond[1]=(x1066+(((-0.105)*sj2))+(((-1.0)*x1065)));
evalcond[2]=((0.123200006445727)+(((0.105)*cj2))+x1065+x1066);
evalcond[3]=(x1071+(((-1.0)*x1067))+(((-1.0)*x1072)));
evalcond[4]=(x1067+(((-1.0)*pz))+(((-1.0)*x1072))+(((-1.0)*x1071)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1073=((457356.69)*cj2);
IkReal x1074=((17677669.5296637)*(pz*pz));
CheckValue<IkReal> x1075 = IKatan2WithCheck(IkReal(((500051.138683051)+x1073+(((-1.0)*x1074)))),IkReal(((-500051.138683051)+x1074+(((-1.0)*x1073)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1075.valid){
continue;
}
j1array[0]=((+inf)+(x1075.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1076=IKsin(j1);
IkReal x1077=IKcos(j1);
IkReal x1078=((0.0742462120245875)*cj2);
IkReal x1079=((0.0742462120245875)*sj2);
IkReal x1080=((0.08711556)*x1076);
IkReal x1081=((0.08711556)*x1077);
IkReal x1082=(pz*x1077);
IkReal x1083=(pz*x1076);
IkReal x1084=((0.707106781186548)*x1082);
IkReal x1085=((0.707106781186548)*x1083);
IkReal x1086=(x1076*x1079);
IkReal x1087=(x1077*x1078);
IkReal x1088=(x1076*x1078);
IkReal x1089=(x1077*x1079);
IkReal x1090=(x1087+x1081);
IkReal x1091=(x1080+x1089+x1088);
evalcond[0]=((-0.0020693190882272)+(((-1.0)*(pz*pz)))+(((-0.17423112)*x1082))+(((-0.17423112)*x1083)));
evalcond[1]=(x1085+(((-0.105)*sj2))+(((-1.0)*x1084)));
evalcond[2]=((0.123200006445727)+(((0.105)*cj2))+x1085+x1084);
evalcond[3]=(x1090+(((-1.0)*x1091))+(((-1.0)*x1086)));
evalcond[4]=(x1086+(((-1.0)*x1091))+(((-1.0)*x1090))+(((-1.0)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1092=((457356.69)*sj2);
IkReal x1093=((17677669.5296637)*(pz*pz));
CheckValue<IkReal> x1094 = IKatan2WithCheck(IkReal(((-36580.7389931054)+x1092+(((-1.0)*x1093)))),IkReal(((-36580.7389931054)+(((-1.0)*x1093))+(((-1.0)*x1092)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1094.valid){
continue;
}
CheckValue<IkReal> x1095=IKPowWithIntegerCheck(IKsign(pz),-1);
if(!x1095.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1094.value)+(((1.5707963267949)*(x1095.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1096=IKsin(j1);
IkReal x1097=IKcos(j1);
IkReal x1098=((0.0742462120245875)*cj2);
IkReal x1099=((0.0742462120245875)*sj2);
IkReal x1100=((0.08711556)*x1096);
IkReal x1101=((0.08711556)*x1097);
IkReal x1102=(pz*x1097);
IkReal x1103=(pz*x1096);
IkReal x1104=((0.707106781186548)*x1102);
IkReal x1105=((0.707106781186548)*x1103);
IkReal x1106=(x1096*x1099);
IkReal x1107=(x1097*x1098);
IkReal x1108=(x1096*x1098);
IkReal x1109=(x1097*x1099);
IkReal x1110=(x1107+x1101);
IkReal x1111=(x1100+x1108+x1109);
evalcond[0]=((-0.0020693190882272)+(((-0.17423112)*x1103))+(((-0.17423112)*x1102))+(((-1.0)*(pz*pz))));
evalcond[1]=(x1105+(((-0.105)*sj2))+(((-1.0)*x1104)));
evalcond[2]=((0.123200006445727)+(((0.105)*cj2))+x1104+x1105);
evalcond[3]=(x1110+(((-1.0)*x1106))+(((-1.0)*x1111)));
evalcond[4]=(x1106+(((-1.0)*pz))+(((-1.0)*x1110))+(((-1.0)*x1111)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
j1eval[0]=((2.0)*pz);
j1eval[1]=IKsign(pz);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
j1eval[0]=((-2.22044604925031e-16)*pz);
j1eval[1]=0;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
IkReal x1112=(pz*sj2);
j1eval[0]=((((-2.0)*x1112))+(((2.22044604925031e-16)*cj2*pz)));
j1eval[1]=((-1.0)*(IKsign(x1112)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
sj2=0;
cj2=1.0;
j2=0;
j1eval[0]=((2.0)*pz);
j1eval[1]=IKsign(pz);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
sj2=0;
cj2=1.0;
j2=0;
j1eval[0]=((1.11022302462516e-16)*pz);
j1eval[1]=((2.22044604925031e-16)*pz);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
sj2=0;
cj2=1.0;
j2=0;
j1eval[0]=2.01280303870185;
j1eval[1]=4.0256060774037;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
j1array[0]=2.35619449019234;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=5.49778714378214;
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
evalcond[0]=((((0.161361772024587)*(IKcos(j1))))+(((-0.161361772024587)*(IKsin(j1)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((-3.09862734975303)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-3.09862734975303)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.09862734975303)*pz))+IKsqr(((-3.09862734975303)*pz))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-3.09862734975303)*pz), ((-3.09862734975303)*pz));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1113=IKcos(j1);
IkReal x1114=IKsin(j1);
IkReal x1115=((0.161361772024587)*x1113);
IkReal x1116=((0.161361772024587)*x1114);
IkReal x1117=(pz*x1113);
IkReal x1118=(pz*x1114);
IkReal x1119=((0.707106781186548)*x1117);
IkReal x1120=((0.707106781186548)*x1118);
evalcond[0]=((-0.0020693190882272)+(((-0.17423112)*x1117))+(((-0.17423112)*x1118))+(((-1.0)*(pz*pz))));
evalcond[1]=(x1115+(((-1.0)*x1116)));
evalcond[2]=((((-1.0)*pz))+(((-1.0)*x1116))+(((-1.0)*x1115)));
evalcond[3]=(x1120+(((-1.0)*x1119)));
evalcond[4]=((0.228200006445727)+x1119+x1120);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1121=pz*pz;
CheckValue<IkReal> x1122=IKPowWithIntegerCheck(pz,-1);
if(!x1122.valid){
continue;
}
if( IKabs(((2048.0)*(x1122.value)*(((104346560925.201)+(((-4021671242316.41)*x1121)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-inf)+(((+inf)*x1121)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2048.0)*(x1122.value)*(((104346560925.201)+(((-4021671242316.41)*x1121))))))+IKsqr(((-inf)+(((+inf)*x1121))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((2048.0)*(x1122.value)*(((104346560925.201)+(((-4021671242316.41)*x1121))))), ((-inf)+(((+inf)*x1121))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1123=IKcos(j1);
IkReal x1124=IKsin(j1);
IkReal x1125=((0.161361772024587)*x1123);
IkReal x1126=((0.161361772024587)*x1124);
IkReal x1127=(pz*x1123);
IkReal x1128=(pz*x1124);
IkReal x1129=((0.707106781186548)*x1127);
IkReal x1130=((0.707106781186548)*x1128);
evalcond[0]=((-0.0020693190882272)+(((-0.17423112)*x1127))+(((-0.17423112)*x1128))+(((-1.0)*(pz*pz))));
evalcond[1]=(x1125+(((-1.0)*x1126)));
evalcond[2]=((((-1.0)*pz))+(((-1.0)*x1126))+(((-1.0)*x1125)));
evalcond[3]=(x1130+(((-1.0)*x1129)));
evalcond[4]=((0.228200006445727)+x1129+x1130);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1131=((-36580.7389931054)+(((-17677669.5296637)*(pz*pz))));
CheckValue<IkReal> x1132 = IKatan2WithCheck(IkReal(x1131),IkReal(x1131),IKFAST_ATAN2_MAGTHRESH);
if(!x1132.valid){
continue;
}
CheckValue<IkReal> x1133=IKPowWithIntegerCheck(IKsign(pz),-1);
if(!x1133.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1132.value)+(((1.5707963267949)*(x1133.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1134=IKcos(j1);
IkReal x1135=IKsin(j1);
IkReal x1136=((0.161361772024587)*x1134);
IkReal x1137=((0.161361772024587)*x1135);
IkReal x1138=(pz*x1134);
IkReal x1139=(pz*x1135);
IkReal x1140=((0.707106781186548)*x1138);
IkReal x1141=((0.707106781186548)*x1139);
evalcond[0]=((-0.0020693190882272)+(((-1.0)*(pz*pz)))+(((-0.17423112)*x1138))+(((-0.17423112)*x1139)));
evalcond[1]=(x1136+(((-1.0)*x1137)));
evalcond[2]=((((-1.0)*pz))+(((-1.0)*x1136))+(((-1.0)*x1137)));
evalcond[3]=(x1141+(((-1.0)*x1140)));
evalcond[4]=((0.228200006445727)+x1140+x1141);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j1eval[0]=((2.0)*pz);
j1eval[1]=IKsign(pz);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j1eval[0]=((1.11022302462516e-16)*pz);
j1eval[1]=((2.22044604925031e-16)*pz);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j1eval[0]=0.0128030387018507;
j1eval[1]=0.0256060774037013;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
j1array[0]=2.35619449019234;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=5.49778714378214;
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
evalcond[0]=((((-0.0128693479754125)*(IKsin(j1))))+(((0.0128693479754125)*(IKcos(j1)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((-38.8520071844567)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-38.8520071844567)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-38.8520071844567)*pz))+IKsqr(((-38.8520071844567)*pz))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-38.8520071844567)*pz), ((-38.8520071844567)*pz));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1142=IKcos(j1);
IkReal x1143=IKsin(j1);
IkReal x1144=((0.0128693479754125)*x1142);
IkReal x1145=((0.0128693479754125)*x1143);
IkReal x1146=(pz*x1142);
IkReal x1147=(pz*x1143);
IkReal x1148=((0.707106781186548)*x1146);
IkReal x1149=((0.707106781186548)*x1147);
evalcond[0]=((-0.0020693190882272)+(((-0.17423112)*x1146))+(((-0.17423112)*x1147))+(((-1.0)*(pz*pz))));
evalcond[1]=(x1144+(((-1.0)*x1145)));
evalcond[2]=((((-1.0)*x1145))+(((-1.0)*x1144))+(((-1.0)*pz)));
evalcond[3]=(x1149+(((-1.0)*x1148)));
evalcond[4]=((0.0182000064457271)+x1148+x1149);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1150=pz*pz;
CheckValue<IkReal> x1151=IKPowWithIntegerCheck(pz,-1);
if(!x1151.valid){
continue;
}
if( IKabs(((2048.0)*(x1151.value)*(((-8322121068.29974)+(((50425553757683.6)*x1150)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((+inf)+(((-inf)*x1150)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2048.0)*(x1151.value)*(((-8322121068.29974)+(((50425553757683.6)*x1150))))))+IKsqr(((+inf)+(((-inf)*x1150))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((2048.0)*(x1151.value)*(((-8322121068.29974)+(((50425553757683.6)*x1150))))), ((+inf)+(((-inf)*x1150))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1152=IKcos(j1);
IkReal x1153=IKsin(j1);
IkReal x1154=((0.0128693479754125)*x1152);
IkReal x1155=((0.0128693479754125)*x1153);
IkReal x1156=(pz*x1152);
IkReal x1157=(pz*x1153);
IkReal x1158=((0.707106781186548)*x1156);
IkReal x1159=((0.707106781186548)*x1157);
evalcond[0]=((-0.0020693190882272)+(((-0.17423112)*x1156))+(((-0.17423112)*x1157))+(((-1.0)*(pz*pz))));
evalcond[1]=(x1154+(((-1.0)*x1155)));
evalcond[2]=((((-1.0)*x1154))+(((-1.0)*x1155))+(((-1.0)*pz)));
evalcond[3]=(x1159+(((-1.0)*x1158)));
evalcond[4]=((0.0182000064457271)+x1159+x1158);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1160=((-36580.7389931054)+(((-17677669.5296637)*(pz*pz))));
CheckValue<IkReal> x1161 = IKatan2WithCheck(IkReal(x1160),IkReal(x1160),IKFAST_ATAN2_MAGTHRESH);
if(!x1161.valid){
continue;
}
CheckValue<IkReal> x1162=IKPowWithIntegerCheck(IKsign(pz),-1);
if(!x1162.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1161.value)+(((1.5707963267949)*(x1162.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1163=IKcos(j1);
IkReal x1164=IKsin(j1);
IkReal x1165=((0.0128693479754125)*x1163);
IkReal x1166=((0.0128693479754125)*x1164);
IkReal x1167=(pz*x1163);
IkReal x1168=(pz*x1164);
IkReal x1169=((0.707106781186548)*x1167);
IkReal x1170=((0.707106781186548)*x1168);
evalcond[0]=((-0.0020693190882272)+(((-1.0)*(pz*pz)))+(((-0.17423112)*x1167))+(((-0.17423112)*x1168)));
evalcond[1]=(x1165+(((-1.0)*x1166)));
evalcond[2]=((((-1.0)*pz))+(((-1.0)*x1166))+(((-1.0)*x1165)));
evalcond[3]=(x1170+(((-1.0)*x1169)));
evalcond[4]=((0.0182000064457271)+x1169+x1170);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1173 = ((4.0)*(pz*pz));
if(IKabs(x1173)==0){
continue;
}
IkReal x1171=pow(x1173,-0.5);
IkReal x1172=(pz*x1171);
CheckValue<IkReal> x1174 = IKatan2WithCheck(IkReal(((2.22044604925031e-16)*pz)),IkReal(((-2.0)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x1174.valid){
continue;
}
IkReal gconst12=((-1.0)*(x1174.value));
IkReal gconst13=((1.67134765854379e-125)*x1172);
IkReal gconst14=((-2.0)*x1172);
CheckValue<IkReal> x1175 = IKatan2WithCheck(IkReal(((2.22044604925031e-16)*pz)),IkReal(((-2.0)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x1175.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1175.value)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
IkReal x1176=pz*pz;
IkReal x1177=x1171;
IkReal x1178=(pz*x1177);
px=0;
py=0;
pp=x1176;
sj2=gconst13;
cj2=gconst14;
CheckValue<IkReal> x1179 = IKatan2WithCheck(IkReal(((7.5881722561605e-9)*pz)),IkReal(((-2.00000000758817)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x1179.valid){
continue;
}
j2=((-1.0)*(x1179.value));
CheckValue<IkReal> x1180 = IKatan2WithCheck(IkReal(((2.22044604925031e-16)*pz)),IkReal(((-2.0)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x1180.valid){
continue;
}
IkReal gconst12=((-1.0)*(x1180.value));
IkReal gconst13=((1.67134765854379e-125)*x1178);
IkReal gconst14=((-2.0)*x1178);
j1eval[0]=((2.0)*pz);
j1eval[1]=IKsign(pz);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x1181=pz*pz;
IkReal x1182=x1171;
IkReal x1183=(pz*x1182);
px=0;
py=0;
pp=x1181;
sj2=gconst13;
cj2=gconst14;
CheckValue<IkReal> x1184 = IKatan2WithCheck(IkReal(((7.5881722561605e-9)*pz)),IkReal(((-2.00000000758817)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x1184.valid){
continue;
}
j2=((-1.0)*(x1184.value));
CheckValue<IkReal> x1185 = IKatan2WithCheck(IkReal(((2.22044604925031e-16)*pz)),IkReal(((-2.0)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x1185.valid){
continue;
}
IkReal gconst12=((-1.0)*(x1185.value));
IkReal gconst13=((1.67134765854379e-125)*x1183);
IkReal gconst14=((-2.0)*x1183);
j1eval[0]=((-2.22044604925031e-16)*pz);
j1eval[1]=0;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1186=pz*pz;
IkReal x1187=((1088944.5)*x1186);
IkReal x1188=((928077.650307344)*x1186);
IkReal x1189=(gconst13*x1188);
IkReal x1190=(gconst14*x1188);
CheckValue<IkReal> x1191 = IKatan2WithCheck(IkReal(((2253.37363987002)+x1189+x1190+(((1920.48879713803)*gconst13))+(((1920.48879713803)*gconst14))+(((-1.0)*x1187)))),IkReal(((-2253.37363987002)+x1189+x1187+(((1920.48879713803)*gconst13))+(((-1.0)*x1190))+(((-1920.48879713803)*gconst14)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1191.valid){
continue;
}
CheckValue<IkReal> x1192=IKPowWithIntegerCheck(IKsign((gconst13*pz)),-1);
if(!x1192.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1191.value)+(((-1.5707963267949)*(x1192.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1193=IKsin(j1);
IkReal x1194=IKcos(j1);
IkReal x1195=((0.08711556)*x1193);
IkReal x1196=((0.08711556)*x1194);
IkReal x1197=(pz*x1194);
IkReal x1198=((0.0742462120245875)*x1193);
IkReal x1199=(pz*x1193);
IkReal x1200=((0.0742462120245875)*x1194);
IkReal x1201=((0.707106781186548)*x1197);
IkReal x1202=((0.707106781186548)*x1199);
IkReal x1203=(gconst13*x1198);
IkReal x1204=(gconst14*x1198);
IkReal x1205=(gconst13*x1200);
IkReal x1206=(gconst14*x1200);
IkReal x1207=(x1196+x1206);
IkReal x1208=(x1195+x1205+x1204);
evalcond[0]=((-0.0020693190882272)+(((-1.0)*(pz*pz)))+(((-0.17423112)*x1197))+(((-0.17423112)*x1199)));
evalcond[1]=(x1202+(((-1.0)*x1201))+(((-0.105)*gconst13)));
evalcond[2]=((0.123200006445727)+x1201+x1202+(((0.105)*gconst14)));
evalcond[3]=(x1207+(((-1.0)*x1208))+(((-1.0)*x1203)));
evalcond[4]=(x1203+(((-1.0)*pz))+(((-1.0)*x1208))+(((-1.0)*x1207)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1209=((457356.69)*gconst14);
IkReal x1210=((17677669.5296637)*(pz*pz));
CheckValue<IkReal> x1211 = IKatan2WithCheck(IkReal(((500051.138683051)+x1209+(((-1.0)*x1210)))),IkReal(((-500051.138683051)+x1210+(((-1.0)*x1209)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1211.valid){
continue;
}
j1array[0]=((+inf)+(x1211.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1212=IKsin(j1);
IkReal x1213=IKcos(j1);
IkReal x1214=((0.08711556)*x1212);
IkReal x1215=((0.08711556)*x1213);
IkReal x1216=(pz*x1213);
IkReal x1217=((0.0742462120245875)*x1212);
IkReal x1218=(pz*x1212);
IkReal x1219=((0.0742462120245875)*x1213);
IkReal x1220=((0.707106781186548)*x1216);
IkReal x1221=((0.707106781186548)*x1218);
IkReal x1222=(gconst13*x1217);
IkReal x1223=(gconst14*x1217);
IkReal x1224=(gconst13*x1219);
IkReal x1225=(gconst14*x1219);
IkReal x1226=(x1225+x1215);
IkReal x1227=(x1224+x1223+x1214);
evalcond[0]=((-0.0020693190882272)+(((-1.0)*(pz*pz)))+(((-0.17423112)*x1218))+(((-0.17423112)*x1216)));
evalcond[1]=(x1221+(((-1.0)*x1220))+(((-0.105)*gconst13)));
evalcond[2]=((0.123200006445727)+x1221+x1220+(((0.105)*gconst14)));
evalcond[3]=(x1226+(((-1.0)*x1227))+(((-1.0)*x1222)));
evalcond[4]=(x1222+(((-1.0)*x1226))+(((-1.0)*x1227))+(((-1.0)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1228=((457356.69)*gconst13);
IkReal x1229=((17677669.5296637)*(pz*pz));
CheckValue<IkReal> x1230 = IKatan2WithCheck(IkReal(((-36580.7389931054)+x1228+(((-1.0)*x1229)))),IkReal(((-36580.7389931054)+(((-1.0)*x1228))+(((-1.0)*x1229)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1230.valid){
continue;
}
CheckValue<IkReal> x1231=IKPowWithIntegerCheck(IKsign(pz),-1);
if(!x1231.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1230.value)+(((1.5707963267949)*(x1231.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1232=IKsin(j1);
IkReal x1233=IKcos(j1);
IkReal x1234=((0.08711556)*x1232);
IkReal x1235=((0.08711556)*x1233);
IkReal x1236=(pz*x1233);
IkReal x1237=((0.0742462120245875)*x1232);
IkReal x1238=(pz*x1232);
IkReal x1239=((0.0742462120245875)*x1233);
IkReal x1240=((0.707106781186548)*x1236);
IkReal x1241=((0.707106781186548)*x1238);
IkReal x1242=(gconst13*x1237);
IkReal x1243=(gconst14*x1237);
IkReal x1244=(gconst13*x1239);
IkReal x1245=(gconst14*x1239);
IkReal x1246=(x1245+x1235);
IkReal x1247=(x1243+x1244+x1234);
evalcond[0]=((-0.0020693190882272)+(((-0.17423112)*x1236))+(((-0.17423112)*x1238))+(((-1.0)*(pz*pz))));
evalcond[1]=(x1241+(((-1.0)*x1240))+(((-0.105)*gconst13)));
evalcond[2]=((0.123200006445727)+x1241+x1240+(((0.105)*gconst14)));
evalcond[3]=(x1246+(((-1.0)*x1242))+(((-1.0)*x1247)));
evalcond[4]=(x1242+(((-1.0)*x1246))+(((-1.0)*x1247))+(((-1.0)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1250 = ((4.0)*(pz*pz));
if(IKabs(x1250)==0){
continue;
}
IkReal x1248=pow(x1250,-0.5);
IkReal x1249=(pz*x1248);
CheckValue<IkReal> x1251 = IKatan2WithCheck(IkReal(((2.22044604925031e-16)*pz)),IkReal(((-2.0)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x1251.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x1251.value))));
IkReal gconst16=((-1.67134765854379e-125)*x1249);
IkReal gconst17=((2.0)*x1249);
CheckValue<IkReal> x1252 = IKatan2WithCheck(IkReal(((2.22044604925031e-16)*pz)),IkReal(((-2.0)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x1252.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1252.value)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
IkReal x1253=pz*pz;
IkReal x1254=x1248;
IkReal x1255=(pz*x1254);
px=0;
py=0;
pp=x1253;
sj2=gconst16;
cj2=gconst17;
CheckValue<IkReal> x1256 = IKatan2WithCheck(IkReal(((7.5881722561605e-9)*pz)),IkReal(((-2.00000000758817)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x1256.valid){
continue;
}
j2=((3.14159265)+(((-1.0)*(x1256.value))));
CheckValue<IkReal> x1257 = IKatan2WithCheck(IkReal(((2.22044604925031e-16)*pz)),IkReal(((-2.0)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x1257.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x1257.value))));
IkReal gconst16=((-1.67134765854379e-125)*x1255);
IkReal gconst17=((2.0)*x1255);
j1eval[0]=((2.0)*pz);
j1eval[1]=IKsign(pz);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x1258=pz*pz;
IkReal x1259=x1248;
IkReal x1260=(pz*x1259);
px=0;
py=0;
pp=x1258;
sj2=gconst16;
cj2=gconst17;
CheckValue<IkReal> x1261 = IKatan2WithCheck(IkReal(((7.5881722561605e-9)*pz)),IkReal(((-2.00000000758817)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x1261.valid){
continue;
}
j2=((3.14159265)+(((-1.0)*(x1261.value))));
CheckValue<IkReal> x1262 = IKatan2WithCheck(IkReal(((2.22044604925031e-16)*pz)),IkReal(((-2.0)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x1262.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x1262.value))));
IkReal gconst16=((-1.67134765854379e-125)*x1260);
IkReal gconst17=((2.0)*x1260);
j1eval[0]=((-2.22044604925031e-16)*pz);
j1eval[1]=0;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1263=pz*pz;
IkReal x1264=((1088944.5)*x1263);
IkReal x1265=((928077.650307344)*x1263);
IkReal x1266=(gconst16*x1265);
IkReal x1267=(gconst17*x1265);
CheckValue<IkReal> x1268=IKPowWithIntegerCheck(IKsign((gconst16*pz)),-1);
if(!x1268.valid){
continue;
}
CheckValue<IkReal> x1269 = IKatan2WithCheck(IkReal(((2253.37363987002)+x1267+x1266+(((1920.48879713803)*gconst16))+(((1920.48879713803)*gconst17))+(((-1.0)*x1264)))),IkReal(((-2253.37363987002)+x1266+x1264+(((1920.48879713803)*gconst16))+(((-1920.48879713803)*gconst17))+(((-1.0)*x1267)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1269.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((-1.5707963267949)*(x1268.value)))+(x1269.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1270=IKsin(j1);
IkReal x1271=IKcos(j1);
IkReal x1272=((0.0742462120245875)*gconst17);
IkReal x1273=((0.0742462120245875)*gconst16);
IkReal x1274=((0.08711556)*x1270);
IkReal x1275=((0.08711556)*x1271);
IkReal x1276=(pz*x1271);
IkReal x1277=(pz*x1270);
IkReal x1278=((0.707106781186548)*x1276);
IkReal x1279=((0.707106781186548)*x1277);
IkReal x1280=(x1270*x1273);
IkReal x1281=(x1271*x1272);
IkReal x1282=(x1271*x1273);
IkReal x1283=(x1270*x1272);
IkReal x1284=(x1275+x1281);
IkReal x1285=(x1274+x1283+x1282);
evalcond[0]=((-0.0020693190882272)+(((-0.17423112)*x1277))+(((-0.17423112)*x1276))+(((-1.0)*(pz*pz))));
evalcond[1]=(x1279+(((-1.0)*x1278))+(((-0.105)*gconst16)));
evalcond[2]=((0.123200006445727)+x1278+x1279+(((0.105)*gconst17)));
evalcond[3]=(x1284+(((-1.0)*x1280))+(((-1.0)*x1285)));
evalcond[4]=(x1280+(((-1.0)*pz))+(((-1.0)*x1284))+(((-1.0)*x1285)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1286=((457356.69)*gconst17);
IkReal x1287=((17677669.5296637)*(pz*pz));
CheckValue<IkReal> x1288 = IKatan2WithCheck(IkReal(((500051.138683051)+x1286+(((-1.0)*x1287)))),IkReal(((-500051.138683051)+x1287+(((-1.0)*x1286)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1288.valid){
continue;
}
j1array[0]=((+inf)+(x1288.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1289=IKsin(j1);
IkReal x1290=IKcos(j1);
IkReal x1291=((0.0742462120245875)*gconst17);
IkReal x1292=((0.0742462120245875)*gconst16);
IkReal x1293=((0.08711556)*x1289);
IkReal x1294=((0.08711556)*x1290);
IkReal x1295=(pz*x1290);
IkReal x1296=(pz*x1289);
IkReal x1297=((0.707106781186548)*x1295);
IkReal x1298=((0.707106781186548)*x1296);
IkReal x1299=(x1289*x1292);
IkReal x1300=(x1290*x1291);
IkReal x1301=(x1290*x1292);
IkReal x1302=(x1289*x1291);
IkReal x1303=(x1300+x1294);
IkReal x1304=(x1301+x1302+x1293);
evalcond[0]=((-0.0020693190882272)+(((-0.17423112)*x1295))+(((-0.17423112)*x1296))+(((-1.0)*(pz*pz))));
evalcond[1]=(x1298+(((-1.0)*x1297))+(((-0.105)*gconst16)));
evalcond[2]=((0.123200006445727)+x1298+x1297+(((0.105)*gconst17)));
evalcond[3]=(x1303+(((-1.0)*x1299))+(((-1.0)*x1304)));
evalcond[4]=(x1299+(((-1.0)*x1304))+(((-1.0)*x1303))+(((-1.0)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1305=((457356.69)*gconst16);
IkReal x1306=((17677669.5296637)*(pz*pz));
CheckValue<IkReal> x1307 = IKatan2WithCheck(IkReal(((-36580.7389931054)+x1305+(((-1.0)*x1306)))),IkReal(((-36580.7389931054)+(((-1.0)*x1306))+(((-1.0)*x1305)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1307.valid){
continue;
}
CheckValue<IkReal> x1308=IKPowWithIntegerCheck(IKsign(pz),-1);
if(!x1308.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1307.value)+(((1.5707963267949)*(x1308.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1309=IKsin(j1);
IkReal x1310=IKcos(j1);
IkReal x1311=((0.0742462120245875)*gconst17);
IkReal x1312=((0.0742462120245875)*gconst16);
IkReal x1313=((0.08711556)*x1309);
IkReal x1314=((0.08711556)*x1310);
IkReal x1315=(pz*x1310);
IkReal x1316=(pz*x1309);
IkReal x1317=((0.707106781186548)*x1315);
IkReal x1318=((0.707106781186548)*x1316);
IkReal x1319=(x1309*x1312);
IkReal x1320=(x1310*x1311);
IkReal x1321=(x1310*x1312);
IkReal x1322=(x1309*x1311);
IkReal x1323=(x1314+x1320);
IkReal x1324=(x1313+x1322+x1321);
evalcond[0]=((-0.0020693190882272)+(((-0.17423112)*x1315))+(((-0.17423112)*x1316))+(((-1.0)*(pz*pz))));
evalcond[1]=(x1318+(((-1.0)*x1317))+(((-0.105)*gconst16)));
evalcond[2]=((0.123200006445727)+x1317+x1318+(((0.105)*gconst17)));
evalcond[3]=(x1323+(((-1.0)*x1324))+(((-1.0)*x1319)));
evalcond[4]=(x1319+(((-1.0)*x1324))+(((-1.0)*x1323))+(((-1.0)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1325=pz*pz;
IkReal x1326=((1088944.5)*x1325);
IkReal x1327=((928077.650307344)*x1325);
IkReal x1328=(sj2*x1327);
IkReal x1329=(cj2*x1327);
CheckValue<IkReal> x1330=IKPowWithIntegerCheck(IKsign((pz*sj2)),-1);
if(!x1330.valid){
continue;
}
CheckValue<IkReal> x1331 = IKatan2WithCheck(IkReal(((2253.37363987002)+x1328+x1329+(((1920.48879713803)*cj2))+(((-1.0)*x1326))+(((1920.48879713803)*sj2)))),IkReal(((-2253.37363987002)+x1326+x1328+(((-1920.48879713803)*cj2))+(((1920.48879713803)*sj2))+(((-1.0)*x1329)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1331.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((-1.5707963267949)*(x1330.value)))+(x1331.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1332=IKsin(j1);
IkReal x1333=IKcos(j1);
IkReal x1334=((0.0742462120245875)*cj2);
IkReal x1335=((0.0742462120245875)*sj2);
IkReal x1336=((0.08711556)*x1332);
IkReal x1337=((0.08711556)*x1333);
IkReal x1338=(pz*x1333);
IkReal x1339=(pz*x1332);
IkReal x1340=((0.707106781186548)*x1338);
IkReal x1341=((0.707106781186548)*x1339);
IkReal x1342=(x1332*x1335);
IkReal x1343=(x1333*x1334);
IkReal x1344=(x1332*x1334);
IkReal x1345=(x1333*x1335);
IkReal x1346=(x1343+x1337);
IkReal x1347=(x1344+x1345+x1336);
evalcond[0]=((-0.0020693190882272)+(((-0.17423112)*x1338))+(((-0.17423112)*x1339))+(((-1.0)*(pz*pz))));
evalcond[1]=(x1341+(((-1.0)*x1340))+(((-0.105)*sj2)));
evalcond[2]=((0.123200006445727)+(((0.105)*cj2))+x1340+x1341);
evalcond[3]=(x1346+(((-1.0)*x1342))+(((-1.0)*x1347)));
evalcond[4]=(x1342+(((-1.0)*x1347))+(((-1.0)*x1346))+(((-1.0)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1348=((457356.69)*cj2);
IkReal x1349=((17677669.5296637)*(pz*pz));
CheckValue<IkReal> x1350 = IKatan2WithCheck(IkReal(((500051.138683051)+x1348+(((-1.0)*x1349)))),IkReal(((-500051.138683051)+x1349+(((-1.0)*x1348)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1350.valid){
continue;
}
j1array[0]=((+inf)+(x1350.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1351=IKsin(j1);
IkReal x1352=IKcos(j1);
IkReal x1353=((0.0742462120245875)*cj2);
IkReal x1354=((0.0742462120245875)*sj2);
IkReal x1355=((0.08711556)*x1351);
IkReal x1356=((0.08711556)*x1352);
IkReal x1357=(pz*x1352);
IkReal x1358=(pz*x1351);
IkReal x1359=((0.707106781186548)*x1357);
IkReal x1360=((0.707106781186548)*x1358);
IkReal x1361=(x1351*x1354);
IkReal x1362=(x1352*x1353);
IkReal x1363=(x1351*x1353);
IkReal x1364=(x1352*x1354);
IkReal x1365=(x1356+x1362);
IkReal x1366=(x1355+x1364+x1363);
evalcond[0]=((-0.0020693190882272)+(((-0.17423112)*x1358))+(((-0.17423112)*x1357))+(((-1.0)*(pz*pz))));
evalcond[1]=(x1360+(((-1.0)*x1359))+(((-0.105)*sj2)));
evalcond[2]=((0.123200006445727)+(((0.105)*cj2))+x1359+x1360);
evalcond[3]=(x1365+(((-1.0)*x1366))+(((-1.0)*x1361)));
evalcond[4]=(x1361+(((-1.0)*pz))+(((-1.0)*x1366))+(((-1.0)*x1365)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1367=((457356.69)*sj2);
IkReal x1368=((17677669.5296637)*(pz*pz));
CheckValue<IkReal> x1369 = IKatan2WithCheck(IkReal(((-36580.7389931054)+x1367+(((-1.0)*x1368)))),IkReal(((-36580.7389931054)+(((-1.0)*x1367))+(((-1.0)*x1368)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1369.valid){
continue;
}
CheckValue<IkReal> x1370=IKPowWithIntegerCheck(IKsign(pz),-1);
if(!x1370.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1369.value)+(((1.5707963267949)*(x1370.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1371=IKsin(j1);
IkReal x1372=IKcos(j1);
IkReal x1373=((0.0742462120245875)*cj2);
IkReal x1374=((0.0742462120245875)*sj2);
IkReal x1375=((0.08711556)*x1371);
IkReal x1376=((0.08711556)*x1372);
IkReal x1377=(pz*x1372);
IkReal x1378=(pz*x1371);
IkReal x1379=((0.707106781186548)*x1377);
IkReal x1380=((0.707106781186548)*x1378);
IkReal x1381=(x1371*x1374);
IkReal x1382=(x1372*x1373);
IkReal x1383=(x1371*x1373);
IkReal x1384=(x1372*x1374);
IkReal x1385=(x1376+x1382);
IkReal x1386=(x1375+x1384+x1383);
evalcond[0]=((-0.0020693190882272)+(((-0.17423112)*x1377))+(((-0.17423112)*x1378))+(((-1.0)*(pz*pz))));
evalcond[1]=(x1380+(((-1.0)*x1379))+(((-0.105)*sj2)));
evalcond[2]=((0.123200006445727)+(((0.105)*cj2))+x1379+x1380);
evalcond[3]=((((-1.0)*x1381))+(((-1.0)*x1386))+x1385);
evalcond[4]=((((-1.0)*x1386))+(((-1.0)*x1385))+x1381+(((-1.0)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x1387=((0.0742462120245875)*sj2);
IkReal x1388=((0.0742462120245875)*cj2);
IkReal x1389=((-0.08711556)+(((-1.0)*x1388))+(((-1.0)*x1387)));
IkReal x1390=((-0.08711556)+(((-1.0)*x1388))+x1387);
CheckValue<IkReal> x1393 = IKatan2WithCheck(IkReal(x1389),IkReal(x1390),IKFAST_ATAN2_MAGTHRESH);
if(!x1393.valid){
continue;
}
IkReal x1391=((1.0)*(x1393.value));
if((((x1390*x1390)+(x1389*x1389))) < -0.00001)
continue;
CheckValue<IkReal> x1394=IKPowWithIntegerCheck(IKabs(IKsqrt(((x1390*x1390)+(x1389*x1389)))),-1);
if(!x1394.valid){
continue;
}
if( ((pz*(x1394.value))) < -1-IKFAST_SINCOS_THRESH || ((pz*(x1394.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1392=IKasin((pz*(x1394.value)));
j1array[0]=(x1392+(((-1.0)*x1391)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x1392))+(((-1.0)*x1391)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal j0eval[2];
IkReal x1395=py*py;
IkReal x1396=px*px;
IkReal x1397=((1.0)*sj1);
IkReal x1398=((3484.6224)*x1395);
IkReal x1399=(cj1*x1396);
j0eval[0]=(x1399+(((-1.0)*x1395*x1397))+(((-1.0)*x1396*x1397))+((cj1*x1395)));
j0eval[1]=IKsign(((((-3484.6224)*sj1*x1396))+(((3484.6224)*x1399))+(((-1.0)*sj1*x1398))+((cj1*x1398))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1400=px*px;
IkReal x1401=py*py;
j0eval[0]=(x1401+x1400);
j0eval[1]=IKsign(((((20000.0)*x1401))+(((20000.0)*x1400))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1402=px*px;
IkReal x1403=py*py;
IkReal x1404=((1.0)*cj1);
IkReal x1405=((14142.135623731)*cj1);
IkReal x1406=((14142.135623731)*sj1);
IkReal x1407=((1.0)*sj1);
j0eval[0]=((((-1.0)*x1402*x1404))+(((-1.0)*x1402*x1407))+(((-1.0)*x1403*x1404))+(((-1.0)*x1403*x1407)));
j0eval[1]=IKsign(((((-1.0)*x1402*x1406))+(((-1.0)*x1402*x1405))+(((-1.0)*x1403*x1406))+(((-1.0)*x1403*x1405))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1408=px*px;
IkReal x1409=py*py;
IkReal x1410=((((-1.0)*x1409))+(((-1.0)*x1408)));
IkReal x1413 = ((2.0)*(x1410*x1410));
if(IKabs(x1413)==0){
continue;
}
IkReal x1411=pow(x1413,-0.5);
IkReal x1412=(x1410*x1411);
CheckValue<IkReal> x1414 = IKatan2WithCheck(IkReal(x1410),IkReal(((((-1.0)*x1408))+(((-1.0)*x1409)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1414.valid){
continue;
}
IkReal gconst0=((-1.0)*(x1414.value));
IkReal gconst1=((-1.0)*x1412);
IkReal gconst2=((1.0)*x1412);
IkReal x1415=px*px;
IkReal x1416=py*py;
IkReal x1417=j1;
CheckValue<IkReal> x1420 = IKatan2WithCheck(IkReal(((((-1.0)*x1416))+(((-1.0)*x1415)))),IkReal(((((-1.0)*x1415))+(((-1.0)*x1416)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1420.valid){
continue;
}
IkReal x1418=x1420.value;
IkReal x1419=x1418;
if(((((x1418*x1419))+((j1*x1419))+((j1*x1417))+((x1417*x1418)))) < -0.00001)
continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt((((x1418*x1419))+((j1*x1419))+((j1*x1417))+((x1417*x1418)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1421=py*py;
IkReal x1422=px*px;
IkReal x1423=pz*pz;
IkReal x1424=(gconst1*px);
IkReal x1425=((3484.6224)*pz);
IkReal x1426=(gconst1*py);
IkReal x1427=(gconst2*px);
IkReal x1428=((3484.6224)*gconst2);
IkReal x1429=((20000.0)*px);
IkReal x1430=(gconst2*py);
IkReal x1431=((3484.6224)*gconst1);
IkReal x1432=((20000.0)*py);
CheckValue<IkReal> x1433 = IKatan2WithCheck(IkReal((((x1425*x1426))+(((41.386381764544)*py))+(((159.07301256)*x1427))+((x1425*x1430))+((x1422*x1432))+((x1423*x1432))+((x1432*(py*py)))+(((-159.07301256)*x1424)))),IkReal((((x1425*x1427))+((x1424*x1425))+((x1423*x1429))+(((41.386381764544)*px))+(((159.07301256)*x1426))+((x1429*(px*px)))+(((-159.07301256)*x1430))+((x1421*x1429)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1433.valid){
continue;
}
CheckValue<IkReal> x1434=IKPowWithIntegerCheck(IKsign((((x1422*x1428))+(((-1.0)*x1422*x1431))+(((-1.0)*x1421*x1431))+((x1421*x1428)))),-1);
if(!x1434.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1433.value)+(((1.5707963267949)*(x1434.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1435=IKcos(j0);
IkReal x1436=IKsin(j0);
IkReal x1437=(gconst1*pz);
IkReal x1438=((0.0742462120245875)*sj2);
IkReal x1439=((0.707106781186548)*gconst1);
IkReal x1440=((0.707106781186548)*gconst2);
IkReal x1441=((0.0742462120245875)*cj2);
IkReal x1442=((0.17423112)*gconst2);
IkReal x1443=((0.17423112)*gconst1);
IkReal x1444=(pz*x1440);
IkReal x1445=((0.707106781186548)*x1437);
IkReal x1446=(px*x1435);
IkReal x1447=(py*x1436);
IkReal x1448=(x1439*x1447);
IkReal x1449=(x1439*x1446);
IkReal x1450=(x1440*x1447);
IkReal x1451=(x1440*x1446);
IkReal x1452=(x1450+x1451);
IkReal x1453=(x1444+x1449+x1448);
evalcond[0]=((-0.04565)+((px*x1436))+(((-1.0)*py*x1435)));
evalcond[1]=((-0.0020693190882272)+(((-1.0)*(px*px)))+((x1442*x1447))+((x1442*x1446))+(((-1.0)*pz*x1442))+(((-1.0)*(pz*pz)))+(((-0.17423112)*x1437))+(((-1.0)*(py*py)))+(((-1.0)*x1443*x1446))+(((-1.0)*x1443*x1447)));
evalcond[2]=(((gconst2*x1441))+(((-0.08711556)*gconst1))+(((-1.0)*gconst1*x1438))+(((-1.0)*gconst2*x1438))+(((-1.0)*x1447))+(((-1.0)*x1446))+(((0.08711556)*gconst2))+(((-1.0)*gconst1*x1441)));
evalcond[3]=((((-1.0)*x1453))+(((-1.0)*x1452))+x1445+(((-0.105)*sj2)));
evalcond[4]=((0.123200006445727)+(((0.105)*cj2))+(((-1.0)*x1452))+x1453+x1445);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1454=px*px;
IkReal x1455=py*py;
IkReal x1456=((((-1.0)*x1454))+(((-1.0)*x1455)));
IkReal x1459 = ((2.0)*(x1456*x1456));
if(IKabs(x1459)==0){
continue;
}
IkReal x1457=pow(x1459,-0.5);
IkReal x1458=(x1456*x1457);
CheckValue<IkReal> x1460 = IKatan2WithCheck(IkReal(x1456),IkReal(((((-1.0)*x1455))+(((-1.0)*x1454)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1460.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x1460.value))));
IkReal gconst4=((1.0)*x1458);
IkReal gconst5=((-1.0)*x1458);
IkReal x1461=px*px;
IkReal x1462=py*py;
IkReal x1463=j1;
CheckValue<IkReal> x1466 = IKatan2WithCheck(IkReal(((((-1.0)*x1462))+(((-1.0)*x1461)))),IkReal(((((-1.0)*x1461))+(((-1.0)*x1462)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1466.valid){
continue;
}
IkReal x1464=x1466.value;
IkReal x1465=x1464;
if((((9.86960440108936)+((x1463*x1464))+((j1*x1463))+((j1*x1465))+((x1464*x1465))+(((-3.14159265358979)*x1465))+(((-3.14159265358979)*x1464))+(((-3.14159265358979)*x1463))+(((-3.14159265358979)*j1)))) < -0.00001)
continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt(((9.86960440108936)+((x1463*x1464))+((j1*x1463))+((j1*x1465))+((x1464*x1465))+(((-3.14159265358979)*x1465))+(((-3.14159265358979)*x1464))+(((-3.14159265358979)*x1463))+(((-3.14159265358979)*j1)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1467=pz*pz;
IkReal x1468=px*px;
IkReal x1469=py*py;
IkReal x1470=((3484.6224)*pz);
IkReal x1471=(gconst4*py);
IkReal x1472=((159.07301256)*gconst5);
IkReal x1473=((20000.0)*py);
IkReal x1474=((3484.6224)*gconst4);
IkReal x1475=(gconst4*px);
IkReal x1476=((20000.0)*px);
IkReal x1477=((3484.6224)*gconst5);
CheckValue<IkReal> x1478 = IKatan2WithCheck(IkReal((((gconst5*py*x1470))+(((41.386381764544)*py))+((x1473*(py*py)))+((x1467*x1473))+((x1470*x1471))+(((-159.07301256)*x1475))+((x1468*x1473))+((px*x1472)))),IkReal(((((41.386381764544)*px))+((x1476*(px*px)))+((x1467*x1476))+((x1470*x1475))+(((159.07301256)*x1471))+((gconst5*px*x1470))+(((-1.0)*py*x1472))+((x1469*x1476)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1478.valid){
continue;
}
CheckValue<IkReal> x1479=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1468*x1474))+(((-1.0)*x1469*x1474))+((x1468*x1477))+((x1469*x1477)))),-1);
if(!x1479.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1478.value)+(((1.5707963267949)*(x1479.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1480=IKsin(j0);
IkReal x1481=IKcos(j0);
IkReal x1482=((0.17423112)*gconst4);
IkReal x1483=((0.707106781186548)*gconst5);
IkReal x1484=((0.17423112)*gconst5);
IkReal x1485=((0.0742462120245875)*gconst5);
IkReal x1486=((0.707106781186548)*gconst4);
IkReal x1487=((0.0742462120245875)*gconst4);
IkReal x1488=(pz*x1486);
IkReal x1489=(pz*x1483);
IkReal x1490=(px*x1481);
IkReal x1491=(py*x1480);
IkReal x1492=(x1486*x1490);
IkReal x1493=(x1486*x1491);
IkReal x1494=(x1483*x1490);
IkReal x1495=(x1483*x1491);
IkReal x1496=(x1494+x1495);
IkReal x1497=(x1492+x1493+x1489);
evalcond[0]=((-0.04565)+(((-1.0)*py*x1481))+((px*x1480)));
evalcond[1]=((-0.0020693190882272)+(((-1.0)*(px*px)))+(((-1.0)*x1482*x1490))+(((-1.0)*x1482*x1491))+((x1484*x1491))+((x1484*x1490))+(((-1.0)*(pz*pz)))+(((-1.0)*(py*py)))+(((-1.0)*pz*x1482))+(((-1.0)*pz*x1484)));
evalcond[2]=((((-1.0)*cj2*x1487))+((cj2*x1485))+(((-0.08711556)*gconst4))+(((-1.0)*x1491))+(((-1.0)*x1490))+(((0.08711556)*gconst5))+(((-1.0)*sj2*x1487))+(((-1.0)*sj2*x1485)));
evalcond[3]=((((-1.0)*x1497))+(((-1.0)*x1496))+x1488+(((-0.105)*sj2)));
evalcond[4]=((0.123200006445727)+(((0.105)*cj2))+(((-1.0)*x1496))+x1497+x1488);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((px*px)+(py*py));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1498=px*px;
IkReal x1499=py*py;
IkReal x1500=(x1498+x1499);
IkReal x1501=((((-1.0)*x1498))+(((-1.0)*x1499)));
IkReal x1503 = ((x1501*x1501)+(x1500*x1500));
if(IKabs(x1503)==0){
continue;
}
IkReal x1502=pow(x1503,-0.5);
CheckValue<IkReal> x1504 = IKatan2WithCheck(IkReal(x1500),IkReal(x1501),IKFAST_ATAN2_MAGTHRESH);
if(!x1504.valid){
continue;
}
IkReal gconst6=((-1.0)*(x1504.value));
IkReal gconst7=((-1.0)*x1500*x1502);
IkReal gconst8=(x1501*x1502);
IkReal x1505=px*px;
IkReal x1506=py*py;
IkReal x1507=j1;
CheckValue<IkReal> x1510 = IKatan2WithCheck(IkReal((x1506+x1505)),IkReal(((((-1.0)*x1505))+(((-1.0)*x1506)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1510.valid){
continue;
}
IkReal x1508=x1510.value;
IkReal x1509=x1508;
if(((((x1508*x1509))+((j1*x1507))+((j1*x1509))+((x1507*x1508)))) < -0.00001)
continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt((((x1508*x1509))+((j1*x1507))+((j1*x1509))+((x1507*x1508)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1511=px*px;
IkReal x1512=py*py;
IkReal x1513=pz*pz;
IkReal x1514=((20000.0)*px);
IkReal x1515=((3484.6224)*gconst7);
IkReal x1516=(px*pz);
IkReal x1517=((3484.6224)*gconst8);
IkReal x1518=((20000.0)*py);
IkReal x1519=((159.07301256)*gconst8);
IkReal x1520=((159.07301256)*gconst7);
IkReal x1521=(py*pz);
CheckValue<IkReal> x1522 = IKatan2WithCheck(IkReal((((x1513*x1518))+(((41.386381764544)*py))+((x1517*x1521))+((x1518*(py*py)))+(((-1.0)*px*x1520))+((px*x1519))+((x1515*x1521))+((x1511*x1518)))),IkReal((((x1513*x1514))+(((41.386381764544)*px))+((x1516*x1517))+((x1515*x1516))+((x1514*(px*px)))+(((-1.0)*py*x1519))+((py*x1520))+((x1512*x1514)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1522.valid){
continue;
}
CheckValue<IkReal> x1523=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1512*x1515))+((x1511*x1517))+((x1512*x1517))+(((-1.0)*x1511*x1515)))),-1);
if(!x1523.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1522.value)+(((1.5707963267949)*(x1523.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1524=IKcos(j0);
IkReal x1525=IKsin(j0);
IkReal x1526=(gconst8*pz);
IkReal x1527=((0.17423112)*gconst7);
IkReal x1528=((0.707106781186548)*gconst8);
IkReal x1529=((0.0742462120245875)*gconst8);
IkReal x1530=((0.0742462120245875)*gconst7);
IkReal x1531=((0.17423112)*gconst8);
IkReal x1532=((0.707106781186548)*gconst7);
IkReal x1533=((0.707106781186548)*x1526);
IkReal x1534=(pz*x1532);
IkReal x1535=(px*x1524);
IkReal x1536=(py*x1525);
IkReal x1537=(x1532*x1535);
IkReal x1538=(x1532*x1536);
IkReal x1539=(x1528*x1536);
IkReal x1540=(x1528*x1535);
IkReal x1541=(x1540+x1539);
IkReal x1542=(x1537+x1533+x1538);
evalcond[0]=((-0.04565)+((px*x1525))+(((-1.0)*py*x1524)));
evalcond[1]=((-0.0020693190882272)+(((-1.0)*(px*px)))+((x1531*x1536))+((x1531*x1535))+(((-1.0)*(pz*pz)))+(((-1.0)*x1527*x1536))+(((-1.0)*x1527*x1535))+(((-1.0)*pz*x1527))+(((-1.0)*(py*py)))+(((-0.17423112)*x1526)));
evalcond[2]=((((-1.0)*x1536))+(((-1.0)*x1535))+(((-1.0)*sj2*x1529))+(((-0.08711556)*gconst7))+(((-1.0)*sj2*x1530))+((cj2*x1529))+(((0.08711556)*gconst8))+(((-1.0)*cj2*x1530)));
evalcond[3]=(x1534+(((-0.105)*sj2))+(((-1.0)*x1542))+(((-1.0)*x1541)));
evalcond[4]=((0.123200006445727)+(((0.105)*cj2))+x1542+x1534+(((-1.0)*x1541)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1543=px*px;
IkReal x1544=py*py;
IkReal x1545=(x1544+x1543);
IkReal x1546=((((-1.0)*x1543))+(((-1.0)*x1544)));
IkReal x1548 = ((x1545*x1545)+(x1546*x1546));
if(IKabs(x1548)==0){
continue;
}
IkReal x1547=pow(x1548,-0.5);
CheckValue<IkReal> x1549 = IKatan2WithCheck(IkReal(x1545),IkReal(x1546),IKFAST_ATAN2_MAGTHRESH);
if(!x1549.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x1549.value))));
IkReal gconst10=((1.0)*x1545*x1547);
IkReal gconst11=((-1.0)*x1546*x1547);
IkReal x1550=px*px;
IkReal x1551=py*py;
IkReal x1552=j1;
CheckValue<IkReal> x1555 = IKatan2WithCheck(IkReal((x1551+x1550)),IkReal(((((-1.0)*x1550))+(((-1.0)*x1551)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1555.valid){
continue;
}
IkReal x1553=x1555.value;
IkReal x1554=x1553;
if((((9.86960440108936)+((x1553*x1554))+((x1552*x1553))+(((-3.14159265358979)*x1554))+(((-3.14159265358979)*x1553))+(((-3.14159265358979)*x1552))+((j1*x1554))+((j1*x1552))+(((-3.14159265358979)*j1)))) < -0.00001)
continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt(((9.86960440108936)+((x1553*x1554))+((x1552*x1553))+(((-3.14159265358979)*x1554))+(((-3.14159265358979)*x1553))+(((-3.14159265358979)*x1552))+((j1*x1554))+((j1*x1552))+(((-3.14159265358979)*j1)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1556=px*px;
IkReal x1557=py*py;
IkReal x1558=pz*pz;
IkReal x1559=((3484.6224)*gconst11);
IkReal x1560=(py*pz);
IkReal x1561=((3484.6224)*gconst10);
IkReal x1562=(px*pz);
IkReal x1563=((159.07301256)*gconst10);
IkReal x1564=((20000.0)*px);
IkReal x1565=((20000.0)*py);
IkReal x1566=((159.07301256)*gconst11);
CheckValue<IkReal> x1567 = IKatan2WithCheck(IkReal((((x1560*x1561))+((x1556*x1565))+(((41.386381764544)*py))+((x1565*(py*py)))+((px*x1566))+(((-1.0)*px*x1563))+((x1559*x1560))+((x1558*x1565)))),IkReal(((((41.386381764544)*px))+((x1564*(px*px)))+(((-1.0)*py*x1566))+((x1561*x1562))+((x1557*x1564))+((py*x1563))+((x1559*x1562))+((x1558*x1564)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1567.valid){
continue;
}
CheckValue<IkReal> x1568=IKPowWithIntegerCheck(IKsign((((x1556*x1559))+((x1557*x1559))+(((-1.0)*x1557*x1561))+(((-1.0)*x1556*x1561)))),-1);
if(!x1568.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1567.value)+(((1.5707963267949)*(x1568.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1569=IKcos(j0);
IkReal x1570=IKsin(j0);
IkReal x1571=((0.707106781186548)*gconst10);
IkReal x1572=((0.0742462120245875)*gconst11);
IkReal x1573=((0.707106781186548)*gconst11);
IkReal x1574=((0.17423112)*pz);
IkReal x1575=((0.17423112)*gconst10);
IkReal x1576=((0.17423112)*gconst11);
IkReal x1577=((0.0742462120245875)*gconst10);
IkReal x1578=(pz*x1573);
IkReal x1579=(pz*x1571);
IkReal x1580=(px*x1569);
IkReal x1581=(py*x1570);
IkReal x1582=(x1571*x1581);
IkReal x1583=(x1571*x1580);
IkReal x1584=(x1573*x1580);
IkReal x1585=(x1573*x1581);
IkReal x1586=(x1584+x1585);
IkReal x1587=(x1578+x1582+x1583);
evalcond[0]=((-0.04565)+(((-1.0)*py*x1569))+((px*x1570)));
evalcond[1]=((-0.0020693190882272)+(((-1.0)*gconst11*x1574))+(((-1.0)*(px*px)))+((x1576*x1580))+((x1576*x1581))+(((-1.0)*gconst10*x1574))+(((-1.0)*(pz*pz)))+(((-1.0)*(py*py)))+(((-1.0)*x1575*x1581))+(((-1.0)*x1575*x1580)));
evalcond[2]=((((-1.0)*sj2*x1572))+(((-1.0)*sj2*x1577))+(((0.08711556)*gconst11))+(((-0.08711556)*gconst10))+((cj2*x1572))+(((-1.0)*x1581))+(((-1.0)*x1580))+(((-1.0)*cj2*x1577)));
evalcond[3]=((((-1.0)*x1587))+(((-1.0)*x1586))+x1579+(((-0.105)*sj2)));
evalcond[4]=((0.123200006445727)+(((-1.0)*x1586))+(((0.105)*cj2))+x1579+x1587);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1588=py*py;
IkReal x1589=px*px;
IkReal x1590=((645.588491223318)*cj1);
IkReal x1591=(py*pz);
IkReal x1592=((14142.135623731)*sj1);
IkReal x1593=((14142.135623731)*sj1);
IkReal x1594=((645.588491223318)*sj1);
IkReal x1595=((14142.135623731)*cj1);
IkReal x1596=(px*pz);
IkReal x1597=((14142.135623731)*cj1);
IkReal x1598=((2100.0)*sj2);
CheckValue<IkReal> x1599 = IKatan2WithCheck(IkReal((((x1591*x1595))+(((-1.0)*x1591*x1592))+((py*x1598))+(((-1.0)*px*x1590))+(((-1.0)*px*x1594))+(((2.27373675443232e-13)*py)))),IkReal(((((-1.0)*x1592*x1596))+((py*x1590))+((py*x1594))+((px*x1598))+((x1595*x1596))+(((2.27373675443232e-13)*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1599.valid){
continue;
}
CheckValue<IkReal> x1600=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1588*x1597))+(((-1.0)*x1588*x1593))+(((-1.0)*x1589*x1593))+(((-1.0)*x1589*x1597)))),-1);
if(!x1600.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1599.value)+(((1.5707963267949)*(x1600.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1601=IKcos(j0);
IkReal x1602=IKsin(j0);
IkReal x1603=((0.17423112)*cj1);
IkReal x1604=((0.0742462120245875)*sj1);
IkReal x1605=((0.707106781186548)*sj1);
IkReal x1606=((0.17423112)*sj1);
IkReal x1607=((0.707106781186548)*cj1);
IkReal x1608=((0.0742462120245875)*cj1);
IkReal x1609=(pz*x1605);
IkReal x1610=(pz*x1607);
IkReal x1611=(px*x1601);
IkReal x1612=(py*x1602);
IkReal x1613=(x1605*x1612);
IkReal x1614=(x1605*x1611);
IkReal x1615=(x1607*x1612);
IkReal x1616=(x1607*x1611);
IkReal x1617=(x1616+x1615);
IkReal x1618=(x1614+x1613+x1610);
evalcond[0]=((-0.04565)+((px*x1602))+(((-1.0)*py*x1601)));
evalcond[1]=((-0.0020693190882272)+(((-1.0)*x1606*x1612))+(((-1.0)*x1606*x1611))+(((-1.0)*(px*px)))+(((-1.0)*pz*x1606))+(((-1.0)*pz*x1603))+(((-1.0)*(pz*pz)))+(((-1.0)*(py*py)))+((x1603*x1612))+((x1603*x1611)));
evalcond[2]=((((-1.0)*x1612))+(((-1.0)*x1611))+(((0.08711556)*cj1))+(((-0.08711556)*sj1))+((cj2*x1608))+(((-1.0)*sj2*x1604))+(((-1.0)*sj2*x1608))+(((-1.0)*cj2*x1604)));
evalcond[3]=(x1609+(((-1.0)*x1617))+(((-1.0)*x1618))+(((-0.105)*sj2)));
evalcond[4]=((0.123200006445727)+(((0.105)*cj2))+x1618+x1609+(((-1.0)*x1617)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1619=(py*sj1);
IkReal x1620=((1484.92424049175)*cj2);
IkReal x1621=((1484.92424049175)*sj2);
IkReal x1622=(px*sj1);
IkReal x1623=((1742.3112)*cj1);
IkReal x1624=((1484.92424049175)*cj1*cj2);
IkReal x1625=((1484.92424049175)*cj1*sj2);
CheckValue<IkReal> x1626 = IKatan2WithCheck(IkReal(((((-1.0)*x1619*x1620))+(((-1.0)*x1619*x1621))+((py*x1623))+((py*x1624))+(((-1742.3112)*x1619))+(((-1.0)*py*x1625))+(((913.0)*px)))),IkReal(((((-1742.3112)*x1622))+(((-913.0)*py))+((px*x1623))+((px*x1624))+(((-1.0)*x1621*x1622))+(((-1.0)*x1620*x1622))+(((-1.0)*px*x1625)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1626.valid){
continue;
}
CheckValue<IkReal> x1627=IKPowWithIntegerCheck(IKsign(((((20000.0)*(px*px)))+(((20000.0)*(py*py))))),-1);
if(!x1627.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1626.value)+(((1.5707963267949)*(x1627.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1628=IKcos(j0);
IkReal x1629=IKsin(j0);
IkReal x1630=((0.17423112)*cj1);
IkReal x1631=((0.0742462120245875)*sj1);
IkReal x1632=((0.707106781186548)*sj1);
IkReal x1633=((0.17423112)*sj1);
IkReal x1634=((0.707106781186548)*cj1);
IkReal x1635=((0.0742462120245875)*cj1);
IkReal x1636=(pz*x1632);
IkReal x1637=(pz*x1634);
IkReal x1638=(px*x1628);
IkReal x1639=(py*x1629);
IkReal x1640=(x1632*x1639);
IkReal x1641=(x1632*x1638);
IkReal x1642=(x1634*x1639);
IkReal x1643=(x1634*x1638);
IkReal x1644=(x1643+x1642);
IkReal x1645=(x1641+x1640+x1637);
evalcond[0]=((-0.04565)+((px*x1629))+(((-1.0)*py*x1628)));
evalcond[1]=((-0.0020693190882272)+(((-1.0)*pz*x1633))+(((-1.0)*pz*x1630))+(((-1.0)*(px*px)))+(((-1.0)*x1633*x1638))+(((-1.0)*x1633*x1639))+(((-1.0)*(pz*pz)))+(((-1.0)*(py*py)))+((x1630*x1638))+((x1630*x1639)));
evalcond[2]=((((-1.0)*sj2*x1635))+(((-1.0)*sj2*x1631))+((cj2*x1635))+(((0.08711556)*cj1))+(((-0.08711556)*sj1))+(((-1.0)*cj2*x1631))+(((-1.0)*x1638))+(((-1.0)*x1639)));
evalcond[3]=(x1636+(((-1.0)*x1645))+(((-1.0)*x1644))+(((-0.105)*sj2)));
evalcond[4]=((0.123200006445727)+(((0.105)*cj2))+x1645+x1636+(((-1.0)*x1644)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1646=py*py;
IkReal x1647=px*px;
IkReal x1648=pz*pz;
IkReal x1649=((3484.6224)*sj1);
IkReal x1650=((3484.6224)*cj1);
IkReal x1651=(px*pz);
IkReal x1652=((20000.0)*py);
IkReal x1653=((159.07301256)*py);
IkReal x1654=((159.07301256)*px);
IkReal x1655=((20000.0)*px);
IkReal x1656=(py*pz);
CheckValue<IkReal> x1657 = IKatan2WithCheck(IkReal((((x1650*x1656))+((x1648*x1652))+(((-1.0)*sj1*x1654))+(((41.386381764544)*py))+((cj1*x1654))+((x1647*x1652))+((x1649*x1656))+((x1652*(py*py))))),IkReal((((sj1*x1653))+((x1650*x1651))+((x1655*(px*px)))+((x1648*x1655))+(((41.386381764544)*px))+(((-1.0)*cj1*x1653))+((x1646*x1655))+((x1649*x1651)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1657.valid){
continue;
}
CheckValue<IkReal> x1658=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1647*x1649))+(((-1.0)*x1646*x1649))+((x1647*x1650))+((x1646*x1650)))),-1);
if(!x1658.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1657.value)+(((1.5707963267949)*(x1658.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1659=IKcos(j0);
IkReal x1660=IKsin(j0);
IkReal x1661=((0.17423112)*cj1);
IkReal x1662=((0.0742462120245875)*sj1);
IkReal x1663=((0.707106781186548)*sj1);
IkReal x1664=((0.17423112)*sj1);
IkReal x1665=((0.707106781186548)*cj1);
IkReal x1666=((0.0742462120245875)*cj1);
IkReal x1667=(pz*x1663);
IkReal x1668=(pz*x1665);
IkReal x1669=(px*x1659);
IkReal x1670=(py*x1660);
IkReal x1671=(x1663*x1670);
IkReal x1672=(x1663*x1669);
IkReal x1673=(x1665*x1670);
IkReal x1674=(x1665*x1669);
IkReal x1675=(x1674+x1673);
IkReal x1676=(x1668+x1671+x1672);
evalcond[0]=((-0.04565)+(((-1.0)*py*x1659))+((px*x1660)));
evalcond[1]=((-0.0020693190882272)+(((-1.0)*(px*px)))+(((-1.0)*pz*x1661))+(((-1.0)*pz*x1664))+(((-1.0)*(pz*pz)))+(((-1.0)*x1664*x1670))+(((-1.0)*(py*py)))+((x1661*x1669))+(((-1.0)*x1664*x1669))+((x1661*x1670)));
evalcond[2]=((((-1.0)*sj2*x1666))+(((-1.0)*sj2*x1662))+(((-1.0)*x1669))+(((0.08711556)*cj1))+(((-0.08711556)*sj1))+((cj2*x1666))+(((-1.0)*x1670))+(((-1.0)*cj2*x1662)));
evalcond[3]=(x1667+(((-0.105)*sj2))+(((-1.0)*x1676))+(((-1.0)*x1675)));
evalcond[4]=((0.123200006445727)+(((0.105)*cj2))+x1667+x1676+(((-1.0)*x1675)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1679 = IKatan2WithCheck(IkReal(((-1.0)*py)),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x1679.valid){
continue;
}
IkReal x1677=((1.0)*(x1679.value));
if((((px*px)+(py*py))) < -0.00001)
continue;
CheckValue<IkReal> x1680=IKPowWithIntegerCheck(IKabs(IKsqrt(((px*px)+(py*py)))),-1);
if(!x1680.valid){
continue;
}
if( (((0.04565)*(x1680.value))) < -1-IKFAST_SINCOS_THRESH || (((0.04565)*(x1680.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1678=IKasin(((0.04565)*(x1680.value)));
j0array[0]=(x1678+(((-1.0)*x1677)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x1678))+(((-1.0)*x1677)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j1eval[2];
j1eval[0]=((2.0256060774037)+(((2.0)*cj2))+(((2.22044604925031e-16)*sj2)));
j1eval[1]=IKsign(((0.0262032415882272)+(((0.0258720013536027)*cj2))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x1681=(py*sj0);
IkReal x1682=((2.22044604925031e-16)*sj2);
IkReal x1683=(cj0*px);
IkReal x1684=((0.0258720013536027)*cj2);
IkReal x1685=((2.0)*cj2);
IkReal x1686=(pz*sj2);
j1eval[0]=((((-1.0)*x1681*x1685))+(((-1.0)*x1681*x1682))+(((-1.0)*x1682*x1683))+(((-2.34666678944242)*x1681))+(((-2.34666678944242)*x1683))+(((-1.0)*x1683*x1685))+(((-2.0)*x1686))+(((2.22044604925031e-16)*cj2*pz)));
j1eval[1]=IKsign(((((-1.0)*x1681*x1684))+(((-0.0258720013536027)*x1686))+(((-1.0)*x1683*x1684))+(((-0.0303564831764544)*x1681))+(((-0.0303564831764544)*x1683))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x1687=((0.0258720013536027)*sj2);
IkReal x1688=(py*sj0);
IkReal x1689=(cj0*px);
IkReal x1690=((2.0)*sj2);
IkReal x1691=(cj2*pz);
IkReal x1692=((2.22044604925031e-16)*cj2);
j1eval[0]=((((-1.0)*x1688*x1690))+(((2.0)*x1691))+(((2.22044604925031e-16)*pz*sj2))+((x1689*x1692))+(((2.34666678944242)*pz))+((x1688*x1692))+(((-1.0)*x1689*x1690)));
j1eval[1]=IKsign(((((-1.0)*x1687*x1689))+(((-1.0)*x1687*x1688))+(((0.0303564831764544)*pz))+(((0.0258720013536027)*x1691))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1693=py*py;
IkReal x1694=px*px;
IkReal x1695=pz*pz;
IkReal x1696=cj0*cj0;
IkReal x1697=((0.000153639103771043)*sj2);
IkReal x1698=((0.000153639103771043)*cj2);
IkReal x1699=((0.0258720013536027)*sj2);
IkReal x1700=(py*sj0);
IkReal x1701=(cj0*px);
IkReal x1702=((0.0742462120245875)*sj2);
IkReal x1703=((0.17423112)*pz);
IkReal x1704=((0.0742462120245875)*cj2);
IkReal x1705=((0.08711556)*x1693);
IkReal x1706=((0.08711556)*x1695);
IkReal x1707=((0.08711556)*x1694);
IkReal x1708=((0.0742462120245875)*x1693);
IkReal x1709=((0.17423112)*x1696);
IkReal x1710=(x1701*x1703);
IkReal x1711=(x1700*x1703);
IkReal x1712=(x1693*x1702);
IkReal x1713=(x1695*x1704);
IkReal x1714=(x1695*x1702);
IkReal x1715=(x1693*x1704);
IkReal x1716=(x1694*x1704);
IkReal x1717=(x1694*x1702);
IkReal x1718=(x1694*x1709);
IkReal x1719=((0.34846224)*x1700*x1701);
IkReal x1720=(x1693*x1709);
IkReal x1721=(x1711+x1710);
IkReal x1722=((-0.000180269891189602)+x1705+x1719+x1718);
IkReal x1723=(x1712+x1717+x1714+x1697);
IkReal x1724=(x1720+x1706+x1707+x1713+x1716+x1715+x1698);
CheckValue<IkReal> x1725 = IKatan2WithCheck(IkReal((x1722+x1723+(((-1.0)*x1724))+(((-1.0)*x1721)))),IkReal((x1722+x1721+(((-1.0)*x1724))+(((-1.0)*x1723)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1725.valid){
continue;
}
CheckValue<IkReal> x1726=IKPowWithIntegerCheck(IKsign(((((0.0258720013536027)*cj2*pz))+(((-1.0)*x1699*x1701))+(((-1.0)*x1699*x1700))+(((0.0303564831764544)*pz)))),-1);
if(!x1726.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1725.value)+(((1.5707963267949)*(x1726.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1727=IKcos(j1);
IkReal x1728=IKsin(j1);
IkReal x1729=((0.0742462120245875)*cj2);
IkReal x1730=(cj0*px);
IkReal x1731=(py*sj0);
IkReal x1732=((0.0742462120245875)*sj2);
IkReal x1733=((0.08711556)*x1727);
IkReal x1734=((0.08711556)*x1728);
IkReal x1735=((0.707106781186548)*x1727);
IkReal x1736=((0.17423112)*x1730);
IkReal x1737=((0.17423112)*x1728);
IkReal x1738=((0.707106781186548)*x1728);
IkReal x1739=((0.17423112)*x1727);
IkReal x1740=(x1727*x1729);
IkReal x1741=(x1728*x1729);
IkReal x1742=(x1728*x1732);
IkReal x1743=(x1727*x1732);
IkReal x1744=(pz*x1735);
IkReal x1745=(pz*x1738);
IkReal x1746=(x1731*x1738);
IkReal x1747=(x1730*x1738);
IkReal x1748=(x1730*x1735);
IkReal x1749=(x1731*x1735);
IkReal x1750=(x1733+x1740);
IkReal x1751=(x1748+x1749);
IkReal x1752=(x1734+x1741+x1743);
IkReal x1753=(x1744+x1746+x1747);
evalcond[0]=((-0.0020693190882272)+(((-1.0)*x1731*x1737))+(((-1.0)*(px*px)))+((x1731*x1739))+(((-1.0)*x1728*x1736))+(((-1.0)*pz*x1739))+(((-1.0)*pz*x1737))+(((-1.0)*(pz*pz)))+((x1727*x1736))+(((-1.0)*(py*py))));
evalcond[1]=(x1742+(((-1.0)*pz))+(((-1.0)*x1750))+(((-1.0)*x1752)));
evalcond[2]=(x1750+(((-1.0)*x1752))+(((-1.0)*x1742))+(((-1.0)*x1731))+(((-1.0)*x1730)));
evalcond[3]=(x1745+(((-1.0)*x1751))+(((-1.0)*x1753))+(((-0.105)*sj2)));
evalcond[4]=((0.123200006445727)+(((0.105)*cj2))+x1745+x1753+(((-1.0)*x1751)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1754=py*py;
IkReal x1755=pz*pz;
IkReal x1756=px*px;
IkReal x1757=((0.000153639103771043)*sj2);
IkReal x1758=((0.000153639103771043)*cj2);
IkReal x1759=((0.0742462120245875)*cj2);
IkReal x1760=(cj0*px);
IkReal x1761=((0.17423112)*pz);
IkReal x1762=(py*sj0);
IkReal x1763=((0.0742462120245875)*sj2);
IkReal x1764=((0.0258720013536027)*cj2);
IkReal x1765=((0.08711556)*x1755);
IkReal x1766=((0.08711556)*x1754);
IkReal x1767=((0.08711556)*x1756);
IkReal x1768=(x1754*x1763);
IkReal x1769=(x1760*x1761);
IkReal x1770=(x1761*x1762);
IkReal x1771=(x1755*x1763);
IkReal x1772=(x1756*x1763);
IkReal x1773=(x1755*x1759);
IkReal x1774=(x1754*x1759);
IkReal x1775=(x1756*x1759);
IkReal x1776=(x1766+x1767+x1775+x1774+x1773+x1758);
IkReal x1777=(x1768+x1769+x1771+x1770+x1772+x1757);
CheckValue<IkReal> x1778 = IKatan2WithCheck(IkReal(((0.000180269891189602)+(((-1.0)*x1765))+x1777+x1776)),IkReal(((-0.000180269891189602)+x1765+x1777+(((-1.0)*x1776)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1778.valid){
continue;
}
CheckValue<IkReal> x1779=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1762*x1764))+(((-0.0258720013536027)*pz*sj2))+(((-0.0303564831764544)*x1762))+(((-0.0303564831764544)*x1760))+(((-1.0)*x1760*x1764)))),-1);
if(!x1779.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1778.value)+(((1.5707963267949)*(x1779.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1780=IKcos(j1);
IkReal x1781=IKsin(j1);
IkReal x1782=((0.0742462120245875)*cj2);
IkReal x1783=(cj0*px);
IkReal x1784=(py*sj0);
IkReal x1785=((0.0742462120245875)*sj2);
IkReal x1786=((0.08711556)*x1780);
IkReal x1787=((0.08711556)*x1781);
IkReal x1788=((0.707106781186548)*x1780);
IkReal x1789=((0.17423112)*x1783);
IkReal x1790=((0.17423112)*x1781);
IkReal x1791=((0.707106781186548)*x1781);
IkReal x1792=((0.17423112)*x1780);
IkReal x1793=(x1780*x1782);
IkReal x1794=(x1781*x1782);
IkReal x1795=(x1781*x1785);
IkReal x1796=(x1780*x1785);
IkReal x1797=(pz*x1788);
IkReal x1798=(pz*x1791);
IkReal x1799=(x1784*x1791);
IkReal x1800=(x1783*x1791);
IkReal x1801=(x1783*x1788);
IkReal x1802=(x1784*x1788);
IkReal x1803=(x1786+x1793);
IkReal x1804=(x1802+x1801);
IkReal x1805=(x1787+x1796+x1794);
IkReal x1806=(x1799+x1797+x1800);
evalcond[0]=((-0.0020693190882272)+(((-1.0)*(px*px)))+(((-1.0)*pz*x1790))+(((-1.0)*pz*x1792))+(((-1.0)*x1784*x1790))+((x1784*x1792))+(((-1.0)*(pz*pz)))+(((-1.0)*x1781*x1789))+((x1780*x1789))+(((-1.0)*(py*py))));
evalcond[1]=(x1795+(((-1.0)*x1803))+(((-1.0)*x1805))+(((-1.0)*pz)));
evalcond[2]=((((-1.0)*x1795))+(((-1.0)*x1805))+(((-1.0)*x1784))+(((-1.0)*x1783))+x1803);
evalcond[3]=(x1798+(((-1.0)*x1804))+(((-1.0)*x1806))+(((-0.105)*sj2)));
evalcond[4]=((0.123200006445727)+(((0.105)*cj2))+x1798+(((-1.0)*x1804))+x1806);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1807=((0.08711556)*pz);
IkReal x1808=((0.0742462120245875)*cj2);
IkReal x1809=(py*sj0);
IkReal x1810=(cj0*px);
IkReal x1811=((0.0742462120245875)*sj2);
IkReal x1812=((0.08711556)*x1809);
IkReal x1813=((0.08711556)*x1810);
IkReal x1814=(pz*x1811);
IkReal x1815=(pz*x1808);
IkReal x1816=(x1808*x1809);
IkReal x1817=(x1808*x1810);
IkReal x1818=(x1809*x1811);
IkReal x1819=(x1810*x1811);
IkReal x1820=(x1815+x1818+x1819+x1807);
IkReal x1821=(x1816+x1817+x1812+x1813);
CheckValue<IkReal> x1822 = IKatan2WithCheck(IkReal(((((-1.0)*x1820))+(((-1.0)*x1821))+x1814)),IkReal(((((-1.0)*x1814))+(((-1.0)*x1820))+x1821)),IKFAST_ATAN2_MAGTHRESH);
if(!x1822.valid){
continue;
}
CheckValue<IkReal> x1823=IKPowWithIntegerCheck(IKsign(((0.0262032415882272)+(((0.0258720013536027)*cj2)))),-1);
if(!x1823.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1822.value)+(((1.5707963267949)*(x1823.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1824=IKcos(j1);
IkReal x1825=IKsin(j1);
IkReal x1826=((0.0742462120245875)*cj2);
IkReal x1827=(cj0*px);
IkReal x1828=(py*sj0);
IkReal x1829=((0.0742462120245875)*sj2);
IkReal x1830=((0.08711556)*x1824);
IkReal x1831=((0.08711556)*x1825);
IkReal x1832=((0.707106781186548)*x1824);
IkReal x1833=((0.17423112)*x1827);
IkReal x1834=((0.17423112)*x1825);
IkReal x1835=((0.707106781186548)*x1825);
IkReal x1836=((0.17423112)*x1824);
IkReal x1837=(x1824*x1826);
IkReal x1838=(x1825*x1826);
IkReal x1839=(x1825*x1829);
IkReal x1840=(x1824*x1829);
IkReal x1841=(pz*x1832);
IkReal x1842=(pz*x1835);
IkReal x1843=(x1828*x1835);
IkReal x1844=(x1827*x1835);
IkReal x1845=(x1827*x1832);
IkReal x1846=(x1828*x1832);
IkReal x1847=(x1830+x1837);
IkReal x1848=(x1846+x1845);
IkReal x1849=(x1840+x1831+x1838);
IkReal x1850=(x1843+x1841+x1844);
evalcond[0]=((-0.0020693190882272)+(((-1.0)*(px*px)))+(((-1.0)*x1825*x1833))+(((-1.0)*pz*x1834))+(((-1.0)*pz*x1836))+((x1824*x1833))+(((-1.0)*x1828*x1834))+(((-1.0)*(pz*pz)))+((x1828*x1836))+(((-1.0)*(py*py))));
evalcond[1]=((((-1.0)*x1849))+(((-1.0)*x1847))+(((-1.0)*pz))+x1839);
evalcond[2]=((((-1.0)*x1828))+(((-1.0)*x1827))+(((-1.0)*x1849))+(((-1.0)*x1839))+x1847);
evalcond[3]=((((-1.0)*x1848))+x1842+(((-0.105)*sj2))+(((-1.0)*x1850)));
evalcond[4]=((0.123200006445727)+(((0.105)*cj2))+(((-1.0)*x1848))+x1850+x1842);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1853 = IKatan2WithCheck(IkReal(((-1.0)*py)),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x1853.valid){
continue;
}
IkReal x1851=((1.0)*(x1853.value));
if((((px*px)+(py*py))) < -0.00001)
continue;
CheckValue<IkReal> x1854=IKPowWithIntegerCheck(IKabs(IKsqrt(((px*px)+(py*py)))),-1);
if(!x1854.valid){
continue;
}
if( (((0.04565)*(x1854.value))) < -1-IKFAST_SINCOS_THRESH || (((0.04565)*(x1854.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1852=IKasin(((0.04565)*(x1854.value)));
j0array[0]=(x1852+(((-1.0)*x1851)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x1852))+(((-1.0)*x1851)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j2eval[1];
j2eval[0]=0.00066936045404082;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
j1eval[0]=((((py*py)*(sj0*sj0)))+(pz*pz)+(((cj0*cj0)*(px*px)))+(((2.0)*cj0*px*py*sj0)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=2.62417035451839e-141;
j2eval[1]=0.00066936045404082;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2]

} else
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
if( (((-1.09335044095026)+(((38.6518223438771)*(pz*pz)))+(((38.6518223438771)*(py*py)))+(((38.6518223438771)*(px*px))))) < -1-IKFAST_SINCOS_THRESH || (((-1.09335044095026)+(((38.6518223438771)*(pz*pz)))+(((38.6518223438771)*(py*py)))+(((38.6518223438771)*(px*px))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1855=IKasin(((-1.09335044095026)+(((38.6518223438771)*(pz*pz)))+(((38.6518223438771)*(py*py)))+(((38.6518223438771)*(px*px)))));
j2array[0]=((-1.5707963267949)+(((1.0)*x1855)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((1.5707963267949)+(((-1.0)*x1855)));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal j1eval[2];
j1eval[0]=((2.0256060774037)+(((2.0)*cj2))+(((2.22044604925031e-16)*sj2)));
j1eval[1]=IKsign(((0.0262032415882272)+(((0.0258720013536027)*cj2))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x1856=(py*sj0);
IkReal x1857=((2.22044604925031e-16)*sj2);
IkReal x1858=(cj0*px);
IkReal x1859=((0.0258720013536027)*cj2);
IkReal x1860=((2.0)*cj2);
IkReal x1861=(pz*sj2);
j1eval[0]=((((-1.0)*x1856*x1860))+(((-1.0)*x1857*x1858))+(((-1.0)*x1856*x1857))+(((-1.0)*x1858*x1860))+(((2.22044604925031e-16)*cj2*pz))+(((-2.34666678944242)*x1858))+(((-2.34666678944242)*x1856))+(((-2.0)*x1861)));
j1eval[1]=IKsign(((((-0.0303564831764544)*x1856))+(((-0.0303564831764544)*x1858))+(((-0.0258720013536027)*x1861))+(((-1.0)*x1858*x1859))+(((-1.0)*x1856*x1859))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x1862=((0.0258720013536027)*sj2);
IkReal x1863=(py*sj0);
IkReal x1864=(cj0*px);
IkReal x1865=((2.0)*sj2);
IkReal x1866=(cj2*pz);
IkReal x1867=((2.22044604925031e-16)*cj2);
j1eval[0]=((((-1.0)*x1864*x1865))+((x1864*x1867))+(((2.22044604925031e-16)*pz*sj2))+(((-1.0)*x1863*x1865))+((x1863*x1867))+(((2.34666678944242)*pz))+(((2.0)*x1866)));
j1eval[1]=IKsign(((((0.0258720013536027)*x1866))+(((-1.0)*x1862*x1863))+(((-1.0)*x1862*x1864))+(((0.0303564831764544)*pz))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1868=py*py;
IkReal x1869=px*px;
IkReal x1870=pz*pz;
IkReal x1871=cj0*cj0;
IkReal x1872=((0.000153639103771043)*sj2);
IkReal x1873=((0.000153639103771043)*cj2);
IkReal x1874=((0.0258720013536027)*sj2);
IkReal x1875=(py*sj0);
IkReal x1876=(cj0*px);
IkReal x1877=((0.0742462120245875)*sj2);
IkReal x1878=((0.17423112)*pz);
IkReal x1879=((0.0742462120245875)*cj2);
IkReal x1880=((0.08711556)*x1868);
IkReal x1881=((0.08711556)*x1870);
IkReal x1882=((0.08711556)*x1869);
IkReal x1883=((0.0742462120245875)*x1868);
IkReal x1884=((0.17423112)*x1871);
IkReal x1885=(x1876*x1878);
IkReal x1886=(x1875*x1878);
IkReal x1887=(x1868*x1877);
IkReal x1888=(x1870*x1879);
IkReal x1889=(x1870*x1877);
IkReal x1890=(x1868*x1879);
IkReal x1891=(x1869*x1879);
IkReal x1892=(x1869*x1877);
IkReal x1893=(x1869*x1884);
IkReal x1894=((0.34846224)*x1875*x1876);
IkReal x1895=(x1868*x1884);
IkReal x1896=(x1886+x1885);
IkReal x1897=((-0.000180269891189602)+x1894+x1893+x1880);
IkReal x1898=(x1872+x1892+x1889+x1887);
IkReal x1899=(x1873+x1895+x1890+x1891+x1888+x1882+x1881);
CheckValue<IkReal> x1900 = IKatan2WithCheck(IkReal((x1898+x1897+(((-1.0)*x1899))+(((-1.0)*x1896)))),IkReal((x1896+x1897+(((-1.0)*x1899))+(((-1.0)*x1898)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1900.valid){
continue;
}
CheckValue<IkReal> x1901=IKPowWithIntegerCheck(IKsign(((((0.0258720013536027)*cj2*pz))+(((-1.0)*x1874*x1875))+(((-1.0)*x1874*x1876))+(((0.0303564831764544)*pz)))),-1);
if(!x1901.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1900.value)+(((1.5707963267949)*(x1901.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1902=IKcos(j1);
IkReal x1903=IKsin(j1);
IkReal x1904=((0.0742462120245875)*cj2);
IkReal x1905=(cj0*px);
IkReal x1906=(py*sj0);
IkReal x1907=((0.0742462120245875)*sj2);
IkReal x1908=((0.08711556)*x1902);
IkReal x1909=((0.08711556)*x1903);
IkReal x1910=((0.707106781186548)*x1902);
IkReal x1911=((0.17423112)*x1905);
IkReal x1912=((0.17423112)*x1903);
IkReal x1913=((0.707106781186548)*x1903);
IkReal x1914=((0.17423112)*x1902);
IkReal x1915=(x1902*x1904);
IkReal x1916=(x1903*x1904);
IkReal x1917=(x1903*x1907);
IkReal x1918=(x1902*x1907);
IkReal x1919=(pz*x1910);
IkReal x1920=(pz*x1913);
IkReal x1921=(x1906*x1913);
IkReal x1922=(x1905*x1913);
IkReal x1923=(x1905*x1910);
IkReal x1924=(x1906*x1910);
IkReal x1925=(x1908+x1915);
IkReal x1926=(x1923+x1924);
IkReal x1927=(x1909+x1918+x1916);
IkReal x1928=(x1921+x1922+x1919);
evalcond[0]=((-0.0020693190882272)+(((-1.0)*pz*x1914))+(((-1.0)*pz*x1912))+(((-1.0)*(px*px)))+(((-1.0)*x1903*x1911))+(((-1.0)*(pz*pz)))+((x1906*x1914))+(((-1.0)*x1906*x1912))+(((-1.0)*(py*py)))+((x1902*x1911)));
evalcond[1]=((((-1.0)*x1925))+(((-1.0)*x1927))+(((-1.0)*pz))+x1917);
evalcond[2]=((((-1.0)*x1905))+(((-1.0)*x1906))+(((-1.0)*x1927))+x1925+(((-1.0)*x1917)));
evalcond[3]=((((-1.0)*x1926))+(((-1.0)*x1928))+x1920+(((-0.105)*sj2)));
evalcond[4]=((0.123200006445727)+(((0.105)*cj2))+(((-1.0)*x1926))+x1920+x1928);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1929=py*py;
IkReal x1930=pz*pz;
IkReal x1931=px*px;
IkReal x1932=((0.000153639103771043)*sj2);
IkReal x1933=((0.000153639103771043)*cj2);
IkReal x1934=((0.0742462120245875)*cj2);
IkReal x1935=(cj0*px);
IkReal x1936=((0.17423112)*pz);
IkReal x1937=(py*sj0);
IkReal x1938=((0.0742462120245875)*sj2);
IkReal x1939=((0.0258720013536027)*cj2);
IkReal x1940=((0.08711556)*x1930);
IkReal x1941=((0.08711556)*x1929);
IkReal x1942=((0.08711556)*x1931);
IkReal x1943=(x1929*x1938);
IkReal x1944=(x1935*x1936);
IkReal x1945=(x1936*x1937);
IkReal x1946=(x1930*x1938);
IkReal x1947=(x1931*x1938);
IkReal x1948=(x1930*x1934);
IkReal x1949=(x1929*x1934);
IkReal x1950=(x1931*x1934);
IkReal x1951=(x1933+x1948+x1949+x1942+x1941+x1950);
IkReal x1952=(x1932+x1943+x1946+x1947+x1944+x1945);
CheckValue<IkReal> x1953=IKPowWithIntegerCheck(IKsign(((((-0.0258720013536027)*pz*sj2))+(((-1.0)*x1937*x1939))+(((-0.0303564831764544)*x1937))+(((-0.0303564831764544)*x1935))+(((-1.0)*x1935*x1939)))),-1);
if(!x1953.valid){
continue;
}
CheckValue<IkReal> x1954 = IKatan2WithCheck(IkReal(((0.000180269891189602)+(((-1.0)*x1940))+x1951+x1952)),IkReal(((-0.000180269891189602)+(((-1.0)*x1951))+x1940+x1952)),IKFAST_ATAN2_MAGTHRESH);
if(!x1954.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1953.value)))+(x1954.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1955=IKcos(j1);
IkReal x1956=IKsin(j1);
IkReal x1957=((0.0742462120245875)*cj2);
IkReal x1958=(cj0*px);
IkReal x1959=(py*sj0);
IkReal x1960=((0.0742462120245875)*sj2);
IkReal x1961=((0.08711556)*x1955);
IkReal x1962=((0.08711556)*x1956);
IkReal x1963=((0.707106781186548)*x1955);
IkReal x1964=((0.17423112)*x1958);
IkReal x1965=((0.17423112)*x1956);
IkReal x1966=((0.707106781186548)*x1956);
IkReal x1967=((0.17423112)*x1955);
IkReal x1968=(x1955*x1957);
IkReal x1969=(x1956*x1957);
IkReal x1970=(x1956*x1960);
IkReal x1971=(x1955*x1960);
IkReal x1972=(pz*x1963);
IkReal x1973=(pz*x1966);
IkReal x1974=(x1959*x1966);
IkReal x1975=(x1958*x1966);
IkReal x1976=(x1958*x1963);
IkReal x1977=(x1959*x1963);
IkReal x1978=(x1968+x1961);
IkReal x1979=(x1977+x1976);
IkReal x1980=(x1969+x1962+x1971);
IkReal x1981=(x1975+x1974+x1972);
evalcond[0]=((-0.0020693190882272)+(((-1.0)*x1959*x1965))+(((-1.0)*(px*px)))+((x1959*x1967))+(((-1.0)*x1956*x1964))+((x1955*x1964))+(((-1.0)*(pz*pz)))+(((-1.0)*pz*x1967))+(((-1.0)*pz*x1965))+(((-1.0)*(py*py))));
evalcond[1]=((((-1.0)*x1980))+(((-1.0)*x1978))+(((-1.0)*pz))+x1970);
evalcond[2]=((((-1.0)*x1980))+(((-1.0)*x1970))+x1978+(((-1.0)*x1958))+(((-1.0)*x1959)));
evalcond[3]=((((-1.0)*x1981))+(((-1.0)*x1979))+x1973+(((-0.105)*sj2)));
evalcond[4]=((0.123200006445727)+(((0.105)*cj2))+(((-1.0)*x1979))+x1981+x1973);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1982=((0.08711556)*pz);
IkReal x1983=((0.0742462120245875)*cj2);
IkReal x1984=(py*sj0);
IkReal x1985=(cj0*px);
IkReal x1986=((0.0742462120245875)*sj2);
IkReal x1987=((0.08711556)*x1984);
IkReal x1988=((0.08711556)*x1985);
IkReal x1989=(pz*x1986);
IkReal x1990=(pz*x1983);
IkReal x1991=(x1983*x1984);
IkReal x1992=(x1983*x1985);
IkReal x1993=(x1984*x1986);
IkReal x1994=(x1985*x1986);
IkReal x1995=(x1982+x1990+x1993+x1994);
IkReal x1996=(x1987+x1988+x1991+x1992);
CheckValue<IkReal> x1997 = IKatan2WithCheck(IkReal((x1989+(((-1.0)*x1996))+(((-1.0)*x1995)))),IkReal(((((-1.0)*x1989))+x1996+(((-1.0)*x1995)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1997.valid){
continue;
}
CheckValue<IkReal> x1998=IKPowWithIntegerCheck(IKsign(((0.0262032415882272)+(((0.0258720013536027)*cj2)))),-1);
if(!x1998.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1997.value)+(((1.5707963267949)*(x1998.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1999=IKcos(j1);
IkReal x2000=IKsin(j1);
IkReal x2001=((0.0742462120245875)*cj2);
IkReal x2002=(cj0*px);
IkReal x2003=(py*sj0);
IkReal x2004=((0.0742462120245875)*sj2);
IkReal x2005=((0.08711556)*x1999);
IkReal x2006=((0.08711556)*x2000);
IkReal x2007=((0.707106781186548)*x1999);
IkReal x2008=((0.17423112)*x2002);
IkReal x2009=((0.17423112)*x2000);
IkReal x2010=((0.707106781186548)*x2000);
IkReal x2011=((0.17423112)*x1999);
IkReal x2012=(x1999*x2001);
IkReal x2013=(x2000*x2001);
IkReal x2014=(x2000*x2004);
IkReal x2015=(x1999*x2004);
IkReal x2016=(pz*x2007);
IkReal x2017=(pz*x2010);
IkReal x2018=(x2003*x2010);
IkReal x2019=(x2002*x2010);
IkReal x2020=(x2002*x2007);
IkReal x2021=(x2003*x2007);
IkReal x2022=(x2005+x2012);
IkReal x2023=(x2020+x2021);
IkReal x2024=(x2006+x2015+x2013);
IkReal x2025=(x2019+x2018+x2016);
evalcond[0]=((-0.0020693190882272)+(((-1.0)*pz*x2011))+(((-1.0)*(px*px)))+(((-1.0)*x2003*x2009))+((x1999*x2008))+(((-1.0)*pz*x2009))+(((-1.0)*x2000*x2008))+(((-1.0)*(pz*pz)))+((x2003*x2011))+(((-1.0)*(py*py))));
evalcond[1]=(x2014+(((-1.0)*pz))+(((-1.0)*x2024))+(((-1.0)*x2022)));
evalcond[2]=((((-1.0)*x2014))+x2022+(((-1.0)*x2002))+(((-1.0)*x2003))+(((-1.0)*x2024)));
evalcond[3]=(x2017+(((-1.0)*x2025))+(((-1.0)*x2023))+(((-0.105)*sj2)));
evalcond[4]=((0.123200006445727)+(((0.105)*cj2))+x2025+x2017+(((-1.0)*x2023)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x2026=((0.17423112)*pz);
IkReal x2027=((0.17423112)*cj0*px);
IkReal x2028=((0.17423112)*py*sj0);
IkReal x2029=(x2027+x2028);
IkReal x2030=(x2029+(((-1.0)*x2026)));
IkReal x2031=((((-1.0)*x2026))+(((-1.0)*x2029)));
CheckValue<IkReal> x2034 = IKatan2WithCheck(IkReal(x2030),IkReal(x2031),IKFAST_ATAN2_MAGTHRESH);
if(!x2034.valid){
continue;
}
IkReal x2032=((1.0)*(x2034.value));
if((((x2031*x2031)+(x2030*x2030))) < -0.00001)
continue;
CheckValue<IkReal> x2035=IKPowWithIntegerCheck(IKabs(IKsqrt(((x2031*x2031)+(x2030*x2030)))),-1);
if(!x2035.valid){
continue;
}
if( (((-1.0)*(x2035.value)*(((-0.0020693190882272)+(((-1.0)*(px*px)))+(((-1.0)*(pz*pz)))+(((-1.0)*(py*py))))))) < -1-IKFAST_SINCOS_THRESH || (((-1.0)*(x2035.value)*(((-0.0020693190882272)+(((-1.0)*(px*px)))+(((-1.0)*(pz*pz)))+(((-1.0)*(py*py))))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x2033=((-1.0)*(IKasin(((-1.0)*(x2035.value)*(((-0.0020693190882272)+(((-1.0)*(px*px)))+(((-1.0)*(pz*pz)))+(((-1.0)*(py*py)))))))));
j1array[0]=((((-1.0)*x2032))+(((-1.0)*x2033)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2032))+(((1.0)*x2033)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2036=(py*sj0);
IkReal x2037=((6.73435029701474)*cj1);
IkReal x2038=((6.73435029701474)*sj1);
IkReal x2039=(cj0*px);
IkReal x2040=((6.73435029701474)*sj1);
IkReal x2041=((6.73435029701474)*cj1);
if( IKabs(((((-1.0)*x2036*x2038))+(((-1.0)*x2036*x2037))+((pz*x2040))+(((-1.0)*pz*x2041))+(((-1.0)*x2038*x2039))+(((-1.0)*x2037*x2039)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.17333339472121)+(((-1.0)*pz*x2038))+(((-1.0)*pz*x2037))+(((-1.0)*x2039*x2040))+((x2039*x2041))+(((-1.0)*x2036*x2040))+((x2036*x2041)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2036*x2038))+(((-1.0)*x2036*x2037))+((pz*x2040))+(((-1.0)*pz*x2041))+(((-1.0)*x2038*x2039))+(((-1.0)*x2037*x2039))))+IKsqr(((-1.17333339472121)+(((-1.0)*pz*x2038))+(((-1.0)*pz*x2037))+(((-1.0)*x2039*x2040))+((x2039*x2041))+(((-1.0)*x2036*x2040))+((x2036*x2041))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x2036*x2038))+(((-1.0)*x2036*x2037))+((pz*x2040))+(((-1.0)*pz*x2041))+(((-1.0)*x2038*x2039))+(((-1.0)*x2037*x2039))), ((-1.17333339472121)+(((-1.0)*pz*x2038))+(((-1.0)*pz*x2037))+(((-1.0)*x2039*x2040))+((x2039*x2041))+(((-1.0)*x2036*x2040))+((x2036*x2041))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x2042=IKcos(j2);
IkReal x2043=IKsin(j2);
IkReal x2044=((0.08711556)*cj1);
IkReal x2045=((0.08711556)*sj1);
IkReal x2046=((0.707106781186548)*cj1);
IkReal x2047=(py*sj0);
IkReal x2048=(cj0*px);
IkReal x2049=((0.707106781186548)*sj1);
IkReal x2050=((0.0742462120245875)*sj1);
IkReal x2051=((0.0742462120245875)*cj1);
IkReal x2052=(pz*x2049);
IkReal x2053=(pz*x2046);
IkReal x2054=(x2042*x2051);
IkReal x2055=(x2043*x2050);
IkReal x2056=(x2042*x2050);
IkReal x2057=(x2043*x2051);
IkReal x2058=(x2048*x2049);
IkReal x2059=(x2047*x2049);
IkReal x2060=(x2046*x2047);
IkReal x2061=(x2046*x2048);
IkReal x2062=(x2044+x2054);
IkReal x2063=(x2060+x2061);
IkReal x2064=(x2045+x2057+x2056);
IkReal x2065=(x2053+x2059+x2058);
evalcond[0]=(x2055+(((-1.0)*x2064))+(((-1.0)*x2062))+(((-1.0)*pz)));
evalcond[1]=((0.0282871640882272)+(((-1.0)*(px*px)))+(((-1.0)*(pz*pz)))+(((-1.0)*(py*py)))+(((0.0258720013536027)*x2042)));
evalcond[2]=(x2062+(((-1.0)*x2064))+(((-1.0)*x2047))+(((-1.0)*x2048))+(((-1.0)*x2055)));
evalcond[3]=(x2052+(((-1.0)*x2063))+(((-1.0)*x2065))+(((-0.105)*x2043)));
evalcond[4]=((0.123200006445727)+x2065+x2052+(((-1.0)*x2063))+(((0.105)*x2042)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
if( (((-1.09335044095026)+(((38.6518223438771)*(pz*pz)))+(((38.6518223438771)*(py*py)))+(((38.6518223438771)*(px*px))))) < -1-IKFAST_SINCOS_THRESH || (((-1.09335044095026)+(((38.6518223438771)*(pz*pz)))+(((38.6518223438771)*(py*py)))+(((38.6518223438771)*(px*px))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x2066=IKasin(((-1.09335044095026)+(((38.6518223438771)*(pz*pz)))+(((38.6518223438771)*(py*py)))+(((38.6518223438771)*(px*px)))));
j2array[0]=((-1.5707963267949)+(((1.0)*x2066)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((1.5707963267949)+(((-1.0)*x2066)));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal j1eval[2];
j1eval[0]=((2.0256060774037)+(((2.0)*cj2))+(((2.22044604925031e-16)*sj2)));
j1eval[1]=IKsign(((0.0262032415882272)+(((0.0258720013536027)*cj2))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x2067=(py*sj0);
IkReal x2068=((2.22044604925031e-16)*sj2);
IkReal x2069=(cj0*px);
IkReal x2070=((0.0258720013536027)*cj2);
IkReal x2071=((2.0)*cj2);
IkReal x2072=(pz*sj2);
j1eval[0]=((((-2.34666678944242)*x2069))+(((-2.34666678944242)*x2067))+(((-1.0)*x2069*x2071))+(((-1.0)*x2067*x2071))+(((-2.0)*x2072))+(((2.22044604925031e-16)*cj2*pz))+(((-1.0)*x2067*x2068))+(((-1.0)*x2068*x2069)));
j1eval[1]=IKsign(((((-0.0258720013536027)*x2072))+(((-1.0)*x2069*x2070))+(((-0.0303564831764544)*x2069))+(((-0.0303564831764544)*x2067))+(((-1.0)*x2067*x2070))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x2073=((0.0258720013536027)*sj2);
IkReal x2074=(py*sj0);
IkReal x2075=(cj0*px);
IkReal x2076=((2.0)*sj2);
IkReal x2077=(cj2*pz);
IkReal x2078=((2.22044604925031e-16)*cj2);
j1eval[0]=(((x2075*x2078))+(((2.22044604925031e-16)*pz*sj2))+(((2.0)*x2077))+(((2.34666678944242)*pz))+(((-1.0)*x2074*x2076))+((x2074*x2078))+(((-1.0)*x2075*x2076)));
j1eval[1]=IKsign(((((0.0258720013536027)*x2077))+(((0.0303564831764544)*pz))+(((-1.0)*x2073*x2075))+(((-1.0)*x2073*x2074))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2079=py*py;
IkReal x2080=px*px;
IkReal x2081=pz*pz;
IkReal x2082=cj0*cj0;
IkReal x2083=((0.000153639103771043)*sj2);
IkReal x2084=((0.000153639103771043)*cj2);
IkReal x2085=((0.0258720013536027)*sj2);
IkReal x2086=(py*sj0);
IkReal x2087=(cj0*px);
IkReal x2088=((0.0742462120245875)*sj2);
IkReal x2089=((0.17423112)*pz);
IkReal x2090=((0.0742462120245875)*cj2);
IkReal x2091=((0.08711556)*x2079);
IkReal x2092=((0.08711556)*x2081);
IkReal x2093=((0.08711556)*x2080);
IkReal x2094=((0.0742462120245875)*x2079);
IkReal x2095=((0.17423112)*x2082);
IkReal x2096=(x2087*x2089);
IkReal x2097=(x2086*x2089);
IkReal x2098=(x2079*x2088);
IkReal x2099=(x2081*x2090);
IkReal x2100=(x2081*x2088);
IkReal x2101=(x2079*x2090);
IkReal x2102=(x2080*x2090);
IkReal x2103=(x2080*x2088);
IkReal x2104=(x2080*x2095);
IkReal x2105=((0.34846224)*x2086*x2087);
IkReal x2106=(x2079*x2095);
IkReal x2107=(x2097+x2096);
IkReal x2108=((-0.000180269891189602)+x2091+x2105+x2104);
IkReal x2109=(x2098+x2083+x2103+x2100);
IkReal x2110=(x2093+x2092+x2099+x2084+x2102+x2101+x2106);
CheckValue<IkReal> x2111 = IKatan2WithCheck(IkReal(((((-1.0)*x2107))+x2109+x2108+(((-1.0)*x2110)))),IkReal(((((-1.0)*x2109))+x2108+x2107+(((-1.0)*x2110)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2111.valid){
continue;
}
CheckValue<IkReal> x2112=IKPowWithIntegerCheck(IKsign(((((0.0258720013536027)*cj2*pz))+(((-1.0)*x2085*x2087))+(((-1.0)*x2085*x2086))+(((0.0303564831764544)*pz)))),-1);
if(!x2112.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x2111.value)+(((1.5707963267949)*(x2112.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2113=IKcos(j1);
IkReal x2114=IKsin(j1);
IkReal x2115=((0.0742462120245875)*cj2);
IkReal x2116=(cj0*px);
IkReal x2117=(py*sj0);
IkReal x2118=((0.0742462120245875)*sj2);
IkReal x2119=((0.08711556)*x2113);
IkReal x2120=((0.08711556)*x2114);
IkReal x2121=((0.707106781186548)*x2113);
IkReal x2122=((0.17423112)*x2116);
IkReal x2123=((0.17423112)*x2114);
IkReal x2124=((0.707106781186548)*x2114);
IkReal x2125=((0.17423112)*x2113);
IkReal x2126=(x2113*x2115);
IkReal x2127=(x2114*x2115);
IkReal x2128=(x2114*x2118);
IkReal x2129=(x2113*x2118);
IkReal x2130=(pz*x2121);
IkReal x2131=(pz*x2124);
IkReal x2132=(x2117*x2124);
IkReal x2133=(x2116*x2124);
IkReal x2134=(x2116*x2121);
IkReal x2135=(x2117*x2121);
IkReal x2136=(x2126+x2119);
IkReal x2137=(x2134+x2135);
IkReal x2138=(x2120+x2127+x2129);
IkReal x2139=(x2132+x2133+x2130);
evalcond[0]=((-0.0020693190882272)+(((-1.0)*x2117*x2123))+(((-1.0)*(px*px)))+((x2113*x2122))+(((-1.0)*x2114*x2122))+(((-1.0)*(pz*pz)))+(((-1.0)*(py*py)))+((x2117*x2125))+(((-1.0)*pz*x2125))+(((-1.0)*pz*x2123)));
evalcond[1]=((((-1.0)*x2136))+(((-1.0)*x2138))+x2128+(((-1.0)*pz)));
evalcond[2]=((((-1.0)*x2138))+x2136+(((-1.0)*x2128))+(((-1.0)*x2116))+(((-1.0)*x2117)));
evalcond[3]=((((-1.0)*x2137))+(((-1.0)*x2139))+x2131+(((-0.105)*sj2)));
evalcond[4]=((0.123200006445727)+(((0.105)*cj2))+(((-1.0)*x2137))+x2131+x2139);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2140=py*py;
IkReal x2141=pz*pz;
IkReal x2142=px*px;
IkReal x2143=((0.000153639103771043)*sj2);
IkReal x2144=((0.000153639103771043)*cj2);
IkReal x2145=((0.0742462120245875)*cj2);
IkReal x2146=(cj0*px);
IkReal x2147=((0.17423112)*pz);
IkReal x2148=(py*sj0);
IkReal x2149=((0.0742462120245875)*sj2);
IkReal x2150=((0.0258720013536027)*cj2);
IkReal x2151=((0.08711556)*x2141);
IkReal x2152=((0.08711556)*x2140);
IkReal x2153=((0.08711556)*x2142);
IkReal x2154=(x2140*x2149);
IkReal x2155=(x2146*x2147);
IkReal x2156=(x2147*x2148);
IkReal x2157=(x2141*x2149);
IkReal x2158=(x2142*x2149);
IkReal x2159=(x2141*x2145);
IkReal x2160=(x2140*x2145);
IkReal x2161=(x2142*x2145);
IkReal x2162=(x2161+x2160+x2152+x2153+x2159+x2144);
IkReal x2163=(x2154+x2155+x2156+x2157+x2158+x2143);
CheckValue<IkReal> x2164 = IKatan2WithCheck(IkReal(((0.000180269891189602)+x2163+x2162+(((-1.0)*x2151)))),IkReal(((-0.000180269891189602)+x2163+x2151+(((-1.0)*x2162)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2164.valid){
continue;
}
CheckValue<IkReal> x2165=IKPowWithIntegerCheck(IKsign(((((-0.0258720013536027)*pz*sj2))+(((-1.0)*x2148*x2150))+(((-1.0)*x2146*x2150))+(((-0.0303564831764544)*x2146))+(((-0.0303564831764544)*x2148)))),-1);
if(!x2165.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x2164.value)+(((1.5707963267949)*(x2165.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2166=IKcos(j1);
IkReal x2167=IKsin(j1);
IkReal x2168=((0.0742462120245875)*cj2);
IkReal x2169=(cj0*px);
IkReal x2170=(py*sj0);
IkReal x2171=((0.0742462120245875)*sj2);
IkReal x2172=((0.08711556)*x2166);
IkReal x2173=((0.08711556)*x2167);
IkReal x2174=((0.707106781186548)*x2166);
IkReal x2175=((0.17423112)*x2169);
IkReal x2176=((0.17423112)*x2167);
IkReal x2177=((0.707106781186548)*x2167);
IkReal x2178=((0.17423112)*x2166);
IkReal x2179=(x2166*x2168);
IkReal x2180=(x2167*x2168);
IkReal x2181=(x2167*x2171);
IkReal x2182=(x2166*x2171);
IkReal x2183=(pz*x2174);
IkReal x2184=(pz*x2177);
IkReal x2185=(x2170*x2177);
IkReal x2186=(x2169*x2177);
IkReal x2187=(x2169*x2174);
IkReal x2188=(x2170*x2174);
IkReal x2189=(x2172+x2179);
IkReal x2190=(x2187+x2188);
IkReal x2191=(x2173+x2182+x2180);
IkReal x2192=(x2183+x2186+x2185);
evalcond[0]=((-0.0020693190882272)+(((-1.0)*x2170*x2176))+(((-1.0)*(px*px)))+((x2170*x2178))+((x2166*x2175))+(((-1.0)*pz*x2178))+(((-1.0)*pz*x2176))+(((-1.0)*(pz*pz)))+(((-1.0)*(py*py)))+(((-1.0)*x2167*x2175)));
evalcond[1]=(x2181+(((-1.0)*pz))+(((-1.0)*x2189))+(((-1.0)*x2191)));
evalcond[2]=(x2189+(((-1.0)*x2181))+(((-1.0)*x2170))+(((-1.0)*x2191))+(((-1.0)*x2169)));
evalcond[3]=(x2184+(((-1.0)*x2192))+(((-1.0)*x2190))+(((-0.105)*sj2)));
evalcond[4]=((0.123200006445727)+(((0.105)*cj2))+x2192+x2184+(((-1.0)*x2190)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2193=((0.08711556)*pz);
IkReal x2194=((0.0742462120245875)*cj2);
IkReal x2195=(py*sj0);
IkReal x2196=(cj0*px);
IkReal x2197=((0.0742462120245875)*sj2);
IkReal x2198=((0.08711556)*x2195);
IkReal x2199=((0.08711556)*x2196);
IkReal x2200=(pz*x2197);
IkReal x2201=(pz*x2194);
IkReal x2202=(x2194*x2195);
IkReal x2203=(x2194*x2196);
IkReal x2204=(x2195*x2197);
IkReal x2205=(x2196*x2197);
IkReal x2206=(x2201+x2204+x2205+x2193);
IkReal x2207=(x2202+x2203+x2198+x2199);
CheckValue<IkReal> x2208=IKPowWithIntegerCheck(IKsign(((0.0262032415882272)+(((0.0258720013536027)*cj2)))),-1);
if(!x2208.valid){
continue;
}
CheckValue<IkReal> x2209 = IKatan2WithCheck(IkReal((x2200+(((-1.0)*x2206))+(((-1.0)*x2207)))),IkReal((x2207+(((-1.0)*x2206))+(((-1.0)*x2200)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2209.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2208.value)))+(x2209.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2210=IKcos(j1);
IkReal x2211=IKsin(j1);
IkReal x2212=((0.0742462120245875)*cj2);
IkReal x2213=(cj0*px);
IkReal x2214=(py*sj0);
IkReal x2215=((0.0742462120245875)*sj2);
IkReal x2216=((0.08711556)*x2210);
IkReal x2217=((0.08711556)*x2211);
IkReal x2218=((0.707106781186548)*x2210);
IkReal x2219=((0.17423112)*x2213);
IkReal x2220=((0.17423112)*x2211);
IkReal x2221=((0.707106781186548)*x2211);
IkReal x2222=((0.17423112)*x2210);
IkReal x2223=(x2210*x2212);
IkReal x2224=(x2211*x2212);
IkReal x2225=(x2211*x2215);
IkReal x2226=(x2210*x2215);
IkReal x2227=(pz*x2218);
IkReal x2228=(pz*x2221);
IkReal x2229=(x2214*x2221);
IkReal x2230=(x2213*x2221);
IkReal x2231=(x2213*x2218);
IkReal x2232=(x2214*x2218);
IkReal x2233=(x2223+x2216);
IkReal x2234=(x2231+x2232);
IkReal x2235=(x2226+x2224+x2217);
IkReal x2236=(x2229+x2227+x2230);
evalcond[0]=((-0.0020693190882272)+(((-1.0)*(px*px)))+((x2214*x2222))+((x2210*x2219))+(((-1.0)*pz*x2220))+(((-1.0)*pz*x2222))+(((-1.0)*(pz*pz)))+(((-1.0)*x2214*x2220))+(((-1.0)*x2211*x2219))+(((-1.0)*(py*py))));
evalcond[1]=(x2225+(((-1.0)*pz))+(((-1.0)*x2235))+(((-1.0)*x2233)));
evalcond[2]=((((-1.0)*x2214))+(((-1.0)*x2213))+x2233+(((-1.0)*x2235))+(((-1.0)*x2225)));
evalcond[3]=(x2228+(((-1.0)*x2236))+(((-1.0)*x2234))+(((-0.105)*sj2)));
evalcond[4]=((0.123200006445727)+(((0.105)*cj2))+x2228+x2236+(((-1.0)*x2234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver_FR solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver_FR solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - ester (6b8341a66c029abf7d3c8a30fadf0313)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004a"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif